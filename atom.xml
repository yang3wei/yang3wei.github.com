<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[yang3wei的专栏]]></title>
  <link href="http://yang3wei.github.com/atom.xml" rel="self"/>
  <link href="http://yang3wei.github.com/"/>
  <updated>2013-02-03T15:03:00+08:00</updated>
  <id>http://yang3wei.github.com/</id>
  <author>
    <name><![CDATA[yang3wei]]></name>
    <email><![CDATA[88480585@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA["git rm" 和 "rm" 的区别]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/03/git-rm-he-rm-de-qu-bie/"/>
    <updated>2013-02-03T14:01:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/03/git-rm-he-rm-de-qu-bie</id>
    <content type="html"><![CDATA[<p>这是一个比较肤浅的问题，但对于 git 初学者来说，还是有必要提一下的。</p>

<!-- more -->


<p>用 <code>git rm</code> 来删除文件，同时还会将这个删除操作记录下来；<br/>
用 <code>rm</code> 来删除文件，仅仅是删除了物理文件，没有将其从 git 的记录中剔除。</p>

<p>直观的来讲，<code>git rm</code> 删除过的文件，执行 <code>git commit -m "abc"</code> 提交时，<br/>
会自动将删除该文件的操作提交上去。</p>

<p>而对于用 <code>rm</code> 命令直接删除的文件，执行 <code>git commit -m "abc"</code> 提交时，<br/>
则不会将删除该文件的操作提交上去。<br/>
不过不要紧，即使你已经通过 <code>rm</code> 将某个文件删除掉了，<br/>
也可以再通过 <code>git rm</code> 命令重新将该文件从 git 的记录中删除掉，<br/>
这样的话，在执行 <code>git commit -m "abc"</code> 以后，也能将这个删除操作提交上去。</p>

<p>如果之前不小心用 <code>rm</code> 命令删除了一大批文件呢？<br/>
是的，此时用 <code>git rm</code> 逐个地再删除一次就显得相当蛋疼了。<br/>
所幸还有更方便的处理方案，用如下的方式做提交就没有问题了：
<code>git commit -am "abc"</code></p>

<h3>总结一下：</h3>

<p>在被 git 管理的目录中删除文件时，可以选择如下两种方式来记录删除动作：<br/>
一、<code>rm</code> + <code>git commit -am "abc"</code><br/>
二、<code>git rm</code> + <code>git commit -m "abc"</code><br/>
另外，<code>git add .</code> 仅能记录添加、改动的动作，删除的动作需靠 <code>git rm</code> 来完成。<br/>
最后，<code>rm</code> 删除的文件是处于 <code>not staged</code> 状态的，<br/>
也就是一种介于 “未改动” 和 “已提交过” 之间的状态。</p>

<h3>下面是测试图</h3>

<p>一、<code>git rm</code> 与 <code>rm</code> 之间的区别
<img class="center" src="http://yang3wei.github.com/images/posts/differences_btw_git_rm_and_rm.png">
二、<code>git add .</code> 无法记录 <code>rm</code> 删除动作<br/>
<img class="center" src="http://yang3wei.github.com/images/posts/add_dot_make_no_use.png">
三、<code>git commit -m "abc"</code> 无法提交 <code>rm</code> 删除动作<br/>
<img class="center" src="http://yang3wei.github.com/images/posts/git_rm_better_than_rm.png">
四、<code>git commit -am "abc"</code> 中参数 a 的作用<br/>
<img class="center" src="http://yang3wei.github.com/images/posts/usage_of_flag_a.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git-credential-osxkeychain died of signal 11 解决方案]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/03/git-credential-osxkeychain-died-of-signal-11-jie-jue-fang-an/"/>
    <updated>2013-02-03T00:30:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/03/git-credential-osxkeychain-died-of-signal-11-jie-jue-fang-an</id>
    <content type="html"><![CDATA[<p>相关帖子链接：<br/>
<a href="http://stackoverflow.com/questions/14272634/error-git-credential-osxkeychain-died-of-signal-11/14663780#14663780">&#8230;osxkeychain-died-of-signal-11@stackoverflow.com</a><br/>
前两天在执行 <code>git push origin master</code> 命令的时候突然发现不灵光了，<br/>
死活都推不进 GitHub 服务器，给出的提示如下：<br/>
<code>error: git-credential-osxkeychain died of signal 11</code><br/>
<code>error: git-credential-osxkeychain died of signal 11</code></p>

<!-- more -->


<p>我没有弄错，给出了两行一模一样的提示。<br/>
遇到这个问题以后我的第一反应就是 googling，<br/>
直接就找到了文首给出的那个 stackoverflow 的帖子。</p>

<p>不过这个帖子并没有帮我解决掉这个问题，然后我又继续 googling，<br/>
没有太大的收获，涉及到相关问题的链接不是很多。。<br/>
我一度多次打开 stackoverflow 的这个帖子，仔细的搜寻，<br/>
想看一看我是否遗忘了什么重要的步骤，不过很可惜，没有发现有价值的情报。</p>

<p>后来我计上心头，想到了一个好办法，<br/>
去试一试另外一个本地目录的 work copy 能否推到 GitHub 服务器里面去。<br/>
我做了一些变更并且提交过以后，就执行 “git push origin master” 命令，<br/>
很奇葩的没有出错，也没有向我询问用户名和密码~</p>

<p>到这里我就有点儿纳闷儿了，凭什么这里可以那儿却不行？！<br/>
纠结了好几天了，今天突然又想到一个办法，<br/>
怎么不对比一下两个 work copy 的 .git/config 文件呢，说不定有有所收获！<br/>
果不其然，经我对比过后我发现两个 work copy 所采用的配置有所不同。<br/>
区别在哪里呢？下面我给出来对比一下吧：<br/>
<strong>这里是 push 时抛错的那个 work copy 的 .git/config 文件的部分配置</strong></p>

<pre><code>...
[remote "origin"]
    url = https://github.com/yang3wei/octopress-3-in-one.git
    fetch = +refs/heads/*:refs/remotes/origin/*
...
</code></pre>


<p><strong>这里是 push 时没问题的 work copy 的 .git/config 文件对应的部分配置</strong></p>

<pre><code>...
[remote "origin"]
    url = git@github.com:yang3wei/game-development-tools
    fetch = +refs/heads/*:refs/remotes/master/*
...
</code></pre>


<p>对比后我就多少有些念想了，何不试着把有问题的照着没问题的改弄一翻？<br/>
说干就干，于是我就将有问题的那块儿配置改成了如下这番：</p>

<pre><code>
[remote "origin"]
    url = git@github.com/yang3wei/octopress-3-in-one
    fetch = +refs/heads/*:refs/remotes/origin/*
...
</code></pre>


<p>然后再执行 <code>git push origin master</code> 命令，发现那该死的错误已经悄然遁去~</p>

<h3>总结一下</h3>

<p>一言以蔽之，就是更换了一下 .git/config 中 url 的写法而已，<br/>
将 <code>url = https://github.com/yang3wei/octopress-3-in-one.git</code><br/>
改为 <code>url = git@github.com:yang3wei/octopress-3-in-one</code><br/>
说到这里，我隐约想起好像看到过一句话：<br/>
ssh 加密传输好像是非后面那种 url 格式不可的，<br/>
那么从这点来看的话，<br/>
<code>git-credential-osxkeychain</code> 在 https 传输模式下出错也就情有可原了~<br/>
最后，创建属于自己的 repo 的时候，<br/>
最好还是能以 <code>git@github.com...</code> 这种 url 的写法来初始化仓库，<br/>
以避免当前讨论这种问题的出现~</p>

<h3>另外</h3>

<p>其间也试了下将<br/>
<code>fetch = +refs/heads/*:refs/remotes/origin/*</code><br/>
改为<br/>
<code>fetch = +refs/heads/*:refs/remotes/master/*</code><br/>
如此这般以后我执行 <code>git push origin master</code> 也没有出现错误~<br/>
不过后来在我查看的时候发现竟然多出了一个分支：<br/>
<code>* master</code><br/>
<code> remotes/master/master/</code><br/>
<code> remotes/origin/master/</code><br/>
显而易见，那里我不该将 fetch 里面的 origin 改成 master，<br/>
这里直接导致我远程那边多出了一个无用的分支来~<br/>
话说这里该如何将这个多余的远程分支 <code>remotes/master/master</code> 给干掉呢？<br/>
记得删除远程服务器上面的分支可以用这条命令：<code>git push origin :branchname</code><br/>
不过这里比较特殊，这条多余分支的名字也是 <code>master</code> 呢！<br/>
搜寻良久，stackoverflow 再次帮了我一把，实在是给力啊！下面是相关链接：<br/>
<a href="http://stackoverflow.com/questions/1072171/how-do-you-remove-an-invalid-remote-branch-reference-from-git">How do you Remove an Invalid Remote Branch Reference from Git?</a><br/>
罗列出我所尝试的删除分支的命令：<br/>
<code>git branch -d remotes/master/master</code> 报错<br/>
<code>git push master :master</code> 报错<br/>
<code>git push origin :/remotes/master/master</code> 报错
<code>git gc --prune=now</code> 无效<br/>
<code>git remote rm master</code> 报错<br/>
<code>git branch -rd master/master</code> 删除成功！</p>

<h3>执行 git status 命令后出现如下提示的涵义</h3>

<pre><code># On branch master
# Your branch is ahead of 'origin/master' by 1 commit.
#   (use "git push" to publish your local commits)
#
nothing to commit, working directory clean
</code></pre>


<p>回忆起前几天对 git 不熟悉时因为老是看到这几行提示而感到心里不舒服的情景，<br/>
才发现我真是傻得可爱，这些提示的意思不就是说：<br/>
<strong>你当前有 1 个已完成的提交还没推到远程服务器，执行 push 命令来推出已完成的提交</strong><br/>
哎，那天也不知道是怎么了，肯定是发现和平时不一样却没有仔细看就匆忙下了定论，<br/>
今后得把这种粗细大意的毛病给改掉~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git 与 SVN 之间的五个基本区别]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/02/git-yu-svn-zhi-jian-de-wu-ge-ji-ben-qu-bie/"/>
    <updated>2013-02-02T18:03:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/02/git-yu-svn-zhi-jian-de-wu-ge-ji-ben-qu-bie</id>
    <content type="html"><![CDATA[<p>原文链接：<br/>
<a href="http://blog.csdn.net/dadoneo/article/details/6098540">http://blog.csdn.net/dadoneo/article/details/6098540</a><br/>
在比较两者之前，可以阅读：<br/>
<a href="rubynroll.javaeye.com/blog/203133">SVN + GIT = 鱼与熊掌兼得</a><br/>
<a href="wenku.baidu.com/view/dd6d36eef8c75fbfc77db277.html">开源版本控制 SVN 用户严重的 git</a><br/>
<a href="www.robinlu.com/blog/archives/194">如何在 SVN 系统中使用 git</a></p>

<!-- more -->


<p>如果你在读这篇文章，说明你跟大多数开发者一样对 GIT 感兴趣，<br/>
如果你还没有机会来试一试 GIT，我想现在你就要了解它了。</p>

<p>GIT 不仅仅是个版本控制系统，它也是个内容管理系统(CMS)，工作管理系统等。<br/>
如果你是一个具有使用 SVN 背景的人，<br/>
你需要做一定的思想转换，来适应 GIT 提供的一些概念和特征。<br/>
所以，这篇文章的主要目的就是通过介绍 GIT 能做什么、<br/>
它和 SVN 在深层次上究竟有什么不同来帮助你认识它。</p>

<p>那好，这就开始吧&#8230;</p>

<h2>1.GIT 是分布式的，SVN 不是：</h2>

<p>这是 GIT 和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。<br/>
如果你能理解这个概念，那么你就已经上手一半了。<br/>
需要做一点声明，GIT 并不是目前第一个或唯一的分布式版本控制系统。<br/>
还有一些系统，例如 Bitkeeper, Mercurial 等，也是运行在分布式模式上的。<br/>
但 GIT 在这方面做的更好，而且有更多强大的功能特征。</p>

<p>GIT 跟 SVN 一样有自己的集中式版本库或服务器。<br/>
但，GIT 更倾向于被使用于分布式模式，也就是每个开发人员从中心<br/>
版本库/服务器上 chect out 代码后会在自己的机器上克隆一个自己的版本库。<br/>
可以这样说，如果你被困在一个不能连接网络的地方时，就像在飞机上，地下室，<br/>
电梯里等，你仍然能够提 交文件，查看历史版本记录，创建项目分支，等。<br/>
对一些人来说，这好像没多大用处，但当你突然遇到没有网络的环境时，这个将解决你的大麻烦。</p>

<p>同样，这种分布式的操作模式对于开源软件社区的开发来说也是个巨大的恩赐，你不必再像以前那样做出补丁包，<br/>
通过 email 方式发送出去，你只需要创建一个分支，向项目团队发送一个推请求。<br/>
这能让你的代码保持最新，而且不会在传输过程中丢失。GitHub.com 就是一个这样的优秀案例。</p>

<p>有些谣言传出来说 Subversion 将来的版本也会基于分布式模式。但至少目前还看不出来。</p>

<h2>2.GIT 把内容按元数据方式存储，而 SVN 是按文件：</h2>

<p>所有的资源控制系统都是把文件的元信息隐藏在一个类似 <code>.svn</code>，<code>.cvs</code> 等的文件夹里。<br/>
如果你把 <code>.git</code> 目录的体积大小跟 <code>.svn</code> 比较，你会发现它们差距很大。<br/>
因为，<code>.git</code> 目录是处于你的机器上的一个克隆版的版本库，<br/>
它拥有中心版本库上所有的东西，例如标签，分支，版本记录等。</p>

<h2>3.GIT 分支和 SVN 的分支不同：</h2>

<p>分支在 SVN 中一点不特别，就是版本库中的另外的一个目录。如果你想知道是否合并了一个分支，<br/>
你需要手工运行像这样的命令 svn propget svn:mergeinfo，来确认代码是否被合并。<br/>
感谢 Ben 同学指出这个特征。所以，经常会发生有些分支被遗漏的情况。<br/>
然而，处理 GIT 的分支却是相当的简单和有趣。你可以从同一个工作目录下快速的在几个分支间切换。<br/>
你很容易发现未被合并的分支，你能简单而快捷的合并这些文件。</p>

<h2>4.GIT 没有一个全局的版本号，而 SVN 有：</h2>

<p>目前为止这是跟 SVN 相比 GIT 缺少的最大的一个特征。<br/>
你也知道，SVN 的版本号实际是任何一个相应时间的源代码快照。<br/>
我认为它是从 CVS 进化到 SVN 的最大的一个突破。<br/>
因为 GIT 和 SVN 从概念上就不同，我不知道 GIT 里是什么特征与之对应。<br/>
如果你有任何的线索，请在评论里奉献出来与大家共享。<br/>
更新：有些读者指出，我们可以使用 GIT 的 SHA-1 来唯一的标识一个代码快照。<br/>
这个并不能完全的代替 SVN 里容易阅读的数字版本号。但，用途应该是相同的。</p>

<h2>5.GIT 的内容完整性要优于 SVN：</h2>

<p>GIT 的内容存储使用的是 SHA-1 哈希算法。<br/>
这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。<br/>
这里有一个很好的关于 GIT 内容完整性的讨论 – <br/>
<a href="http://stackoverflow.com/questions/964331/git-file-integrity">http://stackoverflow.com/questions/964331/git-file-integrity</a></p>

<h2>GIT 和 SVN 之间只有这五处不同吗？</h2>

<p>当然不是。我想这五个只是 “最基本的” 和 “最吸引人” 的，我只想到这五点。<br/>
如果你发现有比这五点更有趣的，请共享出来，欢迎。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[青菜豆腐保平安]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/02/qing-cai-dou-fu-bao-ping-an/"/>
    <updated>2013-02-02T16:50:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/02/qing-cai-dou-fu-bao-ping-an</id>
    <content type="html"><![CDATA[<p>2000 多年来，随着中外文化的交流，豆腐不但走遍全国，而且走向世界。<br/>
今天，世界人民都把品尝中国豆腐菜看作一种美妙的艺术享受，<br/>
它就象中国的茶叶、瓷器、丝绸一样享誉世界。</p>

<!-- more -->


<p>说来也许令人难以相信，20 世纪 80 年代，美国著名的《经济展望》杂志竟然宣称：<br/>
“未来十年，最成功最有市场潜力的并非是汽车、电视机或电子产品，而是中国的豆腐。”</p>

<p>不错，中国的豆腐——不论男女老少，不分民族、宗教，人人皆可享用。<br/>
这白白嫩嫩、强身健体、延年益寿、价廉物美的豆腐，也引出了一个“豆腐文化”。</p>

<p>豆腐文化中头一个问题就是豆腐的发源地。中国是确信无疑的豆腐之乡，它的老家就在安徽寿县。<br/>
据五代谢绰《宋拾遗录》载：“豆腐之术，三代前后未闻。此物至汉淮南王亦始传其术于世。”<br/>
南宋大理学家朱熹也曾在《素食诗》中写道：<br/>
“种豆豆苗稀，力竭心已腐；早知淮南术，安坐获泉布。” 诗末自注：“世传豆腐本为淮南王术。”</p>

<p>淮南王刘安，是西汉高祖刘邦之孙，公元前164年封为淮南王，<br/>
都邑设于寿春(即今安徽寿县城关)，名扬古今的八公山正在寿春城边。</p>

<p>刘安雅好道学，欲求长生不老之术，不惜重金广招方术之士，<br/>
其中较为出名的有苏非、李尚、田由、雷波、伍波、晋昌、毛被、左昊八人，号称“八公”。<br/>
刘安幽八公相伴，登北山而造炉，炼仙丹以求寿。<br/>
他们取山中 “珍珠”、“大泉”、“马跑” 三泉清冽之水磨制豆汁，又以豆汁培育丹苗，<br/>
不料炼丹不成，豆汁与盐卤化合成一片芳香诱人、白白嫩嫩的东西。<br/>
当地胆大农夫取而食之，竟然美味可口，于是取名“豆腐”。<br/>
北山从此更名“八公山”，刘安也于无意中成为豆腐的老祖宗。</p>

<p>自刘安发明豆腐之后，八公山方圆数十里的广大村镇，成了名副其实的“豆腐之乡”。</p>

<p>有了豆腐自然会有豆腐菜。八公山人家，甭说一般家庭主妇，<br/>
就是十四五岁的娃娃也能做出几样风味各异的豆腐菜，<br/>
比如什么香椿拌豆腐、豆腐鸡蛋、辣酱拌豆腐、炒豆腐等等。<br/>
改革开放以后，八公山街头的 “豆腐馆” 比比皆是、远近闻名。</p>

<p>他们或煨、或煮、或煎、或炸、或溜……拢丝、雕刻各显身手，不仅引得本地人常来过把瘾，<br/>
合肥、蚌埠等相邻市县的人们隔三岔五光顾 “豆腐宴”，就连德国、英国、日本、荷兰、捷克、<br/>
斯洛伐克、香港、台湾等国家和地区的宾客也常常云集八公山下，品尝 “寿桃豆腐”、“琵琶豆腐”、<br/>
“葡萄豆腐”、“金钱豆腐” 等 400 余款造型逼真、色彩纷呈、鲜美异常、风味独具的豆腐菜。</p>

<p>豆腐文化也逐渐在整个神州大地弘扬。南北朝梁代建康(今南京)人诸葛颖曾著《淮南王食经))130卷，<br/>
毗邻淮南的江苏显然是“近水楼台先得月”，首先受到豆腐文化的影响。<br/>
一直到现在，江苏人还把豆腐、面筋、菌蕈、笋芽列为素菜四大金刚。</p>

<p>宋明以后，豆腐文化更加广为流传，许多文人名士也走进传播者的行列。<br/>
北宋大文豪苏东坡善食豆腐，元佑二年至无佑四年任杭州知府期间，曾亲自动手制作东坡豆腐。<br/>
南宋诗人陆游也在自编《渭南文集》中记载了豆腐菜的烹调。<br/>
更有趣的是清代大臣宋荦关于康熙皇帝与豆腐的一段记载。<br/>
时值康熙南巡苏州，皇帝新赐大臣的不是金玉奇玩，而是颇具人情味、乡土气的豆腐菜。</p>

<p>随着豆腐文化的传播，各地人民依照自己的口味，不断发展和丰富着豆腐菜的制作方法。<br/>
流传至今的有四川东部的 “口袋豆腐”，以汤汁乳白、状若橄榄、质地柔嫩、味道鲜美为特色；<br/>
成都一带享誉海内外的 “麻婆豆腐”，独具麻、辣、鲜、嫩、烫五大特点。<br/>
湖北名食 “荷包豆腐”、杭州名菜 “煨冻豆腐”、无锡“镜豆腐”、扬州“鸡汁煮干丝”、屯溪“霉豆腐”、<br/>
以及以豆腐衣为原料的“腐乳糟大肠”等等。当豆腐菜走向更遥远的边疆时，独特风味也就更为丰富。<br/>
譬如，吉林盛行“素鸡豆腐”，色泽美观，五香味浓；<br/>
又有“蛤蜊杏仁豆腐”，杏仁止咳润肠，雪蛤清头明目，豆腐软嫩细腻，色泽纯洁乳白，菜味甘短期爽口。<br/>
此外，朝鲜族人民用牛肉、粉条、鸡蛋、豆腐制成“梅云汤”，广西壮族有名菜“清蒸豆腐圆”，<br/>
云南大理白族有 “腊味螺豆腐”，香嫩麻辣，腊香扑鼻。<br/>
而“冰糖螺豆腐”，则为滋阴降火，怡疗神经衰弱的民间风味补品……</p>

<p>就这样，在长期的社会发展中，问世于寿县八公山的豆腐，终于传遍神州大地，<br/>
并逐渐形成中国豆腐的八大系列：<br/>
一为水豆腐，包括质地粗硬的北豆腐和细嫩的南豆腐；<br/>
二为半脱水制品，主要有百叶、千张等；<br/>
三为油炸制品，主要有炸豆腐泡和炸金丝；<br/>
四为卤制品，主要包括五香豆腐干和五香豆腐丝；<br/>
五为熏制品，诸如熏素肠、熏素肚；<br/>
六为冷冻制品，即冻豆腐；<br/>
七为干燥制品，比如豆腐皮、油皮；<br/>
八为发酵制品，包括人们熟悉的豆腐乳、臭豆腐等等。<br/>
这八类制品中，安徽淮南的八公山嫩豆腐，广西的桂林白腐乳，浙江绍兴腐乳，黑龙江的克东腐乳，<br/>
广东的三边腐竹，北京的王致和臭豆腐，湖北武汉的臭干子等，均已成为名驰中外的豆腐精品。<br/>
2000 多年来，随着中外文化的交流，豆腐不但走遍全国，而且走向世界。</p>

<p>说起这段历史，就要提起唐代大和尚鉴真。<br/>
天宝12年(公元757年)，鉴真东渡日本，带去了豆腐制作方法。<br/>
至今日本的豆腐包装袋上还有 “唐传豆腐干黄檗山御前淮南堂制”的字样，<br/>
而且许多豆腐菜谱直接采用汉名。如“元月夫妻豆腐”、“二月理宝豆腐”、<br/>
“三月炸丸豆腐”、“四月烤串豆腐”、“五月团鱼豆腐”等等。</p>

<p>继日本之后，朝鲜、泰国、马来西亚、新加坡、印尼、菲律宾等周边国家也从中国学到了豆腐制作技艺。<br/>
以后随着大批华人外行的足迹，中国豆腐走到了西欧、北美，<br/>
世界几乎所有国家都有了大豆食品的生产与销售。</p>

<p>与此同时，世界各国人民也以自己的智慧与习俗丰富着豆腐文化。<br/>
比如东邻日本以天然色素为原料，生产出红、蓝、绿七彩豆腐；<br/>
朝鲜人民根据本地资源，制作了风味各异的豆腐汤：豆酱豆腐汤、哈蜊豆腐汤、明太鱼豆腐汤等等；<br/>
印尼人普遍爱吃“酱拌炸豆腐”；<br/>
缅甸人越南人则创制了颇具东南亚风格的“酱拌蛋花豆腐”、“什锦盘”。<br/>
特别值得一提的是新加坡与马来西亚风行的“肉骨茶”，其实也是豆腐菜肴中的一种。<br/>
在美国，商人们则把豆腐加工成色香味俱全的快餐食品，诸如豆腐色拉、豆腐汉堡包、<br/>
豆腐冰淇淋、豆腐烤鸭、豆腐结婚蛋糕等等，在市场上十分畅销。<br/>
20世纪80年代以来，世界饮食营养科学界兴起一股引人瞩目的“豆腐热”，<br/>
高蛋白、低脂肪的豆腐食品越来越受到世界人民的喜爱，<br/>
成为科学界一致推崇的美味保健的营养佳品。</p>

<p>豆腐是以黄豆、青豆、黑豆为原料，经浸泡、磨浆、过滤、煮浆、<br/>
加细、凝固和成型等工序加工而成最广、最大众化的烹饪原料之一。<br/>
豆腐及豆腐制品的蛋白质含量比大豆高，而且豆腐蛋白属完全蛋白，不仅含有人体必需的八种氨基酸，<br/>
而且其比例也接近人体需要，营养效价较高。豆腐还含有脂肪、碳水化合物、维生素和矿物质等。<br/>
中医理论认为，豆腐味甘性凉，入脾、胃、大肠经，具有益气和中、生津润燥、清热解毒的功效，<br/>
可用以治疗赤眼、消渴，解硫磺、烧酒毒等。可豆腐虽好，多吃也有弊，过量也会危害健康。</p>

<p>问题1：引起消化不良：<br/>
豆腐中含有极为丰富的蛋白质，一次食用过多不仅阻碍人体对铁的吸收，<br/>
而且容易引起蛋白质消化不良，出现腹胀、腹泻等不适症状。</p>

<p>问题2：促使肾功能衰退：<br/>
在正常情况下，人吃进体内的植物蛋白质经过代谢变化，<br/>
最后大部分成为含氮废物，由肾脏排出体外。<br/>
人到老年，肾脏排泄废物的能力下降，此时若不注意饮食，<br/>
大量食用豆腐，摄入过多的植物性蛋白质，势必会使体内生成的含氮废物增多，<br/>
加重肾脏的负担，使肾功能进一步衰退，不利于身体健康。</p>

<p>问题3：促使动脉硬化形成：<br/>
美国医学专家指出，豆制品中含有极为丰富的蛋氨酸，蛋氨酸在酶的作用下可转化为半胱氨酸。<br/>
半胱氨酸会损伤动脉管壁内皮细胞，易使胆固醇和甘油三酯沉积于动脉壁上，促使动脉硬化形成。</p>

<p>问题4：导致碘缺乏：<br/>
制作豆腐的大豆含有一种叫皂角苷的物质，<br/>
它不仅能预防动脉粥样硬化，而且还能促进人体内碘的排泄。<br/>
长期过量食用豆腐很容易引起碘缺乏，导致碘缺乏病。</p>

<p>问题5：促使痛风发作：<br/>
豆腐含嘌呤较多，嘌呤代谢失常的痛风病人和血尿酸浓度增高的患者<br/>
多食易导致痛风发作，特别是痛风病患者要少食。</p>

<p>可见，豆腐虽好，也不宜天天吃，一次食用也不要过量。<br/>
老年人和肾病、缺铁性贫血、痛风病、动脉硬化患者更要控制食用量。<br/>
中医认为，豆腐性偏寒，胃寒者和易腹泻、腹胀、脾虚者以及常出现遗精的肾亏者也不宜多食。<br/>
豆腐营养丰富，含有铁、钙、磷、镁等人体必需的多种微量元素，<br/>
还含有糖类、植物油和丰富的优质蛋白，素有“植物肉”之美称。<br/>
豆腐的消化吸收率达 95％ 以上。两小块豆腐，即可满足一个人一天钙的需要量。</p>

<p>豆腐为补益清热养生食品，常食之，可补中益气、清热润燥、生津止渴、清洁肠胃。<br/>
更适于热性体质、口臭口渴、肠胃不清、热病后调养者食用。<br/>
现代医学证实，豆腐除有增加营养、帮助消化、增进食欲的功能外，<br/>
对齿、骨骼的生长发育也颇为有益，在造血功能中可增加血液中铁的含量；<br/>
豆腐不含胆固醇，为高血压、高血脂、高胆固醇症及动脉硬化、冠心病患者的药膳佳肴。<br/>
也是儿童、病弱者及老年人补充营养的食疗佳品。<br/>
豆腐含有丰富的植物雌激素，对防治骨质疏松症有良好的作用。<br/>
还有抑制乳腺癌、前列腺癌及血癌的功能，豆腐中的甾固醇、豆甾醇，均是抑癌的有效成分。</p>

<p>豆腐是中药炮制辅料之一。豆腐煮制，系中药炮制方法中的一种。<br/>
系将药物植入豆腐中并复以豆腐盖上，用火煮至豆腐呈蜂窝状，药物颜色变浅，时间约4小时即可。<br/>
如硫黄，含有毒成分，经用豆腐煮制后，一可减毒，二可洁净。<br/>
因豆腐含有丰富的蛋白质，系两性化合物，既可与碱性物质生成沉淀，又能溶解部分酸性有毒物质，<br/>
减低毒性成分，且因其表面积大，空隙多，而具有良好的吸附作用。</p>

<p>豆腐亦可用于食疗，具有一定的药用价值。如葱炖豆腐，可治感冒初起，每日食3～5次；<br/>
鲫鱼与豆腐共煮，可治麻疹出齐尚有余热者，也可用于下乳；<br/>
葱煎豆腐，可用于水肿膨胀；豆腐萝卜汤，可用于痰火吼喘；<br/>
豆腐红糖共煮，可用于吐血等。</p>

<p>豆腐如何选购和保鲜？<br/>
豆腐可以说是素食中的主角了，而海带由于富含碘让有些人喜欢吃传统板豆腐，<br/>
有些人则偏好盒装豆腐的滑嫩。无论偏好哪一种，都要注意豆腐的选购和保鲜问题。</p>

<p>豆腐本身的颜色是略带点微黄色，如果色泽过于死白，有可能添加漂白剂，则不宜选购。<br/>
此外，豆腐是高蛋白质的食品，很容易腐败，<br/>
尤其是自由市场卖的板豆腐较盒装豆腐易遭到污染，应多加留意。</p>

<p>盒装豆腐需要冷藏，所以需要到有良好冷藏设备的场所选购。<br/>
当盒装豆腐的包装有凸起，里面豆腐则混浊、水泡多且大，便属于不良品，千万不可选购。<br/>
而没有包装的豆腐很容易腐坏，买回家后，应立刻浸泡于水中，并放入冰箱冷藏，烹调前再取出。<br/>
取出后不要超过 4 小时，以保持新鲜，最好是在购买当天食用完毕。</p>

<p>盒装豆腐较易保存，但仍须放入冰箱冷藏，以确保在保存期限内不会腐败。<br/>
若无法一次食用完毕，可依所需的分量切割使用，剩余的部分再放回冷冻室，方便下次食用。</p>

<p>豆腐作为食药兼备的食品，具有益气、补虚等多方面的功能。<br/>
一般100克豆腐含钙量为140毫克－160毫克，豆腐又是植物食品中含蛋白质比较高的，<br/>
含有8种人体必需的氨基酸，还含有动物性食物缺乏的不饱和脂肪酸，卵磷脂等。<br/>
因此，常吃豆腐可以保护肝脏，促进机体代谢，增加免疫力并且有解毒作用。</p>

<p>豆腐不足之处是它所含的大豆蛋白缺少一种必需氨基酸——蛋氛酸，<br/>
若单独食用，蛋白质利用率低，如搭配一些别的食物，使大豆蛋白中所缺的蛋氨基酸得到补充，<br/>
使整个氨基酸的配比趋于平衡，人体就能充分吸收利用豆腐中的蛋白质。<br/>
蛋类、肉类蛋白质中的蛋氨酸含量较高，豆腐应与此类食物混合食用，<br/>
如豆腐炒鸡蛋、肉末豆腐、肉片烧豆腐等。这样搭配食用，便可提高豆腐中蛋白质的利用率。</p>

<p>豆腐是一种有利健康的功能性食品<br/>
据现代科学研究，豆腐在保证人类健康方向有一系列的功能。 主要是：<br/>
1．豆腐是最佳的低胰岛素的氨茎的特种食品。<br/>
2．豆腐可以改善人体脂肪结构<br/>
3．食用豆腐可以预防和抵制癌症。<br/>
4．食用豆腐可以预防和抵制更年期疾病<br/>
5．食用豆腐可以预防和抵制骨质疏松症<br/>
6．食用豆腐可以预防和抵制可以提高记忆力和精神集中力<br/>
7．食用豆腐可以预防和抵制老化和痴呆<br/>
8．食用豆腐可以预防和抵制肝功能的疾病<br/>
9．食用豆腐可以预防和抵制糖尿病<br/>
10．食用豆腐可以预防和抵制动脉硬化<br/>
11．食用豆腐可以预防和抵制伤风和流行性感冒</p>

<p>豆腐是怎样做成的呢？<br/>
把黄豆浸在水里，泡胀变软后，在石磨盘里磨成豆浆，再滤去豆渣，煮开。<br/>
这时候，黄豆里的蛋白质团粒被水簇拥着不停地运动，仿佛在豆浆桶里跳起了集体舞，<br/>
聚不到一块儿，形成了”胶体”溶液。 要使胶体溶液变成豆腐，必须点卤。<br/>
点卤用盐卤或石膏，盐卤主要含氯化镁，石膏是硫酸钙，<br/>
它们能使分散的蛋白质团粒很快地聚集到一块儿，<br/>
成了白花花的豆腐脑。再挤出水分，豆腐脑就变成了豆腐。<br/>
豆腐、豆腐脑就是凝聚的豆类蛋白质。</p>

<p>我们喝豆浆，有时就在重复这个豆腐制作过程哩。<br/>
有人爱喝甜浆。往豆浆里加一匙白糖，豆浆没有什么变化。<br/>
有人爱喝咸浆。在豆浆里倒些酱油或者加点盐，<br/>
不多会儿，碗里就出现了白花花的豆腐脑。<br/>
酱油里有盐，盐和盐卤性质相近，也能破坏豆浆的胶体状态，使蛋白质凝聚。<br/>
这不和做豆腐的情形一样吗？</p>

<p>豆浆点卤，出现豆腐脑。豆腐脑滤去水，变成豆腐。<br/>
将豆腐压紧，再榨干去些水，就成了豆腐干。<br/>
原来，豆浆、豆腐脑、豆腐、豆腐干，都是豆类蛋白质，只不过含的水有多有少罢了。<br/>
牛奶和豆浆差不多，也是胶体溶液。在新鲜的牛奶里，酪素，也就是蛋白质包裹着奶油，<br/>
在水里分散开来，不停地运动矿所以，牛奶总是均匀的乳白色液体。<br/>
让牛奶发酵，做成酸牛奶，酪素就聚集拢来，凝结成块，象豆腐脑似的。</p>

<p>豆腐是我国的一种古老传统食品，在一些古籍中，<br/>
如明代李时珍的《本草纲目》、叶子奇的《草目子》、<br/>
罗颀的《物原》等箸作中，都有豆腐之法始于汉淮南王刘安的记载。<br/>
中国人首开食用豆腐之先河，在人类饮食史上，树立了嘉惠世人的丰功。</p>

<p>制作豆腐的大豆含有丰富的营养。<br/>
以下是几种主要动植物蛋白食品蛋白质价（以标准蛋白质价为 100 时）的比较：<br/>
鸡蛋为 100，牛肉为 83，鱼肉平均为 70，稻米为 67，全麦粉为 53，玉米为 59，大豆粉为 74，<br/>
这说明大豆的蛋白质价可与鱼肉相媲美，是植物蛋白中的佼佼者。<br/>
大豆蛋白属全价蛋白，其氨基酸的组成比较好，人体所必需的 8 种氨基酸它都有。<br/>
除蛋白质以外，大豆中含有 18％ 左右的油脂，其绝大部分可以转移到豆制品中去。<br/>
大豆油脂的亚油酸（人体必需的主要脂肪酸）比例较大，且不含胆固醇，<br/>
不但有益人体神经、血管、大脑的发育生长，而且还可以预防心血管病、肥胖病等常见病发生。</p>

<p>大豆中也含有一些蛋白酶物质、皂甙和破坏维生素的成分，<br/>
它们对人体健康有不良影响，但只要适当加热即可消除；<br/>
另一方面，用大豆直接制成食品，人体对其蛋白质的消化吸收率只有 65％，<br/>
而制成豆腐以后，消化吸收率就可以提高到 92％ 到 95％。<br/>
可见，豆腐是大豆家族中于人最有益处的。</p>

<p>豆腐不仅是味美的食品，它还具有养生保健的作用。<br/>
中医书籍记载：豆腐，味甘性凉，入脾胃大肠经，具有益气和中、生津解毒的功效，<br/>
可用于赤眼、消渴、休痢等症，并解硫磺、烧酒之毒。<br/>
这些，都陆续为现代医学、营养池所肯定，比如，豆腐确有解酒精毒的作用；<br/>
豆腐可消渴，是糖尿病人的良好食品。</p>

<p>俗话说“青菜豆腐保平安”，这正是人们对豆腐营养保健价值的赞语。<br/>
经过千百年的演化，豆腐及其制品已经形成为中国烹饪原料训的一大类群，<br/>
有着数不清的地方名特产品，可以烹制出不下万种的菜肴、小吃等食品。<br/>
这是同豆腐及其制品具有广泛的可烹性分不开的。</p>

<p>比如：
它可以单独成菜，也可以作主料、辅料，或充作调料；<br/>
它可以作多种烹调工艺加工，切成块、片或丁或炖或炸；<br/>
它可做成多种菜式，多种造型，可为冷盘、热菜、汤羹、火锅，<br/>
可成卷、夹、丸、包等等还可调制成各种味型，既有干香的本味，更具独一无二的吸味特性，<br/>
“豆腐得味，远胜燕窝”。由于豆腐及其制品具有这么多的优点，难怪它脍炙人口，久盛不衰了。</p>

<p>当今，豆腐及其制品不仅仅是国人的常用食品，它已远出国门，风摩世界了。<br/>
当美国炸鸡、牛排吸引着别国居民的时候，<br/>
中国的传统食品——豆腐则以其独具的魅力进入美国市场，<br/>
以其高蛋白、低脂肪、低热量、低胆固醇的突出优点<br/>
而成为公认的理想食品，受到美国人的青睐。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[入手机械键盘 PLU ML 87]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/02/ru-shou-ji-jie-jian-pan-plu-ml-87/"/>
    <updated>2013-02-02T16:11:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/02/ru-shou-ji-jie-jian-pan-plu-ml-87</id>
    <content type="html"><![CDATA[<p>我酷爱 War III，和大学同学搭档打 2v2 对战是我一个很大的乐趣。<br/>
为了更好的干魔兽 2v2，我花 350 闷入了一块机械键盘。<br/>
型号是 PLU ML 87，87 个键，不带小键盘，樱桃黑轴。</p>

<!-- more -->


<p>买机械键盘犹豫了很久，看了不少网友对机械键盘的点评。<br/>
有人说，花大几百就买块键盘简直就是傻逼行为，烧钱，钱多没地方去了。<br/>
有人说，薄膜键盘跟机械键盘就是没得比，机械一给用上，就再无法用回薄膜了。<br/>
有人说，机械键盘，特别是黑轴键盘，打起游戏来那真是没话说，相当地给力。</p>

<p>听别人说是做不了数的，想去真正地了解，还得自己去尝试。<br/>
人生要尝试很多东西，迟或早的问题，现在手里虽然也不是很宽裕，但还是有点儿小储蓄。<br/>
本着 “迟早都要买”和 “早买早享受” 的想法，便开始在淘宝观摩上了。</p>

<p>发现人的欲望真是一发不可收拾，很快我便无法自拔，深陷其中。<br/>
我在网上不停地翻找合适我的键盘，发现了以下的一些机械键盘品牌：</p>

<p><strong>1。cherry 机械键盘</strong><br/>
cherry 是很早就生成机械键盘的大佬，而且很多其他品牌的机械盘生产厂家，<br/>
用的都是 cherry 制造的按键开关。cherry 的四种不同色彩的开关，也是非常有意思，容后再叙。<br/>
g3000 是很经典的一款，不过太贵了，600~700 了，<br/>
而且样式也很老，据说是属于 20 年不变样的那种。<br/>
其次就是，g3000 的功能键区离那一横排数字键太远了，<br/>
打魔兽的话 F1，F2，F3 是用来选择英雄的，可能不太方便，<br/>
而且，用惯了双飞燕的键盘格局，要去适应的话也需要花费时间。<br/>
g3800 是最近出的一款，价格比较亲民，400 左右，不过质量有下滑。<br/>
我看了下，g3800 没有用到内衬钢板，而且键盘做的很薄，<br/>
感觉不太符合我心目中机械键盘的模样，当然，cherry 是生成机械盘的大佬级生产厂家，<br/>
他的做法虽然不能为我辈理解，但肯定是有他的道理的。</p>

<p>环视机械键盘的大环境，国内已经出现了很多生产机械键盘的厂家：<br/>
PLU，雷柏，NEOTV，etc，虽然大部分用的还是 cherry 生产的机械开关，<br/>
但是毕竟也抢占了 cherry 键盘的市场份额，cherry 推出低价位的 g3800 也是不得已之举。<br/>
不过在我看来，PLU ML 87 的设计风格和口碑，还是对我具有更大的诱惑力。</p>

<p><strong>2。noppo 诺朴</strong><br/>
noppo choc mini 84 是之前让我非常动心的一款机械键盘，我比较喜欢那种 mini 的设计风格。<br/>
不过价格也是不便宜，最便宜情况下的标准黑轴不带背光键盘，在价位上就和 PLU 差不离了。<br/>
高级点儿的全按键无冲突的、带背光灯的，就要上 500 了。<br/>
不过最终让我对这块键盘失去兴趣的原因却是：<br/>
键帽做的太窄了，我手虽然不大，但是小键帽用起来肯定也存在一些不便利的地方。</p>

<p><strong>3。razer 黑寡妇</strong><br/>
这快键盘做的还是相当的酷，很喜欢，<br/>
不过也是在价格上接受不了，和 cherry 的 g3000 差不多价位了。<br/>
以上都是国外的品牌，毕竟中国的市场打开的比较迟，所以 还是首先从国外的生产商开始考虑。</p>

<p><strong>4。网际快车 g100，g200</strong><br/>
这块键盘我也是非常的中意，不过在网上找了下，黑轴的键盘只发现 g100 的款式，<br/>
g200 的款式有红轴、茶轴两种。<br/>
这块键盘比较吸引人的地方就是：<br/>
采用标准的 104 键设计，普通薄膜键盘上有的键，网际快车键盘上面都有。<br/>
其实我也觉得，PLU 的 87 键，keycool 的 87 键，noppo 的 84 键，都是比较取巧的。<br/>
在网上看了一下，cherry 的按键开关一个要 3 块多左右，<br/>
87 键和 84 键分别比标准的 104 键少了 17、20 个按键开关，这里就是一笔比较大的开支。<br/>
反观网际快车，我上次看的 g100 的黑轴是 285 块钱，g200 的茶轴是 350 块钱。<br/>
而且内衬钢板啥的都有，不缺少心目中机械键盘该有的那份沉稳厚重，<br/>
键盘造型也不是丑到让人无法接受，虽然 abs 键帽不及 pom，pbt 键帽结实，<br/>
不过好歹也能用那么久吧，实在不行了也能拆下来再去换一套键帽。</p>

<p>当初我就是这么想的：<br/>
好吧，这么具有诱惑力，那就买网际快车的黑轴键盘吧~<br/>
不过人总是这么善变，后来我看到有人说网际快车的第一批货设计上有些不成熟（g100？），<br/>
具体是什么没说明白，我自己去看了下用户评价，大意是按键冲突问题解决的不是很好，<br/>
有个人竟然说 ctrl 键和其他任何键一同按下的时候，都会冲突。<br/>
不知道是不是真的，毕竟没有亲自试用过，没有发言权。<br/>
不过，这还是让我产生了一些疑虑，本来坚定的心便由此动摇了。<br/>
如前所述，网际快车 g200 就出了红轴，茶轴，貌似黑轴还是 g100 的型号。<br/>
我在网店里看到的也是这样，黑轴 g100，285 元；茶轴 g200，349 元。<br/>
因为键盘买来主要用作打游戏，所以首选黑轴，<br/>
第二个因素就是，黑轴标称寿命是 5000w 次，茶轴的才 2000w 次，差了蛮多了。<br/>
后面便不做考虑，转向其他的品牌了。<br/>
其实，我也知道网络上面喷子、枪手很多，但作为消费者，<br/>
还是需要多多少少的看一些他人的评论，然后自己对这些东西才能有一个比较客观的认识。<br/>
我若是身家千万，肯定去把各品牌的盘都弄一块儿，在家里慢慢试，看到底那一块最适合自己。<br/>
同时验证一下，在网络上放出使用评论的这些人，都有哪些个说的是真话，哪些个说的是假话。</p>

<p><strong>5。凯酷 mini87、精灵雷神 M1、雷柏 v7、filco、NEO TV 竞神</strong><br/>
凯酷 mini 87 和 PLU ML 87 长的实在是太像了，<br/>
我也不知道自己为什么选的是 plu 而不是 keycool，<br/>
可能是因为 plu 的名气大一点的原因吧，keycool 我之前都没怎么听说过，<br/>
据称是一个非常了解游戏外设的玩家独力开创的一个品牌。</p>

<p>keycool 一个我比较欣赏的细节就是键盘线和键盘是分离设计的，<br/>
而且，线和键盘连接之后，能够自键盘后部左中右 3 个出口连出，显得非常的人性化。<br/>
不过，想仅仅凭借这个细节将我打动，还是不那么容易。<br/>
在 plu 的名声（plu 是弄星际争霸赛事的一个网站）和 keycool 的这个细节之间，我选择了前者~</p>

<p>精灵雷神 m1，号称 “红黑混血狮子”，标价才 200 多，之前也有点儿心动，<br/>
心想红轴是 cherry 最贵的轴，应该不会贵的没有道理，而且，该键盘同时拥有红轴和黑轴两种开关，<br/>
也能让我仔细体验一下这两种轴之间的感受差距。另外，该键盘的设计还有一些儿手托的成分。<br/>
不过，在后面仔细观察一番后我发现了一些比较坑爹的小细节：<br/>
精灵雷神 m1 的红轴并非 cherry 生产的正宗红轴，而是一个不知名的厂家生产的按键开关，<br/>
这个就有点儿欺诈的成分了，虽说也没公开的表明是 cherry 的红轴，<br/>
但是，也没说不是 cherry 的红轴啊，太不地道了，<br/>
对于我等菜鸟，若非留了个心眼外加眼神儿还不错，<br/>
还真发现不了，红色的按键开关上写的竟然不是 cherry。</p>

<p>在此小得意一番，我当初起疑心也是因为看到老板文字介绍里面的“加强版 cherry 黑轴”，<br/>
我心想没事你弄个加强版干嘛，难不成和一般的 cherry 黑轴有什么不一样？<br/>
后面我仔细一看才发现，这个加强版原来是同自身的红色开关做对比的，顿时牙都掉了一地。<br/>
再个就是，精灵雷神 m1 的键面很不平整，我担心用起来的时候适应不了，不过这都是题外话了，<br/>
血统不纯正的红轴足以让我对其失去任何兴趣。</p>

<p>雷柏 v7 称用的是自己研究生产的 “国产黄轴”，特性与 cherry 的轴有所不同，<br/>
针对亚洲人进行的设计，其实压力克数才 50g，比 cherry 最低克数的 60g 还少 10g<br/>
（cherry ：黑轴 80g，红轴 60g，青轴 60g，茶轴 60g）。<br/>
很多人都说 cherry 的 80g 黑轴打游戏手感很不错，还有一些人说 cherry 的红轴按起来太软了，<br/>
我心想 cherry 60g 的红轴按起来都算软，那黄轴的 50g 按起来不是软的不成样子了？<br/>
虽然自手指接触键帽至将键帽按到最底下，其间手的承受力也可能会呈现不同的曲线图样，<br/>
从而让人产生不同的按键体验，但是黄轴的起始压力克数就这么低，<br/>
我还有些担心用起这机械的手感会和薄膜差不多，那这机械的名头也就太他妈有名无实了。<br/>
后来翻了一些评论，看到好几条都说这键盘的质量不咋地，没用多久就啥啥键给挂掉了。<br/>
综上所述，果断将雷柏 v7 排除出我的候选名单<br/>
（内心里还是想首选老大哥 cherry 的按键开关用一下）。</p>

<p>filco 就不多说了，两个字，坑爹！<br/>
贵的真是没理由。在淘宝上看了一下键盘手托，filco 的一般都是 200 多，<br/>
我心想一手托而已，有必要整这么贵？就算你是真皮的，这么一小块儿牛皮，值那么多钱？</p>

<p>NEO TV 竞神是让我产生购买机械键盘冲动的第一块机械键盘。<br/>
好像是在 2011 年 wcg 的时候听说的，那时候专门跑网上看了下，<br/>
直接就拜倒在 NEO TV 竞神 特别的设计风格下面了（没有键盘上盖）~<br/>
所幸那时候手里没什么钱，不然我的第一块机械键盘可能就是 NEO TV 的竞神了。<br/>
不过，无上盖设计虽然很显酷，但让我比较担心的就是，在防灰、清理上面可能会衍生一些个问题。<br/>
环视其他同类产品的价格，plu87 才 350，keycool 87 也才 350，<br/>
noppo mini 84 也就 400 左右（均为标准黑轴）~<br/>
NEO TV 竞神在价格上真没什么明显的优势，499 元反而成了销量的绊脚石~<br/>
我特意去 NEO TV 的淘宝旗舰网上看了下，NEO TV 的服务态度也是比同类店铺低了相当一大截，<br/>
由此可见，NEO TV 的心态还是比较浮躁，无法成为一个顾客能与之良好合作的好卖家，<br/>
结合如上几点，让我放弃了选择 NEO TV 竞神机械键盘的想法。</p>

<p><strong>后记：</strong><br/>
PLU ML 87 是昨天到的，刚到手我就迫不及待的拆开了包装，<br/>
试了下手感，初次使用感觉这黑轴真不是盖的，还真比我的双飞燕薄膜硬了不少。<br/>
较遗憾的是，前天电脑插班出了些故障，而且网络也即将被销户，网速成问题，<br/>
不然我就马上要登入 vs 去好好玩几把魔兽对战体验一下了。<br/>
话说昨天晚上买了新的插板将电脑接好试了一下以后，发现这黑轴的触发距离果然是短的出奇，<br/>
按键根本就用不着按到底，轻轻往下面碰一下，电脑上面就能给响应起来，<br/>
说真的，让初次使用的我真的是很不适应 —— 平时使用薄膜键盘，我都是要很大力地按到底的~<br/>
今天再次使用的时候，发现经过了昨天晚上那一段时间的调整，<br/>
对按键的硬度已经有了很好的适应，敲了好一会儿都不觉得前臂肌肉小累了~<br/>
之前有点儿小蛋疼，我想拔出键帽看一下，<br/>
里面传说中的游戏神器 cherry 黑轴开关到底是什么样貌，以及 plu ml 87 是否用到了加固钢板。</p>

<p>我购买 plu 键盘的淘宝商家是这么描述 plu ml 87 的：<br/>
“由于 plu 的键帽紧紧的嵌合在 cherry 按键开关上面，<br/>
因此你丝毫不用担心运输过程中会出现键帽被震出来的情况出现”<br/>
想起这句话，我就蛋疼不已，<br/>
感情说我用拔键扣连 cherry 的轴心都给拔出来了，这还是他妈的所谓优点啊？！<br/>
各种无语，因为我在拔键帽的时候，确实是将 cherry 按键开关的轴心都给拔出来，<br/>
看到此等情景我当真是唏嘘不已，震惊的我马上尝试将轴心硬塞回去，<br/>
经过 10 来分钟的努力，总算是用粗笨如脚的手将左边 shift 键的 cherry 轴心给强行塞了回去。<br/>
悬着的心也掉了下来，再怎么着也不能在几百块钱的键盘刚入手第二天就把它给弄坏了啊~<br/>
总算一切顺利，测试一下后发现，按键的手感没有受到什么致命的影响，也没有出现失灵的情况。<br/>
拔键帽这么蛋疼，估计今后清理键盘、换键帽的时候，有罪受了~</p>

<p>总体来说，PLU ML 87 还是一款手感相当不错的入门级机械键盘，今后打魔兽对战有福了！</p>

<p><strong>2012。05。02。11。01</strong><br/>
发现在 Mac 上面使用 plu 有些问题，在用 photoShop 的时候<br/>
command + shift + s “另存为” 的快捷键无效<br/>
但是在 xcode 里面 ，command + shift + k 清理的快捷键却有效，真的是很奇葩。<br/>
另外，我发现没有了数字小键盘其实还是有点儿小不方便，<br/>
在打游戏的时候没有数字区可能影响不大，但是平时输入密码啥的，<br/>
一时间还真适应不过来没数字区，经常下意识的将手摸过去准备敲数字，<br/>
却蓦然发现自己用的是 %80 键盘，各种蛋疼，看来自己还得慢慢来适应啊~</p>

<p>自从经历过上次的拔键帽将 cherry 按键开关的轴心拔出来的事情，我就有点儿小不爽了。<br/>
后来在网上查了下，发现我这种情况还真不少见，也有其他几个人反映出有同样的问题。<br/>
甚至还出现了一些比较有意思的对话，大意是某某说拔 plu 的键帽毫无压力，<br/>
结果过来盖楼的人说他的 plu 质量不过关，还有的人评论说 “这基本是不可能的”。<br/>
一大堆，看他们说着蛮有意思，自己听着却是比较辛酸。</p>

<p>现在想来，其实当初有如下两款键盘还是值得去试一下的：<br/>
1。keycool mini 87，前面我只是说 3 边走线和盘线分离的设计比较不错，<br/>
但是对 keycool 的来历多有诟病，其实想来，plu 也不是专业做键盘的啊，<br/>
我为 plu 的声名放弃选择 keycool，多少是对 keycool 有些不公平。。。。<br/>
后面仔细看了下，发现 keycool 惹人心爱的小细节还是有不少：<br/>
一、镀金 usb 连接线<br/>
二、标准版即带无冲功能(记不太清，好像并不是全键无冲)，plu 的话带无冲的要加到 400 左右了<br/>
三、商家送的小礼品比 plu 丰富：3 色键帽 10 个，拔键器，键盘袋，<br/>
四、相比于 plu，键帽和机械轴的啮合没那么紧，拔掉键帽相对容易<br/>
五、观察了一下，脚支架比 plu 看起来牢实，plu 的脚支架掰开竟然发出砸砸的声音。。<br/>
六、如前所述，盘线分离，三边走线</p>

<p>2。网际快车 g200 的茶轴其实也可以考虑一下，<br/>
据说茶轴结合了黑轴和青轴的特色，手感虽近似于薄膜键盘，但还是存在一些差异。<br/>
我发现国产的机械键盘都包含了各自的一些特色：<br/>
plu 的就是其所谓的响应速度，是一般键盘的3倍。<br/>
keycool 的最大特色就是线盘分离、三边走线。<br/>
NeoTV zilia 竞神的就是支持有线无线两种模式以及无上盖设计。<br/>
也观察机械键盘那么久了，发现国产的机械键盘确实是有抄袭之嫌，<br/>
虽然也不乏自己所独有的特色，但是 plu ml 87 和 凯酷 mini 87 的 %80、窄边框设计<br/>
怎么看怎么就是学的国外的啊，多媒体功能支持也是差不多的情况。<br/>
我并不是不赞同学习借鉴，只是发表一些自己的看法。<br/>
其实这些借鉴也不是不行，毕竟键盘的布局大多是这种模式，<br/>
再变也变不出什么花儿来，没有遭到别人的起诉就已经很舒服了。<br/>
相比之下，苹果，三星在智能机上面经常就 “抄” 字将对方诉诸法院，<br/>
机械键盘市场的平静已是非常之难得了，还是衷心祝愿中国的机械盘制造商能够做好做大。<br/>
一不小心看到 cherry 轴的内部之后，我就觉得，其实机械盘真没什么稀罕，<br/>
能卖到几百块钱真有些炒作的成分，应了那句话——买机械盘等于烧钱。<br/>
国产机械盘的价格动辄就是好几百，我觉得 cherry 按键开关的价格就是关键因素。<br/>
换言之，即使你买的是国产机械键盘，大部分钱还是给德国赚走了。<br/>
反观大环境，肯定有不少人都是像我想的这样，要用机械盘肯定要用 cherry 生产的开关，<br/>
那啥雷柏 v7 的黄轴，精灵雷神 M1 的国产红轴，反而成了导致它们买的不好的不良因素。<br/>
我猜，即使雷柏 v7，精灵雷神 M1 的价格才 200 多，也肯定能比用 cherry 轴的生产商赚的更多。<br/>
就我个人而言，当初买机械盘就是想体验一下 cherry 生产的按键开关<br/>
突然间我觉得自己有点儿犯贱，几块钱才买那么一小坨包着几份小铁片的塑料，凭什么？<br/>
想来，不是自己脑袋有点儿发烧还真干不出来。
说来还是国产的开关自己不争气，若真有专注于产品质量、用户百般叫好的国产机械轴，<br/>
我必不对 cherry 如此执着，cherry 坑了多少中国老百姓的钱啊，也只有他们自己知道了~</p>

<blockquote><p>^ ^</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[相机选购及使用常识]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/02/xiang-ji-xuan-gou-ji-shi-yong-chang-shi/"/>
    <updated>2013-02-02T15:38:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/02/xiang-ji-xuan-gou-ji-shi-yong-chang-shi</id>
    <content type="html"><![CDATA[<p>以下概念、问答均整理自我和 Eric 的聊天记录。</p>

<!-- more -->


<p><strong>1。“微单” 和 “单反” 有什么区别？</strong><br/>
两者的根本区别是微单没有反光镜，而且感光元件比单反小，那么成像也就差些，<br/>
它类似于单反的简化版，介于卡片机和单反之间，微单的好处就是轻便，外观也好看，<br/>
个人建议，如果你是想拍摄好照片，或想学习摄影的话，还是在单反上下功夫比较好。<br/>
<img class="center" src="http://yang3wei.github.com/images/posts/dan_fan_jie_gou.jpg">
<img class="center" src="http://yang3wei.github.com/images/posts/dan_fan_tou_shi.png" width="512" height="384">
<img class="center" src="http://yang3wei.github.com/images/posts/xiang_ji_guang_quan.jpg">
<strong>2。“单电” 和 “微单”？</strong><br/>
单电和微单都是一样的，都是微型单反，只不过 SONY 自己叫微单，其它的叫单电。<br/>
微单都是数码成象吧，只有单反是物理的。对凡是通过数码成像单电原理的都叫微单。</p>

<p><strong>3。卡片机的拍摄效果和主流智能机的拍摄效果？</strong><br/>
卡片机网上有便宜的 几百块，现在两千左右的手机拍出来的效果和那种几百的区别不大了。<br/>
和几百的卡片机差不多。<br/>
问：我觉得差别应该还是有些的，结构都不一样啊？<br/>
iphone 上的镜头不能伸缩吧，而且镜头大小差异也比较大。<br/>
答：区别肯定有，不大，我是看不出低端卡片机和手机有多大区别。<br/>
看一些好的手机拍出来的样片好像不比一些卡片机差。<br/>
卡片机有个镜头上的优势，支持光学变焦（镜头可物理伸缩），<br/>
而手机镜头基本都是定焦的（不能调节焦距）。<br/>
取景大小是固定的，调整是通过调节感光元件的画幅尺寸来调整的 这样拍远景有像素损失。</p>

<p><strong>4。单电的主要卖点是什么？</strong><br/>
有单反的一些特点，比如手动（即：手动对光圈、调节曝光度、焦距、快门速度调整，<br/>
一般的卡片机好像就只能调节 iso 曝光度，再多一点就是可以调节曝光速度），<br/>
还可以换镜头（单反穷三代），体积比较小，携带轻便。<br/>
单反还有个好处，可以拍 raw 格式的图片，这种格式，如果拍照的时候光线上没有调整好，<br/>
可以通过后期处理调好。一般的卡片机是不支持 raw 格式的。<br/>
卡片机也有好有坏，佳能尼康这些大牌子</p>

<p><strong>5。什么是 iso？</strong><br/>
就是感光原件上有很多像素点，iso 就是相当于调节这个感光点的敏感度<br/>
（调节 iso 相当于非自然的处理了）。<br/>
胶片单反是没有 iso 这个参数的，那个时候拍照就一些物理指标，比如光圈和快门速度。<br/>
（接就用胶片来感光了啊，没法儿调）</p>

<p><strong>6。对光圈就是调节焦距？</strong><br/>
光圈是镜头上的一个物理装置，原理和人的瞳孔差不多，<br/>
瞳孔放大采光率高，反之亦然（和调焦不是一个概念）。</p>

<p><strong>7。纯正的单反就是指用胶片而非感光元件成像的么？</strong><br/>
不是。数码单反也是单反，单镜头反光式相机，好像全称是这个。<br/>
卡片机取景窗和镜头是分开的，单反就是为了保证取景窗和拍出来的片子是一致的画面，<br/>
在胶片或者感光元件前面加了个凌镜用来把镜头取景反射到取景窗。<br/>
以前的傻瓜相机都有个取景窗，取景窗有点像一个猫眼，和镜头成像是分开的。<br/>
为啥买单电？之前那台明基的卡片机拍出来的照片，感觉颜色还原不行，<br/>
有点儿灰蒙蒙的，一狠心就买了个单电。<br/>
PS：<br/>
在 iPod Touch 4 上面截了一张图片，放到电脑上面看竟然模糊的一塌糊涂，<br/>
看来我的显示器还原度也不行。</p>

<p><strong>8。拍照时的晃动导致成像模糊的对策 —— 光学防抖、数码防抖（也叫智能防抖）的区别是什么？</strong><br/>
问：其实我觉得拿着拍的话影响应该蛮大的，你拍的时候多少会晃动，这个时候感光就会出现问题。<br/>
答：光线好的话，影响不大，相机好不好看光线不好的情况下拍照效果是个很重要的参考。<br/>
光线好的情况下，感光元件能得到很好的发挥，另外自动拍照会在光线充足的情况下，<br/>
把快门速度调低，防抖这个时候意义不大。<br/>
主要是光线不太充足的时候，快门速度会变慢，这个时候抖一下容易模糊。<br/>
快门速度比较快的情况下，比如快的有千分之一秒的快门，这个时候你手抖一下对画面影响不大。</p>

<p><strong>9。推荐一款性价比较高的单电？</strong><br/>
松下 lumix gf3（买之前看了很久 最后犹豫在尼康j1和松下gf3之间 最后还是gf3性价比高一些）。</p>

<p><strong>10。相机拍摄输出的视频是什么格式？</strong><br/>
一般是 mov。包括很多支持录像的手机，拍摄输出的视频也是 mov。</p>

<p><strong>11。mov 有什么好处么？类似 raw？</strong><br/>
可能这种片子拍出来不需要经过太多压缩处理，也就是说能够尽可能多的保留拍摄细节，<br/>
后期你自己需要什么其他的格式的话，再做相应的压缩、格式转换处理。</p>

<p><strong>12。一厘米微距是什么意思？</strong><br/>
就是能把焦点对到离镜头只有 1cm 的位置，可以拍一些很小的东西也不模糊。<br/>
这个还有意思一点儿，这个镜头手机是很难超越了。</p>

<p><strong>13。（待续）。。。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小孩儿喝咖啡好吗]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/02/xiao-hai-er-he-ka-pei-hao-ma/"/>
    <updated>2013-02-02T15:28:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/02/xiao-hai-er-he-ka-pei-hao-ma</id>
    <content type="html"><![CDATA[<p>原文链接：<br/>
<a href="http://zhidao.baidu.com/question/102837946.html">http://zhidao.baidu.com/question/102837946.html</a><br/>
我今年 14，最近期末，有很多东西要复习，作业也很多。<br/>
家里妈妈喜欢喝清咖啡，没有咖啡伴侣。<br/>
昨天晚上困得支持不住，泡了一杯清咖啡，加了牛奶喝。<br/>
今天早上又喝了一杯提神。今天确实很精神。<br/>
想问一下每天喝一杯咖啡对身体有害吗？</p>

<!-- more -->


<p>不好 影响脑部发育。</p>

<p>饮用禁忌<br/>
1.铁剂不宜与茶、牛奶、咖啡同服。因牛奶含磷高，可影响铁的吸收。<br/>
茶和咖啡中的鞣酸可使铁的吸收减少75%。宜用温开水送服。</p>

<p>2.茶叶和咖啡中的单宁酸，会让钙吸收降低。<br/>
所以，喝茶和喝咖啡的时间，最好是选在两餐当中。</p>

<p>3.含咖啡因的饮料和食品，被孕妇大量饮用后，会出现恶心、呕吐、头痛、心跳加快等症状。<br/>
咖啡因还会通过胎盘进入胎儿体内，影响胎儿发育。</p>

<p>4.不少医生认为,孕妇每天喝1~2杯(每杯6~8盎司)咖啡、茶或碳酸类饮料,不会对胎儿造成影响。<br/>
但为慎重起见,孕妇最好禁用。咖啡因可导致流产率上升,所以应喝不含咖啡因的饮料。</p>

<p>5.想减肥的人不要多饮咖啡。<br/>
常见的咖啡伴侣中含有较多的奶类、糖类和脂肪，咖啡本身可能刺激胃液分泌，<br/>
增进食物消化和吸收，不但不能瘦腰，还会使人发胖。</p>

<p>6.儿童不宜喝咖啡。<br/>
咖啡因可以兴奋儿童中枢神经系统,干扰儿童的记忆,造成儿童多动症。</p>

<p>7.浓茶、咖啡、含碳酸盐的饮料也是形成消化道溃疡病的危险因子。</p>

<p>8.紧张时添乱 咖啡因有助于提高警觉性、灵敏性、记忆力及集中力。<br/>
但饮用超过比你平常所习惯饮用量的咖啡，就会产生类似食用相同剂量的兴奋剂，会造成神经过敏。<br/>
对于倾向焦虑失调的人而言，咖啡因会导致手心冒汗、心悸、耳鸣这些症状更加恶化。</p>

<p>9.加剧高血压 咖啡因因为本身具有的止痛作用，常与其他简单的止痛剂合成复方，<br/>
但是，长期大量服用，如果你本身已有高血压时，使用大量咖啡因只会使你的情况更为严重。<br/>
因为光是咖啡因就能使血压上升，若再加上情绪紧张，就会产生危险性的相乘效果，<br/>
因此，高血压的危险人群尤其应避免在工作压力大的时候喝含咖啡因的饮料。<br/>
有些常年有喝咖啡习惯的人，以为他们对咖啡因的效果已经免疫，然而事实并非如此，<br/>
一项研究显示，喝一杯咖啡后，血压升高的时间可长达12小时。</p>

<p>10.诱发骨质疏松 咖啡因本身具有很好的利尿效果，如果长期且大量喝咖啡，容易造成骨质流失，<br/>
对骨量的保存会有不利的影响，对于妇女来说，可能会增加骨质疏松的威胁。<br/>
但前提是，平时食物中本来就缺乏摄取足够的钙，或是不经常动的人，加上更年期后的女性，<br/>
因缺少雌激素造成的钙质流失，以上这些情况再加上大量的咖啡因，才可能对骨造成威胁。<br/>
如果能够按照合理的量来享受，你还是可以做到不因噎废食的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多边形顶点按逆时针排列算法]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/02/duo-bian-xing-ding-dian-an-ni-shi-zhen-pai-lie-suan-fa/"/>
    <updated>2013-02-02T15:12:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/02/duo-bian-xing-ding-dian-an-ni-shi-zhen-pai-lie-suan-fa</id>
    <content type="html"><![CDATA[<p>原文链接：<br/>
<a href="http://www.myexception.cn/program/776883.html">http://www.myexception.cn/program/776883.html</a></p>

<!-- more -->


<pre><code>const double eps = 1e-8;
int sign(double d){
    return d < -eps ? -1 : (d > eps);
}

// 多边形类
struct poly{
    static const int N = 1005; // 点数的最大值
    point ps[N + 5]; // 逆时针存储多边形的点，[0, pn - 1] 存储点
    int pn;  // 点数

    poly() {
        pn = 0;
    }

    // 加进一个点 
    void push(point tp){
        ps[pn ++] = tp;
    }

    // 第k个位置
    int trim(int k){
        return (k + pn) % pn;
    }

    void clear() {
        pn = 0;
    }
};

// 多边形 org 的有向面积
double signArea(poly org){
    int i, g;
    double ans;
    point* ps = org.ps;
    for (ans = i = 0; i < org.pn; i ++) {
        g = org.trim(i + 1);
        ans += (ps[g].y * ps[i].x - ps[g].x * ps[i].y);
    }
    return ans / 2.0;
}

// 如果 org 的点是逆时针的，则调整为逆时针的
void makeAntclockwise(poly& org) {
    if (sign(signArea(org)) < 0) {
        reverse(org.ps, org.ps + org.pn);
    }
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(转载)Mac 终端关机命令]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/02/zhuan-zai-mac-zhong-duan-guan-ji-ming-ling/"/>
    <updated>2013-02-02T15:00:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/02/zhuan-zai-mac-zhong-duan-guan-ji-ming-ling</id>
    <content type="html"><![CDATA[<p>原文链接：<br/>
<a href="http://pulading1988.diandian.com/post/2012-04-22/17392701">http://pulading1988.diandian.com/post/2012-04-22/17392701</a><br/>
<strong>1.立即关机：</strong><br/>
<code>sudo halt</code> 或 <code>sudo shutdown -h now</code></p>

<!-- more -->


<p><strong>2.10 分钟后关机：</strong><br/>
<code>sudo shutdown -h +10</code></p>

<p><strong>3.晚上 8 点关机：</strong><br/>
<code>sudo shutdown -h 20:00</code></p>

<p><strong>4.立即重启：</strong><br/>
<code>sudo reboot</code> 或者 <code>sudo shutdown -r now</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(转载)很好的一篇 git 入门文章]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/02/zhuan-zai-hen-hao-de-%5B%3F%5D-pian-git-ru-men-wen-zhang/"/>
    <updated>2013-02-02T00:00:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/02/zhuan-zai-hen-hao-de-[?]-pian-git-ru-men-wen-zhang</id>
    <content type="html"><![CDATA[<p>原文链接：<br/>
<a href="http://blog.csdn.net/ylm23_24/article/details/8561527">http://blog.csdn.net/ylm23_24/article/details/8561527</a><br/>
用了几次 git 了，一直没总结，还是不太熟。<br/>
下载和安装什么的就不说了。<br/>
Windows 下推荐 git 和 tortoise git。Linux 下的 gitk 貌似还不错。</p>

<!-- more -->


<h3>1.本地创建新仓库</h3>

<p>创建新文件夹，打开终端执行<br/>
<code>git init</code></p>

<p>这样就创建了一个新的 git 仓库</p>

<h3>2.复制仓库</h3>

<p>本地复制，创建一个本地仓库的克隆版本。<br/>
<code>git clone /path/to/repository</code></p>

<p>将远端服务器上的仓库复制到本地，就跟下载差不多，如下例<br/>
<code>git clone git@github.com:linus-young/depot.git</code></p>

<h3>3.添加与提交</h3>

<p><code>git add filename</code><br/>
<code>git commit -m "代码提交信息"</code></p>

<h3>4.推送到远端服务器</h3>

<p>在 github 上申请一个帐号，create a new repo，<br/>
创建之后其实 github 上有提示要执行哪些命令，注意两个邮箱需一致。<br/>
至于本地的配置详见 <a href="http://blog.csdn.net/ylm23_24/article/details/8297362">http://blog.csdn.net/ylm23_24/article/details/8297362</a><br/>
在当前本地文件夹下执行：<br/>
<code>git remote add origin git@github.com:linus-young/depot.git</code><br/>
<code>git push origin master</code></p>

<p>第一行代码是确定添加到 github 的哪个仓库，作为第一次提交。<br/>
第二行是将本地的所有文件上传到远端服务器上。<br/>
master 是默认分支，可改为其他分支。本地创建的其他分支默认是不可见的。</p>

<h3>5.分支</h3>

<p>master 是默认的。在其他分支上进行开发，完成后再合并到主分支上，有利于多人共同开发。<br/>
在当前本地仓库新建一个分支 test<br/>
<code>git branch test</code><br/>
若此时运行<br/>
<code>git branch</code></p>

<p>可以看到所有当前存在的分支<br/>
test<br/>
*master</p>

<p>切换到 test 分支<br/>
<code>git checkout test</code><br/>
现在来随便更改一些文件，并且提交，然后切换到 master<br/>
<strong>(edit file)</strong><br/>
<code>git commit -a -m "try branch"</code><br/>
<code>git checkout master</code></p>

<p>切换之后你打开刚刚修改过的文件，神奇的是貌似这些文件都没有被修改过！<br/>
原因是你此时处于 master 分支，test 分支里面所作的改动是不起作用的，不信的话可以用<br/>
<code>git checkout test</code><br/>
然后看看文件是否被修改了</p>

<p>然后你可以修改 master 分支下的一些文件并且提交<br/>
<strong>(edit file)</strong><br/>
<code>git commit -a -m "i just edit some file on master"</code></p>

<p>然后我们来合并 test 分支上的改动到 master 下<br/>
<code>git merge test</code></p>

<p>报错的话可以用 git diff 查看冲突<br/>
然后提交<br/>
<code>git commit -a -m "i have merged test to master"</code></p>

<p>下面这行可以删除 test 分支：<br/>
<code>git branch -d test</code></p>

<h3>6.其他常见命令</h3>

<p><code>git status</code> 查看文件状态<br/>
<code>git log</code>   查看提交的历史记录<br/>
<code>git pull</code> 和 <code>git push</code> 相反</p>

<h3>7.gitk</h3>

<p><code>gitk</code> 可以用图形化的方式很清楚地显示改动</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(转载)Git: Why 'Everything up-to-date' when pushing]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/01/git-why-everything-up-to-date-when-pushing/"/>
    <updated>2013-02-01T23:22:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/01/git-why-everything-up-to-date-when-pushing</id>
    <content type="html"><![CDATA[<p>原文链接：<br/>
<a href="http://blog.rexzhao.com/2011/11/28/google-code-git-everything-up-to-date-when-push.html">http://blog.rexzhao.com/2011/11/28/google-code-git-everything-up-to-date-when-push.html</a><br/>
第一次在 <code>Google Code</code> 上弄项目，注册完毕后，<br/>
尝试增加一个新文件用以测试 Git 是否好好工作。<br/>
结果在 <code>Push</code> 时却显示 <code>Every up-to-date</code>，检查文件时却发现实际上一个都没更新上去。</p>

<!-- more -->


<p>因为对 <code>Git</code> 不够熟悉，因此只好 <code>Googling</code>，进行一番搜索后找到原因如下：</p>

<p><strong>Why does Git refuse to push, saying &#8220;everything up to date&#8221;?<br/>
git push with no additional arguments only pushes branches that exist in the remote already. <br/>
If the remote repository is empty, nothing will be pushed. <br/>
In this case, explicitly specify a branch to push, e.g. <code>git push master</code>.</strong></p>

<p>也就是说一开始 <code>git</code> 服务器仓库是完全空的，<br/>
不包含任何一个分支(<code>branch</code>)，因此刚开始 <code>Push</code> 时需要指定一个。<br/>
执行 <code>git remote -v</code> 后看到自己的 <code>remote</code> 端名字为 <code>origin</code>:</p>

<pre><code>$ git remote -v
origin  https://code.google.com/p/micolog2 (fetch) 
origin  https://code.google.com/p/micolog2 (push)
</code></pre>


<p>执行 <code>git branch</code> 后看到自己当下用的分支是 <code>master</code>:</p>

<pre><code>$ git branch 
* master
</code></pre>


<p>因此在本地 <code>commit</code> 后，再执行 <code>git push origin master</code> 即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X 下 git 如何升级]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/01/mac-os-x-xia-git-ru-he-sheng-ji/"/>
    <updated>2013-02-01T22:58:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/01/mac-os-x-xia-git-ru-he-sheng-ji</id>
    <content type="html"><![CDATA[<p>原帖链接：<a href="http://segmentfault.com/q/1010000000095119">http://segmentfault.com/q/1010000000095119</a><br/>
<code>Mac OS X Lion</code> 下使用 <code>which git</code> 查看 <code>git</code>，<br/>
发现当前所使用的 <code>git</code> 位于 <code>/usr/bin/git</code> 目录下，<br/>
可能是安装 <code>XCode</code> 时一起安装上来的，执行 <code>git --version</code> 得到当前版本为：<code>1.7.5.4</code>。<br/>
想升级到最新版本，下载 <code>git-osx-installer</code> 安装完成后，在命令行里查看却仍是旧版本。<br/>
查阅资料发现这个安装包是将 <code>git</code> 安装在 <code>/usr/local/git</code> 目录下的。<br/>
<strong>我想使用这个新版本的 <code>git</code>，该如何进行设置？</strong></p>

<!-- more -->


<h3>解决方案：</h3>

<p>其实是两个问题，第一个问题是高版本的 <code>git</code> 如何安装？<br/>
用 <code>git-osx-installer</code> 也好，用 <code>brew</code> 也好，都可以。<br/>
建议用 <code>brew</code> 安装：<code>brew install git</code></p>

<p>另一个问题是：如何让新安装的 <code>git</code> 覆盖老版本的 <code>git</code>？<br/>
建议用 <code>~/.bash_profile</code>，加入以下的内容：<br/>
<code>export PATH=/usr/local/git/bin:${PATH}</code><br/>
这样就可以让 <code>bash</code> 优先搜索 <code>/usr/local/git/bin</code> 下的指令，而且不会覆盖老文件，比较安全。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(转载)How to edit your path environment variables on Mac OS X]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/01/zhuan-zai-how-to-edit-your-path-environment-variables-on-mac-os-x/"/>
    <updated>2013-02-01T22:38:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/01/zhuan-zai-how-to-edit-your-path-environment-variables-on-mac-os-x</id>
    <content type="html"><![CDATA[<p>原文链接：<br/>
<a href="http://hathaway.cc/2008/06/how-to-edit-your-path-environment-variables-on-mac-os-x/">http://hathaway.cc/2008/06/how-to-edit-your-path-environment-variables-on-mac-os-x/</a><br/>
If you are new to Mac OS X, you may need to know how to edit your PATH.<br/>
The good news is that this is an easy task on Mac OS X.</p>

<!-- more -->


<p>The recommended way is by editing your <code>.bash_profile</code> file. <br/>
This file is read and the commands in it executed by Bash every time you log in to the system. <br/>
The best part is that this file is specific to your user <br/>
so you won’t affect other users on the same system by changing it.</p>

<h3>Step 1: Open up a Terminal window(this is in your Applications/Utilites folder by default)</h3>

<h3>Step 2: Enter the follow commands:</h3>

<p><code>touch ~/.bash_profile; open ~/.bash_profile</code><br/>
This will open the <code>.bash_profile</code> file in Text Edit (the default text editor included on your system). <br/>
The file allows you to customize the environment your user runs in.</p>

<h3>Step 3: Add the following line to the end of the file adding whatever additional directory you want in your path:</h3>

<p><code>export PATH="$HOME/.rbenv/bin:$PATH"</code><br/>
That example would add <code>~/.rbenv</code> to the PATH. The <code>$PATH</code> part is important,<br/>
as it appends the existing PATH to preserve it in the new value.</p>

<h3>Step 4: Save the .bash_profile file and Quit (Command + Q) Text Edit.</h3>

<h3>Step 5: Force the .bash_profile to execute.</h3>

<p>This loads the values immediately without having to reboot. <br/>
In your Terminal window, run the following command.
<code>source ~/.bash_profile</code><br/>
That’s it!</p>

<p>Now you know how to edit the PATH on your Mac OS X computer system. <br/>
You can confirm the new path by opening a new Terminal windows and running:<br/>
<code>echo $PATH</code></p>

<p>You should now see the values you want in your PATH.</p>

<p>[Updated 2/10/2012]<br/>
The instructions now use the <code>.bash_profile</code> method of editing your PATH.<br/>
This is preferred as it keeps the changes specific to your user. <br/>
I also updated the instructions to use <code>TextEdit</code> instead of <code>vim</code> so it is easier for a beginner.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[灾后重建 octopress 博客遇到的问题]]></title>
    <link href="http://yang3wei.github.com/blog/2013/01/31/zai-hou-zhong-jian-octopress-bo-ke-yu-dao-de-wen-ti/"/>
    <updated>2013-01-31T16:58:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/01/31/zai-hou-zhong-jian-octopress-bo-ke-yu-dao-de-wen-ti</id>
    <content type="html"><![CDATA[<p>今天上午十点的时候试了一下 <code>git pull</code> 命令，<br/>
结果导致 <code>octopress</code> 博客在我本地的目录乱成了一团浆糊，<br/>
因为对 <code>git</code> 的了解不是很充分，所以在多番努力修复无果之后，我决定重新洗牌。</p>

<!-- more -->


<p>话说 <code>git</code> 的分支、合并什么的确实有些不容易理解~<br/>
其实 <code>blog</code> 还是能够正常使用的，但是我本地 <code>octopress</code> 的目录被完全破坏掉了，<br/>
失去了我对它的掌控，另外就是，在提交的时候老提示类似如下的信息</p>

<pre><code># On branch master
# Your branch is ahead of 'origin/master' by 1 commit.
#
nothing to commit (working directory clean)</code></pre>


<p>我是一个追求完美的人，这些个多余的东西让我浑身不自在，于是我有了 <code>重装</code> 的想法，<br/>
重装其实也有其他的用意，比如说，让我对架设 octopress 博客的流程更加轻车熟路些。<br/>
因为之前走过一遍，所以我在做费时评估时是准备在 10 分钟内搞定的。</p>

<p>但是现实往往是那么地不可预料，这不，在重装的过程中又遇到了一些问题，- -、</p>

<h3>第一步，清除所有陈旧的东西</h3>

<p>将 <code>octopress</code> 博客的本地目录拽入垃圾箱；<br/>
在 <code>github</code> 里面删除 <code>yang3wei.github.com</code> 博客仓库。<br/>
ok，就这么多！</p>

<h3>第二步，在 github 上面重建 yang3wei.github.com 仓库</h3>

<p>这个不多说，<code>github</code> 官网上面有做全方位地向导。</p>

<h3>第三步，重新布置 octopress 博客的本地目录</h3>

<p>这个也没什么好说的，顺着 <code>octopress</code> 主页底部的 <code>start here</code> 链接一路往下走即可。</p>

<p>但是这里面有猫腻，如果处理的不好，将导致管理 octopress 博客出现一些混乱！<br/>
这里说一下存在问题的处理方式：<br/>
按照 <code>octopress</code> 主页上面介绍的搭建流程，<br/>
我开启一个 <code>Termimal</code> 窗口，直接在里面粘贴并执行如下的命令：<br/>
<code>git clone git://github.com/imathis/octopress.git octopress</code><br/>
<code>Terminal</code> 窗口开启的时候默认的所在目录为 <code>~</code>，<br/>
上面的命令会将 <code>octopress</code> 的安装文件克隆到本地的 <code>~/octopress</code> 目录。<br/>
之后我规规矩矩地执行下列命令：<code>cd octopress</code>、<code>rake install</code>，</p>

<p>然后我点击 <code>Next Steps</code> 下面的 <code>Set up deployment</code> 链接进入到创建 <code>github</code> 博客仓库的环节。<br/>
按照 <code>octopress</code> 给出的提示，我在 <code>github</code> 里面创建了一个名为 <code>yang3wei.github.com</code> 的仓库。<br/>
之后我复制好 <code>github</code> 所生成的命令文本：</p>

<pre><code>touch README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/yang3wei/yang3wei.github.com.git
git push -u origin master
</code></pre>


<p>二话不说跑到之前打开的那个 <code>Terminal</code> 窗口里面就粘贴执行了，<br/>
但在执行这组命令时并没有想象中的顺利，在执行倒数第二行命令的时候出现了故障：<br/>
<code>fatal: remote origin already exists</code><br/>
<code>googling</code> 一番以后找到问题的解决方案，在执行倒数第二行命令前先执行一遍如下命令：<br/>
<code>git remote rm origin</code><br/>
然后，依次粘贴执行前述命令块儿的最后两条命令，其间没有再生出其他的枝节。<br/>
问题解决方案的相关链接：<a href="http://stackoverflow.com/questions/10904339/github-fatal-remote-origin-already-exists">Github “fatal: remote origin already exists”</a></p>

<p>做完了上面的操作，就算是将 <code>github</code> 上 <code>yang3wei.github.com</code> 仓库的本地目录给布置好了。<br/>
之后点进 <a href="http://octopress.org/docs/deploying/github/">Deploying to Github Pages</a> 链接，继续按照提示往下走，<br/>
我在之前提到的那个 <code>Terminal</code> 窗口里面再次粘贴并执行如下命令块儿：</p>

<pre><code>rake setup_github_pages
rake generate
rake deploy
git add .
git commit -m "first commit"
git push origin source
</code></pre>


<p>在依次执行到最后一条命令 <code>git push origin source</code> 时，<br/>
问题再次降临，本地提交的数据死活推不进 <code>github</code> 服务器。<br/>
我用 <code>git status</code> 和 <code>git branch -a</code> 命令查看了一下当前的分支状态和所有的分支条目，<br/>
发现 <code>source</code> 分支根本就不存在，当前所处的也只是 <code>master</code> 分支。<br/>
我感到非常的不可思议，因为在我之前顺利搭建 <code>otopress</code> 博客的时候，<br/>
我是一直都工作在 <code>source</code> 分支下面的，现在却仅仅只有一个 <code>master</code> 分支！<br/>
我重复删除创建实践了很多次，最终却都只得到上述的结局。<br/>
有几次我忍不住按照 <code>git</code> 给出的提示执行了 <code>git pull</code> 命令，结果一下就完蛋了：<br/>
静态页数据直接被拉到本地的 <code>octopress</code> 根目录，把根目录弄得一团乱麻。</p>

<h3>真相在哪里？</h3>

<p>熟悉 git 运作机制的看官可能已经发现问题的所在了！<br/>
我不明所以地将 <code>yang3wei.github.com</code> 仓库的本地目录和 <code>~/octopress</code> 目录重叠了起来。<br/>
正是因为这一点导致了我 <code>n + 1</code> 次的重建失败！正确的处理方法：<br/>
<strong>使用除 <code>~/octopress</code> 目录之外的其他目录作为 <code>yang3wei.github.com</code> 的本地目录。</strong><br/>
庆幸我是一个执着的人，没有 <code>n + 1</code> 次的失败，哪有第 <code>n + 2</code> 次的成功？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(转载)初次运行 Git 前的配置]]></title>
    <link href="http://yang3wei.github.com/blog/2013/01/31/zhuan-zai-chu-ci-yun-xing-git-qian-de-pei-zhi/"/>
    <updated>2013-01-31T00:29:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/01/31/zhuan-zai-chu-ci-yun-xing-git-qian-de-pei-zhi</id>
    <content type="html"><![CDATA[<p>原文链接：<br/>
<a href="http://wuzongbin2008.blog.163.com/blog/static/214687332010111992437496/" title="人生、梦想、炼狱、天堂">http://wuzongbin2008.blog.163.com/blog/static/214687332010111992437496/</a><br/>
<a href="http://progit.org/book/zh/ch1-5.html">http://progit.org/book/zh/ch1-5.html</a><br/>
一般在新的系统上，我们都需要先配置下自己的 Git 工作环境。<br/>
配置工作只需一次，以后升级时还会沿用现在的配置。<br/>
当然，如果需要，你随时可以用相同的命令修改已有的配置。</p>

<!-- more -->


<p>Git 提供了一个叫做 <code>git config</code> 的工具<br/>
（译注：实际是 <code>git-config</code> 命令，只不过可以通过 git 加一个名字来呼叫此命令），<br/>
专门用来配置或读取相应的工作环境变量。<br/>
而正是由这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。<br/>
这些变量可以存放在以下三个不同的地方：</p>

<h3>1.<code>/etc/gitconfig</code> 文件</h3>

<p>系统中对所有用户都普遍适用的配置。<br/>
若使用 <code>git config</code> 时用 <code>--system</code> 选项，读写的就是这个文件。</p>

<h3>2.<code>~/.gitconfig</code> 文件</h3>

<p>用户目录下的配置文件只适用于该用户。<br/>
若使用 <code>git config</code> 时用 <code>--global</code> 选项，读写的就是这个文件。</p>

<h3>3.当前项目 <code>.git</code> 隐藏目录下的 config 文件</h3>

<p>这里的配置仅仅针对当前项目有效。<br/>
每一个级别的配置都会覆盖上层的相同配置，<br/>
所以 <code>.git/config</code> 里的配置会覆盖 <code>/etc/gitconfig</code> 中的同名变量。</p>

<p>在 <code>Windows</code> 系统上，Git 会找寻用户主目录下的 <code>.gitconfig</code> 文件。<br/>
主目录即 <code>$HOME</code> 变量指定的目录，一般都是 <code>C:\Documents and Settings\$USER</code>。<br/>
此外，Git 还会尝试找寻 <code>/etc/gitconfig</code> 文件，<br/>
只不过看当初 Git 装在什么目录，就以此作为根目录来定位。</p>

<h2>用户信息</h2>

<p>第一个要配置的是你个人的用户名称和电子邮件地址。<br/>
这两条配置很重要，每次 Git 提交时都会引用这两条信息，<br/>
说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：</p>

<pre><code>git config --global user.name "John Doe"
git config --global user.email johndoe@example.com
</code></pre>


<p>如果用了 <code>--global</code> 选项，那么更改的配置文件就是位于你用户主目录下的那个，<br/>
以后你所有的项目都会默认使用这里配置的用户信息。<br/>
如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 <code>--global</code> 选项重新配置即可，<br/>
新的设定保存在当前项目的 <code>.git/config</code> 文件里。</p>

<h2>文本编辑器</h2>

<p>接下来要设置的是默认使用的文本编辑器。<br/>
Git 需要你输入一些额外消息的时候，会自动调用一个外部文本编辑器给你用。<br/>
默认会使用操作系统指定的默认编辑器，一般可能会是 <code>Vi</code> 或者 <code>Vim</code>。<br/>
如果你有其他偏好，比如 <code>Emacs</code> 的话，可以重新设置：</p>

<pre><code>git config --global core.editor emacs</code></pre>


<h2>差异分析工具</h2>

<p>还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：</p>

<pre><code>git config --global merge.tool vimdiff</code></pre>


<p>Git 可以理解 <code>kdiff3</code>，<code>tkdiff</code>，<code>meld</code>，<code>xxdiff</code>，<code>emerge</code>，<br/>
<code>vimdiff</code>，<code>gvimdiff</code>，<code>ecmerge</code>，<code>opendiff</code> 等合并工具的输出信息。<br/>
当然，你也可以指定使用自己开发的工具，具体怎么做可以参阅第七章。</p>

<h2>查看配置信息</h2>

<p>要检查已有的配置信息，可以使用 git config &#8211;list 命令：</p>

<pre><code>git config --list user.name=Scott Chacon user.email=schacon@gmail.com color.status=auto color.branch=auto color.interactive=auto color.diff=auto ...</code></pre>


<p>有时候会看到重复的变量名，那就说明它们来自不同的配置文件<br/>
（比如 <code>/etc/gitconfig</code> 和 <code>~/.gitconfig</code>），不过最终 Git 实际采用的是最后一个。</p>

<p>也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：</p>

<pre><code>git config user.name Scott Chacon</code></pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(扩充)Octopress 怎么开启评论功能]]></title>
    <link href="http://yang3wei.github.com/blog/2013/01/30/zhuan-zai-octopress-zen-yao-kai-qi-ping-lun-gong-neng/"/>
    <updated>2013-01-30T18:09:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/01/30/zhuan-zai-octopress-zen-yao-kai-qi-ping-lun-gong-neng</id>
    <content type="html"><![CDATA[<p>原文链接：<br/>
<a href="http://gangmax.me/blog/2012/01/20/how-to-use-disqus-in-octopress/" title="Blog of GangMax">http://gangmax.me/blog/2012/01/20/how-to-use-disqus-in-octopress/</a></p>

<h3>1.Octopress 默认支持 disqus，开启即可</h3>

<!-- more -->


<p>这两天我一直想给 octopress 加入评论功能。<br/>
于是我尝试搜索 <code>disqus octopress jekyll</code> 这样的关键字，但是没有找到具体的做法。
后来我想到：可以查看一个具有评论功能的 github octopress 实例代码，看看别人是怎么做的，比如<a href="https://github.com/roylez/roylez.github.com">这个</a>。</p>

<p>我首先查看 <code>source/_layout/post.html</code>，看到里面有处理 disqus 的相关代码。<br/>
我的第一反应是我应该在我自己的对应文件里面也加上相应的代码。<br/>
但是随即发现我的文件中已经有了一模一样的代码。</p>

<p>也就是说，其实 <code>octopress/jekyll</code> 默认就有这些代码。<br/>
这说明 octopress 自身就支持 disqus，<br/>
可能这就是为什么没有人评论该怎么在 octopress 里面加入 disqus 支持的原因。</p>

<p>于是打开 <code>_config.yml</code>，找到了 disqus 相关的配置项，修改即可：</p>

<pre><code>disqus_short_name: your_disqus_short_name
disqus_show_comment_count: true</code></pre>


<p>当然，前提是你需要先注册一个 <a href="http://www.disqus.com/">disqus</a> 帐号，这个就不用我多说了。</p>

<h3>2.一个要注意的地方</h3>

<p>原文请参看如下链接：<br/>
<a href="http://www.ducea.com/2012/11/12/disqus-comments-not-visible-in-octopress/" title="MDLog:/sysadmin">http://www.ducea.com/2012/11/12/disqus-comments-not-visible-in-octopress/</a>
大意就是在更改 octopress 配置文件 _config.yml 时，<br/>
下面两者有很大的区别，后者多加了一个斜杠将直接导致看不见 disqus 的评论内容！
<strong><code>url: http://yang3wei.github.com</code>  <br/>
<code>url: http://yang3wei.github.com/</code></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacVim 用 mvim 命令打开文件到新的标签页]]></title>
    <link href="http://yang3wei.github.com/blog/2013/01/30/macvim-yong-mvim-ming-ling-da-kai-wen-jian-dao-xin-de-biao-qian-ye/"/>
    <updated>2013-01-30T15:22:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/01/30/macvim-yong-mvim-ming-ling-da-kai-wen-jian-dao-xin-de-biao-qian-ye</id>
    <content type="html"><![CDATA[<p>原文链接：<br/>
<a href="http://www.reake.com/how-to-use-terminal-command-to-open-file-to-macvim-mvim-tab/" title="瑞克互动">http://www.reake.com/how-to-use-terminal-command-to-open-file-to-macvim-mvim-tab/</a><br/>
从 <code>MacVim(GitHub)</code> 官网下载后，解压出两个文件：<code>MacVim.app</code> 和 <code>mvim</code></p>

<pre><code># 将 `MacVim.app` 拷入 `/Applications` 目录
sudo cp -f MacVim.app /Applications/
# 将 `mvim` 拷入 `/usr/bin` 目录
sudo cp -f mvim /usr/bin/</code></pre>


<p>然后在 <code>Terminal</code> 键入命令 <code>mvim project_file.php</code> ，出现了一个 MacVim 窗口。<br/>
但 <code>MacVim</code> 支持当前窗口多标签页功能，每次打开都是新窗口，<br/>
虽然苹果有 <code>Mission Control</code> 切换，但文件窗口多了，显示还是很麻烦，<br/>
所以想让 <code>mvim</code> 打开文件直接在 <code>MacVim</code> 当前窗口的新标签页里打开，<br/>
需要在命令后加 <code>--remote-tab</code> 参数，感觉挺麻烦，何不设置为默认就在标签页中打开呢?</p>

<!-- more -->


<p>这里给出一种直接修改 <code>mvim</code> 以达到上述目的的方案：<br/>
1.切换到 <code>/usr/bin/</code> 目录并打开 <code>mvim</code> 文件</p>

<pre><code>cd /usr/bin/; mvim mvim</code></pre>


<p>2.更改 <code>/usr/bin/mvim/</code> 文件中的配置
首先，在文件头部加入</p>

<pre><code>tabs=true</code></pre>


<p>然后，把底部的 <code>if</code> 块替换成下面的：</p>

<pre><code>if [ "$gui" ]; then
  if $tabs && [[ `$binary --serverlist` = "VIM" ]]; then
    exec "$binary" -g $opts --remote-tab-silent ${1:+"$@"}
  else
    exec "$binary" -g $opts ${1:+"$@"}
  fi
else
  exec "$binary" $opts ${1:+"$@"}
fi</code></pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(扩充)为 octopress 添加标签云]]></title>
    <link href="http://yang3wei.github.com/blog/2013/01/30/zhuan-zai-wei-octopress-tian-jia-biao-qian-yun/"/>
    <updated>2013-01-30T02:54:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/01/30/zhuan-zai-wei-octopress-tian-jia-biao-qian-yun</id>
    <content type="html"><![CDATA[<p>原文链接：<a href="http://codemacro.com/2012/07/18/add-tag-to-octopress/" title="loop in codes">http://codemacro.com/2012/07/18/add-tag-to-octopress/</a><br/>
同添加 <code>category list</code> 一样，网络上有很多方法，这里列举一种。<br/>
首先将以下两个项目克隆到本地：</p>

<pre><code>https://github.com/robbyedwards/octopress-tag-pages 
https://github.com/robbyedwards/octopress-tag-cloudclone
</code></pre>


<p>这两个项目分别用于产生 <code>tag page</code> 和 <code>tag cloud</code>。<br/>
针对这两个插件，需要手工复制一些文件到你的 octopress 目录。</p>

<!-- more -->


<h3>1.octopress-tag-pages</h3>

<p>复制 <code>tag_generator.rb</code> 到 <code>/plugins</code> 目录。<br/>
复制 <code>tag_index.html</code> 到 <code>/source/_layouts</code> 目录。<br/>
复制 <code>tag_feed.xml</code> 到 <code>/source/_includes/custom/</code> 目录。<br/>
其他文件就不需要复制了，都是些例子。</p>

<h3>2.octopress-tag-cloud</h3>

<p>复制 <code>tag_cloud.rb</code> 到 <code>/plugins</code> 目录。<br/>
复制以下代码到 <code>/source/_includes/custom/asides/tags.html</code>。<br/>
<strong>注意：先去掉 % 前面的反斜杠</strong></p>

<pre><code>&lt;section&gt;
    &lt;h1&gt;Tags&lt;/h1&gt;
    &lt;ul class="tag-cloud"&gt;
        {\% tag_cloud font-size: 100-210%, limit: 49, style: para \%}
    &lt;/ul&gt;
&lt;/section&gt;
</code></pre>


<p><code>tag_cloud</code> 的参数中：<br/>
<code>style: para</code> 指定不使用 <code>li</code> 来分割；<br/>
<code>limit</code> 限定 10 个 tag；<br/>
<code>font-size</code> 指定 tag 的大小范围，具体参数参看官方文档。</p>

<p>最后，当然是在 <code>_config.yml</code> 的 <code>default_asides</code> 中添加这个 <code>tag cloud</code> 到导航栏，例如：</p>

<pre><code>default_asides: [asides/category_list.html, asides/recent_posts.html, custom/asides/tags.html]</code></pre>


<h3>3.本人扩充: 有一个要注意的地方</h3>

<p>结合自身经历，我按照前文所述操作且核对了很多次，<br/>
发现在 <code>rake generate</code> 和 <code>rake preview</code> 以后，<br/>
在预览页面却依然无法得到正常的结果，具体表现如下：<br/>
标签云确实是出现在了右栏里面，不过当我点击某个 tag 的时候，<br/>
跳转到的却不是有效的地址，而仅仅只是一个 tag 关键词！<br/>
灰常地荒谬，灰常地震惊，我甚至一度思忖，作者是不是故意在和我开玩笑。<br/>
经历了艰辛地排查，终于我在 <code>firebug</code> 下面发现了一些蛛丝马迹：<br/>
常规情况下 tag 对应的地址应该是 <code>/tags/关键字</code>，<br/>
但是我发现在我的站点上面却不是这样的，仅仅只有 <code>//关键字</code>，<br/>
体现在浏览器里面就仅仅是一个 tag 关键字了，因为两个斜杠都被滤掉了~<br/>
发现了问题的症结以后，我就跑到 _config.yml 配置文件去中查看，<br/>
并且拿自己的配置文件和其他正常人的配置文件作对比，果然发现了一些猫腻：<br/>
我的配置文件中少了一行配置：<code>tag_dir: tags</code>，也算是歪打正着了，<br/>
把这一行配置加进去之后，执行 <code>rake generate</code> 和 <code>rake preview</code> 命令，<br/>
转到浏览器里面键入 <code>localhost:4000</code> 进行查看，标签云的功能总算是回归正常了~</p>

<p>谈一谈我对此的感受吧：<br/>
之前我也没有删掉过 tag_dir 这一行配置，也就是说 octopress 本身就没有包含这一行配置~<br/>
我很奇怪为什么其他人竟然都没有提出甚至谈及这个问题，<br/>
难道是 octopress 在升级的过程中刚才将这一行配置去掉？<br/>
不论如何，此次经历还是让我相当的不愉快，我花了至少五个小时来解决这个问题！！<br/>
这让我难以接受，要知道此时此刻我本该已经躺在床上呼呼大睡了！<br/>
直言不讳吧，虽然拿 MacVim 写 markdown 很舒服，但我不得不承认：<br/>
octopress 毕竟还是没能达到我心目中理想的高度，此次就是不成熟的一个典型体现~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git 笔记概览]]></title>
    <link href="http://yang3wei.github.com/blog/2013/01/29/git-bi-ji-gai-lan/"/>
    <updated>2013-01-29T16:12:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/01/29/git-bi-ji-gai-lan</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>Git 如何删除 Remote 的文件</h3>

<p><a href="http://yang3wei.github.com/blog/2013/01/28/zhuan-zai-git-ru-he-shan-chu-remote-de-wen-jian/" title="(转载)Git 如何删除 Remote 的文件">Git 如何删除 Remote 的文件</a></p>

<h3>git - 简易指南</h3>

<p><a href="http://rogerdudler.github.com/git-guide/index.zh.html" title="git - 简易指南">助你开始使用 git 的简易指南，木有高深内容，;)</a></p>

<h3>git 删除远程分支的命令</h3>

<p>如果通过命令 <code>git branch -b feature_x source</code> 建立了 source 的一个分支 feature_x，<br/>
而且还将 feature_x 这个分支提交到 github 服务器上面去了，<br/>
此时由 feature_x 切换回 source 分支后执行 <code>git branch -d feature_x</code> 命令只能删除本地分支，<br/>
怎么将 github 服务器上面的 feature_x 分支给干掉呢？<br/>
执行 <code>git push origin :feature\_x</code> 命令即可！</p>

<h3>Git 分支管理策略</h3>

<p><a href="http://yang3wei.github.com/blog/2013/01/29/zhuan-zai-git-fen-zhi-guan-li-ce-lue/" title="Git 分支管理策略">Git 分支管理策略</a></p>

<h3>Git 怎么为 github 生成 ssh 密钥</h3>

<p><a href="https://help.github.com/articles/generating-ssh-keys" title="Generating SSH Keys">github:help - Generating SSH Keys</a></p>

<h3>Git 恢复删掉的一个文件</h3>

<p>删除一个文件：<br/>
<code>git rm 5.c</code><br/>
现在要恢复：<br/>
<code>git reset HEAD 5.c</code><br/>
<code>git checkout 5.c</code><br/>
完成（HEAD 似乎表示当前分支的当前版本）</p>

<h3>Git 在各版本之间自由穿梭</h3>

<p>恢复到上一个提交的版本<br/>
<code>git reset --hard HEAD^</code><br/>
恢复到某一个提交的版本<br/>
<code>git reset --hard e0dea1a7eaca4b9325e36fdbdf0909d02a067d43</code><br/>
<strong>注：各版本的 <code>hash</code> 可以去 <code>github</code> 查看，也可以使用 <code>git log</code> 命令查看。</strong></p>

<h3>Git 怎么忽略某个文件</h3>

<p>仓库的 <code>.gitignore</code> 或 <code>git/info/exclude</code>，<code>exclude</code> 本身不被 <code>git</code> 管理。<br/>
一般情况下不要使用第一种方法，因为 <code>.gitignore</code> 本身是被 <code>git</code> 管理的，是大家共用的。<br/>
所以，不要随便修改 <code>.gitignore</code> 文件！</p>

<h3>Yasin Lee 的 git 学习笔记</h3>

<p><a href="http://blog.csdn.net/coder_jack/article/details/5975070#">http://blog.csdn.net/coder_jack/article/details/5975070#</a></p>

<h3>Problem with &#8220;git remote add origin git@github.com:yang3wei/test.git&#8221;？</h3>

<p>试着先执行一下 <code>git remote rm origin</code> 命令。<br/>
<a href="http://stackoverflow.com/questions/10904339/github-fatal-remote-origin-already-exists">github-fatal-remote-origin-already-exists</a></p>

<h3>fatal: &#8230; did you run git update-server-info on the server?</h3>

<p>You have to carefully look after your spelling. <br/>
According to Github&#8217;s guide, your username is nalgene, <br/>
hence the URL is <code>https://github.com/nalgene/MultiView.git</code>. <br/>
The error message hints that you added the remote as <br/>
<code>https://github.com/naglene/MultiView.git</code> <br/>
which is not the same username, as you swapped the <code>l</code> and <code>g</code>.<br/>
Also, the default branch is called <code>master</code>, not <code>maaster</code> or <code>mater</code>.<br/>
<a href="http://stackoverflow.com/questions/11094547/fatal-https-github-com-user-repo-git-info-refs-not-found-did-you-run-git-upd">original link</a></p>

<h3>What does &#8220;origin&#8221; mean in &#8220;git push origin master&#8221;?</h3>

<p><code>git push origin master</code> 的完整命令如下：<br/>
<code>git push git@github.com:{username}/{projectname}.git HEAD:{branchname}</code></p>

<p>Also, you don&#8217;t need to type out the whole url each time you want to push. <br/>
When you ran the clone, git saved that URL as <code>origin</code>, <br/>
that&#8217;s why you can run something like &#8216;merge origin/test&#8217; - <br/>
it means the <code>test</code> branch on your <code>origin</code> server. <br/>
So, the simplest way to push to your server in that case would be:<br/>
<code>git push origin my_test:test</code><br/>
That will push your local <code>my_test</code> branch to the <code>test</code> branch on your <code>origin</code> server. <br/>
If you had named your local branch the same as the branch on the server, <br/>
then the colon is not neccesary, you can simply do:<br/>
<code>git push origin test</code><br/>
<a href="http://stackoverflow.com/questions/959477/error-when-git-push-to-github">Error when “git push” to github</a></p>

<h2>#</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(转载)Git 分支管理策略]]></title>
    <link href="http://yang3wei.github.com/blog/2013/01/29/zhuan-zai-git-fen-zhi-guan-li-ce-lue/"/>
    <updated>2013-01-29T15:21:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/01/29/zhuan-zai-git-fen-zhi-guan-li-ce-lue</id>
    <content type="html"><![CDATA[<p>原文链接：<a href="http://www.ruanyifeng.com/blog/2012/07/git.html" title="阮一峰的网络日志">http://www.ruanyifeng.com/blog/2012/07/git.html</a><br/>
如果你严肃对待编程，就必定会使用&#8221;版本管理系统&#8221;（Version Control System）。
眼下最流行的&#8221;版本管理系统&#8221;，非 Git 莫属。<br/>
<img src="http://yang3wei.github.com/images/posts/bg2012070501.png" alt="cool git" /></p>

<!-- more -->


<p>相比同类软件，Git 有很多优点。其中很显著的一点，就是版本的分支（branch）和合并（merge）十分方便。有些传统的版本管理软件，分支操作实际上会生成一份现有代码的物理拷贝，而 Git 只生成一个指向当前版本（又称&#8221;快照&#8221;）的指针，因此非常快捷易用。
但是，太方便了也会产生副作用。如果你不加注意，很可能会留下一个枝节蔓生、四处开放的版本库，到处都是分支，完全看不出主干发展的脉络。<br/>
<img src="http://yang3wei.github.com/images/posts/bg2012070502.png" alt="cool git" /><br/>
Vincent Driessen提出了一个分支管理的策略，我觉得非常值得借鉴。它可以使得版本库的演进保持简洁，主干清晰，各个分支各司其职、井井有条。理论上，这些策略对所有的版本管理系统都适用，Git 只是用来举例而已。如果你不熟悉 Git，跳过举例部分就可以了。</p>

<h2>一、主分支 Master</h2>

<p>首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。<br/>
<img src="http://yang3wei.github.com/images/posts/bg2012070503.png" alt="cool git" /><br/>
Git 主分支的名字，默认叫做 Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。</p>

<h2>二、开发分支 Develop</h2>

<p>主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做 Develop。<br/>
<img src="http://yang3wei.github.com/images/posts/bg2012070504.png" alt="cool git" /><br/>
这个分支可以用来生成代码的最新隔夜版本（nightly）。如果想正式对外发布，就在 Master 分支上，对 Develop 分支进行&#8221;合并&#8221;（merge）。
Git 创建 Develop 分支的命令：</p>

<pre><code>git checkout -b develop master</code></pre>


<p>将 Develop 分支发布到 Master 分支的命令：</p>

<pre><code># 切换到 Master 分支
git checkout master
# 对 Develop 分支进行合并
git merge --no-ff develop</code></pre>


<p>这里稍微解释一下，上一条命令的 &#8211;no-ff 参数是什么意思。默认情况下，Git 执行&#8221;快进式合并&#8221;（fast-farward merge），会直接将 Master 分支指向 Develop 分支。<br/>
<img src="http://yang3wei.github.com/images/posts/bg2012070505.png" alt="cool git" /><br/>
使用 &#8211;no-ff 参数后，会执行正常合并，在 Master 分支上生成一个新节点。为了保证版本演进的清晰，我们希望采用这种做法。关于合并的更多解释，请参考 Benjamin Sandofsky的《Understanding the Git Workflow》。<br/>
<img src="http://yang3wei.github.com/images/posts/bg2012070506.png" alt="cool git" /></p>

<h2>三、临时性分支</h2>

<p>前面讲到版本库的两条主要分支：Master 和 Develop。前者用于正式发布，后者用于日常开发。其实，常设分支只需要这两条就够了，不需要其他了。
但是，除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：
　　<em> 功能（feature）分支
　　</em> 预发布（release）分支
　　* 修补bug（fixbug）分支
这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有 Master 和 Develop。</p>

<h2>四、 功能分支</h2>

<p>接下来，一个个来看这三种 &#8220;临时性分支&#8221;。
第一种是功能分支，它是为了开发某种特定功能，从 Develop 分支上面分出来的。开发完成后，要再并入 Develop。<br/>
<img src="http://yang3wei.github.com/images/posts/bg2012070507.png" alt="cool git" /><br/>
功能分支的名字，可以采用 feature-* 的形式命名。
创建一个功能分支：</p>

<pre><code>git checkout -b feature-x develop</code></pre>


<p>开发完成后，将功能分支合并到 develop 分支：</p>

<pre><code>git checkout develop
git merge --no-ff feature-x</code></pre>


<p>删除 feature 分支：</p>

<pre><code>git branch -d feature-x</code></pre>


<h2>五、预发布分支</h2>

<p>第二种是预发布分支，它是指发布正式版本之前（即合并到 Master 分支之前），我们可能需要有一个预发布的版本进行测试。
预发布分支是从 Develop 分支上面分出来的，预发布结束以后，必须合并进 Develop 和 Master 分支。它的命名，可以采用 release-* 的形式。
创建一个预发布分支：</p>

<pre><code>git checkout -b release-1.2 develop</code></pre>


<p>确认没有问题后，合并到 master 分支：</p>

<pre><code>git checkout master
git merge --no-ff release-1.2
# 对合并生成的新节点，做一个标签
git tag -a 1.2</code></pre>


<p>再合并到 develop 分支：</p>

<pre><code>git checkout develop
git merge --no-ff release-1.2</code></pre>


<p>最后，删除预发布分支：</p>

<pre><code>git branch -d release-1.2</code></pre>


<p>六、修补 bug 分支
最后一种是修补 bug 分支。软件正式发布以后，难免会出现 bug。这时就需要创建一个分支，进行 bug 修补。
修补 bug 分支是从 Master 分支上面分出来的。修补结束以后，再合并进 Master 和 Develop 分支。它的命名，可以采用 fixbug-* 的形式。<br/>
<img src="http://yang3wei.github.com/images/posts/bg2012070508.png" alt="cool git" /><br/>
创建一个修补 bug 分支：</p>

<pre><code>git checkout -b fixbug-0.1 master</code></pre>


<p>修补结束后，合并到 master 分支：</p>

<pre><code>git checkout master
git merge --no-ff fixbug-0.1
git tag -a 0.1.1</code></pre>


<p>再合并到 develop 分支：</p>

<pre><code>git checkout develop
git merge --no-ff fixbug-0.1</code></pre>


<p>最后，删除 &#8220;修补 bug 分支&#8221;：</p>

<pre><code>git branch -d fixbug-0.1</code></pre>

]]></content>
  </entry>
  
</feed>
