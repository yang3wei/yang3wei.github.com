<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git相关 | yang3wei的专栏]]></title>
  <link href="http://yang3wei.github.com/blog/categories/git相关/atom.xml" rel="self"/>
  <link href="http://yang3wei.github.com/"/>
  <updated>2013-02-02T11:06:48+08:00</updated>
  <id>http://yang3wei.github.com/</id>
  <author>
    <name><![CDATA[yang3wei]]></name>
    <email><![CDATA[88480585@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[(转载)很好的一篇 git 入门文章]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/02/zhuan-zai-hen-hao-de-%5B%3F%5D-pian-git-ru-men-wen-zhang/"/>
    <updated>2013-02-02T00:00:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/02/zhuan-zai-hen-hao-de-[?]-pian-git-ru-men-wen-zhang</id>
    <content type="html"><![CDATA[<p>原文链接：<br/>
<a href="http://blog.csdn.net/ylm23_24/article/details/8561527">http://blog.csdn.net/ylm23_24/article/details/8561527</a><br/>
用了几次 git 了，一直没总结，还是不太熟。<br/>
下载和安装什么的就不说了。<br/>
Windows 下推荐 git 和 tortoise git。Linux 下的 gitk 貌似还不错。</p>

<!-- more -->


<h3>1.本地创建新仓库</h3>

<p>创建新文件夹，打开终端执行<br/>
<code>git init</code></p>

<p>这样就创建了一个新的 git 仓库</p>

<h3>2.复制仓库</h3>

<p>本地复制，创建一个本地仓库的克隆版本。<br/>
<code>git clone /path/to/repository</code></p>

<p>将远端服务器上的仓库复制到本地，就跟下载差不多，如下例<br/>
<code>git clone git@github.com:linus-young/depot.git</code></p>

<h3>3.添加与提交</h3>

<p><code>git add filename</code><br/>
<code>git commit -m "代码提交信息"</code></p>

<h3>4.推送到远端服务器</h3>

<p>在 github 上申请一个帐号，create a new repo，<br/>
创建之后其实 github 上有提示要执行哪些命令，注意两个邮箱需一致。<br/>
至于本地的配置详见 <a href="http://blog.csdn.net/ylm23_24/article/details/8297362">http://blog.csdn.net/ylm23_24/article/details/8297362</a><br/>
在当前本地文件夹下执行：<br/>
<code>git remote add origin git@github.com:linus-young/depot.git</code><br/>
<code>git push origin master</code></p>

<p>第一行代码是确定添加到 github 的哪个仓库，作为第一次提交。<br/>
第二行是将本地的所有文件上传到远端服务器上。<br/>
master 是默认分支，可改为其他分支。本地创建的其他分支默认是不可见的。</p>

<h3>5.分支</h3>

<p>master 是默认的。在其他分支上进行开发，完成后再合并到主分支上，有利于多人共同开发。<br/>
在当前本地仓库新建一个分支 test<br/>
<code>git branch test</code><br/>
若此时运行<br/>
<code>git branch</code></p>

<p>可以看到所有当前存在的分支<br/>
test<br/>
*master</p>

<p>切换到 test 分支<br/>
<code>git checkout test</code><br/>
现在来随便更改一些文件，并且提交，然后切换到 master<br/>
<strong>(edit file)</strong><br/>
<code>git commit -a -m "try branch"</code><br/>
<code>git checkout master</code></p>

<p>切换之后你打开刚刚修改过的文件，神奇的是貌似这些文件都没有被修改过！<br/>
原因是你此时处于 master 分支，test 分支里面所作的改动是不起作用的，不信的话可以用<br/>
<code>git checkout test</code><br/>
然后看看文件是否被修改了</p>

<p>然后你可以修改 master 分支下的一些文件并且提交<br/>
<strong>(edit file)</strong><br/>
<code>git commit -a -m "i just edit some file on master"</code></p>

<p>然后我们来合并 test 分支上的改动到 master 下<br/>
<code>git merge test</code></p>

<p>报错的话可以用 git diff 查看冲突<br/>
然后提交<br/>
<code>git commit -a -m "i have merged test to master"</code></p>

<p>下面这行可以删除 test 分支：<br/>
<code>git branch -d test</code></p>

<h3>6.其他常见命令</h3>

<p><code>git status</code> 查看文件状态<br/>
<code>git log</code>   查看提交的历史记录<br/>
<code>git pull</code> 和 <code>git push</code> 相反</p>

<h3>7.gitk</h3>

<p><code>gitk</code> 可以用图形化的方式很清楚地显示改动</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(转载)Git: Why 'Everything up-to-date' when pushing]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/01/git-why-everything-up-to-date-when-pushing/"/>
    <updated>2013-02-01T23:22:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/01/git-why-everything-up-to-date-when-pushing</id>
    <content type="html"><![CDATA[<p>原文链接：<br/>
<a href="http://blog.rexzhao.com/2011/11/28/google-code-git-everything-up-to-date-when-push.html">http://blog.rexzhao.com/2011/11/28/google-code-git-everything-up-to-date-when-push.html</a><br/>
第一次在 <code>Google Code</code> 上弄项目，注册完毕后，<br/>
尝试增加一个新文件用以测试 Git 是否好好工作。<br/>
结果在 <code>Push</code> 时却显示 <code>Every up-to-date</code>，检查文件时却发现实际上一个都没更新上去。</p>

<!-- more -->


<p>因为对 <code>Git</code> 不够熟悉，因此只好 <code>Googling</code>，进行一番搜索后找到原因如下：</p>

<p><strong>Why does Git refuse to push, saying "everything up to date"?<br/>
git push with no additional arguments only pushes branches that exist in the remote already. <br/>
If the remote repository is empty, nothing will be pushed. <br/>
In this case, explicitly specify a branch to push, e.g. <code>git push master</code>.</strong></p>

<p>也就是说一开始 <code>git</code> 服务器仓库是完全空的，<br/>
不包含任何一个分支(<code>branch</code>)，因此刚开始 <code>Push</code> 时需要指定一个。<br/>
执行 <code>git remote -v</code> 后看到自己的 <code>remote</code> 端名字为 <code>origin</code>:</p>

<pre><code>$ git remote -v
origin  https://code.google.com/p/micolog2 (fetch) 
origin  https://code.google.com/p/micolog2 (push)
</code></pre>


<p>执行 <code>git branch</code> 后看到自己当下用的分支是 <code>master</code>:</p>

<pre><code>$ git branch 
* master
</code></pre>


<p>因此在本地 <code>commit</code> 后，再执行 <code>git push origin master</code> 即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X 下 git 如何升级]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/01/mac-os-x-xia-git-ru-he-sheng-ji/"/>
    <updated>2013-02-01T22:58:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/01/mac-os-x-xia-git-ru-he-sheng-ji</id>
    <content type="html"><![CDATA[<p>原帖链接：<a href="http://segmentfault.com/q/1010000000095119">http://segmentfault.com/q/1010000000095119</a><br/>
<code>Mac OS X Lion</code> 下使用 <code>which git</code> 查看 <code>git</code>，<br/>
发现当前所使用的 <code>git</code> 位于 <code>/usr/bin/git</code> 目录下，<br/>
可能是安装 <code>XCode</code> 时一起安装上来的，执行 <code>git --version</code> 得到当前版本为：<code>1.7.5.4</code>。<br/>
想升级到最新版本，下载 <code>git-osx-installer</code> 安装完成后，在命令行里查看却仍是旧版本。<br/>
查阅资料发现这个安装包是将 <code>git</code> 安装在 <code>/usr/local/git</code> 目录下的。<br/>
<strong>我想使用这个新版本的 <code>git</code>，该如何进行设置？</strong></p>

<!-- more -->


<h3>解决方案：</h3>

<p>其实是两个问题，第一个问题是高版本的 <code>git</code> 如何安装？<br/>
用 <code>git-osx-installer</code> 也好，用 <code>brew</code> 也好，都可以。<br/>
建议用 <code>brew</code> 安装：<code>brew install git</code></p>

<p>另一个问题是：如何让新安装的 <code>git</code> 覆盖老版本的 <code>git</code>？<br/>
建议用 <code>~/.bash_profile</code>，加入以下的内容：<br/>
<code>export PATH=/usr/local/git/bin:${PATH}</code><br/>
这样就可以让 <code>bash</code> 优先搜索 <code>/usr/local/git/bin</code> 下的指令，而且不会覆盖老文件，比较安全。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(转载)初次运行 Git 前的配置]]></title>
    <link href="http://yang3wei.github.com/blog/2013/01/31/zhuan-zai-chu-ci-yun-xing-git-qian-de-pei-zhi/"/>
    <updated>2013-01-31T00:29:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/01/31/zhuan-zai-chu-ci-yun-xing-git-qian-de-pei-zhi</id>
    <content type="html"><![CDATA[<p>原文链接：<br/>
<a href="http://wuzongbin2008.blog.163.com/blog/static/214687332010111992437496/" title="人生、梦想、炼狱、天堂">http://wuzongbin2008.blog.163.com/blog/static/214687332010111992437496/</a><br/>
<a href="http://progit.org/book/zh/ch1-5.html">http://progit.org/book/zh/ch1-5.html</a><br/>
一般在新的系统上，我们都需要先配置下自己的 Git 工作环境。<br/>
配置工作只需一次，以后升级时还会沿用现在的配置。<br/>
当然，如果需要，你随时可以用相同的命令修改已有的配置。</p>

<!-- more -->


<p>Git 提供了一个叫做 <code>git config</code> 的工具<br/>
（译注：实际是 <code>git-config</code> 命令，只不过可以通过 git 加一个名字来呼叫此命令），<br/>
专门用来配置或读取相应的工作环境变量。<br/>
而正是由这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。<br/>
这些变量可以存放在以下三个不同的地方：</p>

<h3>1.<code>/etc/gitconfig</code> 文件</h3>

<p>系统中对所有用户都普遍适用的配置。<br/>
若使用 <code>git config</code> 时用 <code>--system</code> 选项，读写的就是这个文件。</p>

<h3>2.<code>~/.gitconfig</code> 文件</h3>

<p>用户目录下的配置文件只适用于该用户。<br/>
若使用 <code>git config</code> 时用 <code>--global</code> 选项，读写的就是这个文件。</p>

<h3>3.当前项目 <code>.git</code> 隐藏目录下的 config 文件</h3>

<p>这里的配置仅仅针对当前项目有效。<br/>
每一个级别的配置都会覆盖上层的相同配置，<br/>
所以 <code>.git/config</code> 里的配置会覆盖 <code>/etc/gitconfig</code> 中的同名变量。</p>

<p>在 <code>Windows</code> 系统上，Git 会找寻用户主目录下的 <code>.gitconfig</code> 文件。<br/>
主目录即 <code>$HOME</code> 变量指定的目录，一般都是 <code>C:\Documents and Settings\$USER</code>。<br/>
此外，Git 还会尝试找寻 <code>/etc/gitconfig</code> 文件，<br/>
只不过看当初 Git 装在什么目录，就以此作为根目录来定位。</p>

<h2>用户信息</h2>

<p>第一个要配置的是你个人的用户名称和电子邮件地址。<br/>
这两条配置很重要，每次 Git 提交时都会引用这两条信息，<br/>
说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：</p>

<pre><code>git config --global user.name "John Doe"
git config --global user.email johndoe@example.com
</code></pre>


<p>如果用了 <code>--global</code> 选项，那么更改的配置文件就是位于你用户主目录下的那个，<br/>
以后你所有的项目都会默认使用这里配置的用户信息。<br/>
如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 <code>--global</code> 选项重新配置即可，<br/>
新的设定保存在当前项目的 <code>.git/config</code> 文件里。</p>

<h2>文本编辑器</h2>

<p>接下来要设置的是默认使用的文本编辑器。<br/>
Git 需要你输入一些额外消息的时候，会自动调用一个外部文本编辑器给你用。<br/>
默认会使用操作系统指定的默认编辑器，一般可能会是 <code>Vi</code> 或者 <code>Vim</code>。<br/>
如果你有其他偏好，比如 <code>Emacs</code> 的话，可以重新设置：</p>

<pre><code>git config --global core.editor emacs</code></pre>


<h2>差异分析工具</h2>

<p>还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：</p>

<pre><code>git config --global merge.tool vimdiff</code></pre>


<p>Git 可以理解 <code>kdiff3</code>，<code>tkdiff</code>，<code>meld</code>，<code>xxdiff</code>，<code>emerge</code>，<br/>
<code>vimdiff</code>，<code>gvimdiff</code>，<code>ecmerge</code>，<code>opendiff</code> 等合并工具的输出信息。<br/>
当然，你也可以指定使用自己开发的工具，具体怎么做可以参阅第七章。</p>

<h2>查看配置信息</h2>

<p>要检查已有的配置信息，可以使用 git config --list 命令：</p>

<pre><code>git config --list user.name=Scott Chacon user.email=schacon@gmail.com color.status=auto color.branch=auto color.interactive=auto color.diff=auto ...</code></pre>


<p>有时候会看到重复的变量名，那就说明它们来自不同的配置文件<br/>
（比如 <code>/etc/gitconfig</code> 和 <code>~/.gitconfig</code>），不过最终 Git 实际采用的是最后一个。</p>

<p>也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：</p>

<pre><code>git config user.name Scott Chacon</code></pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git 笔记概览]]></title>
    <link href="http://yang3wei.github.com/blog/2013/01/29/git-bi-ji-gai-lan/"/>
    <updated>2013-01-29T16:12:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/01/29/git-bi-ji-gai-lan</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>Git 如何删除 Remote 的文件</h3>

<p><a href="http://yang3wei.github.com/blog/2013/01/28/zhuan-zai-git-ru-he-shan-chu-remote-de-wen-jian/" title="(转载)Git 如何删除 Remote 的文件">Git 如何删除 Remote 的文件</a></p>

<h3>git - 简易指南</h3>

<p><a href="http://rogerdudler.github.com/git-guide/index.zh.html" title="git - 简易指南">助你开始使用 git 的简易指南，木有高深内容，;)</a></p>

<h3>git 删除远程分支的命令</h3>

<p>如果通过命令 <code>git branch -b feature_x source</code> 建立了 source 的一个分支 feature_x，<br/>
而且还将 feature_x 这个分支提交到 github 服务器上面去了，<br/>
此时由 feature_x 切换回 source 分支后执行 <code>git branch -d feature_x</code> 命令只能删除本地分支，<br/>
怎么将 github 服务器上面的 feature_x 分支给干掉呢？<br/>
执行 <code>git push origin :feature\_x</code> 命令即可！</p>

<h3>Git 分支管理策略</h3>

<p><a href="http://yang3wei.github.com/blog/2013/01/29/zhuan-zai-git-fen-zhi-guan-li-ce-lue/" title="Git 分支管理策略">Git 分支管理策略</a></p>

<h3>Git 怎么为 github 生成 ssh 密钥</h3>

<p><a href="https://help.github.com/articles/generating-ssh-keys" title="Generating SSH Keys">github:help - Generating SSH Keys</a></p>

<h3>Git 恢复删掉的一个文件</h3>

<p>删除一个文件：<br/>
<code>git rm 5.c</code><br/>
现在要恢复：<br/>
<code>git reset HEAD 5.c</code><br/>
<code>git checkout 5.c</code><br/>
完成（HEAD 似乎表示当前分支的当前版本）</p>

<h3>Git 在各版本之间自由穿梭</h3>

<p>恢复到上一个提交的版本<br/>
<code>git reset --hard HEAD^</code><br/>
恢复到某一个提交的版本<br/>
<code>git reset --hard e0dea1a7eaca4b9325e36fdbdf0909d02a067d43</code><br/>
<strong>注：各版本的 <code>hash</code> 可以去 <code>github</code> 查看，也可以使用 <code>git log</code> 命令查看。</strong></p>

<h3>Git 怎么忽略某个文件</h3>

<p>仓库的 <code>.gitignore</code> 或 <code>git/info/exclude</code>，<code>exclude</code> 本身不被 <code>git</code> 管理。<br/>
一般情况下不要使用第一种方法，因为 <code>.gitignore</code> 本身是被 <code>git</code> 管理的，是大家共用的。<br/>
所以，不要随便修改 <code>.gitignore</code> 文件！</p>

<h3>Yasin Lee 的 git 学习笔记</h3>

<p><a href="http://blog.csdn.net/coder_jack/article/details/5975070#">http://blog.csdn.net/coder_jack/article/details/5975070#</a></p>

<h3>Problem with "git remote add origin git@github.com:yang3wei/test.git"？</h3>

<p>试着先执行一下 <code>git remote rm origin</code> 命令。<br/>
<a href="http://stackoverflow.com/questions/10904339/github-fatal-remote-origin-already-exists">github-fatal-remote-origin-already-exists</a></p>

<h3>fatal: ... did you run git update-server-info on the server?</h3>

<p>You have to carefully look after your spelling. <br/>
According to Github's guide, your username is nalgene, <br/>
hence the URL is <code>https://github.com/nalgene/MultiView.git</code>. <br/>
The error message hints that you added the remote as <br/>
<code>https://github.com/naglene/MultiView.git</code> <br/>
which is not the same username, as you swapped the <code>l</code> and <code>g</code>.<br/>
Also, the default branch is called <code>master</code>, not <code>maaster</code> or <code>mater</code>.<br/>
<a href="http://stackoverflow.com/questions/11094547/fatal-https-github-com-user-repo-git-info-refs-not-found-did-you-run-git-upd">original link</a></p>

<h3>What does "origin" mean in "git push origin master"?</h3>

<p><code>git push origin master</code> 的完整命令如下：<br/>
<code>git push git@github.com:{username}/{projectname}.git HEAD:{branchname}</code></p>

<p>Also, you don't need to type out the whole url each time you want to push. <br/>
When you ran the clone, git saved that URL as <code>origin</code>, <br/>
that's why you can run something like 'merge origin/test' - <br/>
it means the <code>test</code> branch on your <code>origin</code> server. <br/>
So, the simplest way to push to your server in that case would be:<br/>
<code>git push origin my_test:test</code><br/>
That will push your local <code>my_test</code> branch to the <code>test</code> branch on your <code>origin</code> server. <br/>
If you had named your local branch the same as the branch on the server, <br/>
then the colon is not neccesary, you can simply do:<br/>
<code>git push origin test</code><br/>
<a href="http://stackoverflow.com/questions/959477/error-when-git-push-to-github">Error when “git push” to github</a></p>

<h2>#</h2>
]]></content>
  </entry>
  
</feed>
