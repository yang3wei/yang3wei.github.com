<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: C/C++ | yang3wei的专栏]]></title>
  <link href="http://yang3wei.github.com/tags/c-c-/atom.xml" rel="self"/>
  <link href="http://yang3wei.github.com/"/>
  <updated>2013-02-17T11:03:09+08:00</updated>
  <id>http://yang3wei.github.com/</id>
  <author>
    <name><![CDATA[yang3wei]]></name>
    <email><![CDATA[88480585@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何在 Mac OS X Lion 上安装 OpenCV 2.2]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/15/ru-he-zai-mac-os-x-lion-shang-an-zhuang-opencv-2-dot-2/"/>
    <updated>2013-02-15T10:19:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/15/ru-he-zai-mac-os-x-lion-shang-an-zhuang-opencv-2-dot-2</id>
    <content type="html"><![CDATA[<p>原文链接：<a href="http://blog.sina.com.cn/s/blog_677a6d640100xcx9.html">如何在Mac OS X Lion上安装OpenCV 2.2! </a><br/>
OpenCV 对于做计算机视觉的童鞋来说就想老鼠与大米的关系，总之一个词——重要！</p>

<!-- more -->


<p>现在网上很多的帖子都是教如何在 VS2008、VS2010 下配置 OpenCV 2.x 的，这里就不再赘述。本帖主要解决的问题是介绍如何在 Mac OS X Lion（10.7.2) 下安装 OpenCV 2.2。其实本帖所描述的方法并不是原创的，最原始的帖子请参考<a href="http://salemsayed.me/?p=240">这里</a>（英文）。</p>

<h2>准备</h2>

<p>首先你需要下载并安装好 <a href="https://distfiles.macports.org/MacPorts/MacPorts-2.0.3-10.7-Lion.dmg">MacPorts</a> 这一大神级的软件。如果没有听说过 MacPorts，请 Google 或者上<a href="http://en.wikipedia.org/wiki/Macports">这里</a>。注意要下载 Lion 版的，这个跟 Snow Leopard 版的安装文件不一样，本文中的链接即是。<br/>
安装好了以后，进入 Terminal，输入以下两条命令，这是保证你的 MacPorts 是最新的。<br/>
<code>
sudo port selfupdate
sudo port upgrade outdated
</code>
至此，准备工作完毕，下面开始正式安装。（不要关掉 Terminal ！）</p>

<h2>安装OpenCV</h2>

<p>可能有童鞋会问问什么到现在都没有讲到哪里下载 OpenCV？有这个问题就说明你不知道 MacPorts 为啥是大神级的工具啦。MacPorts 是一个维护了 8300 多个（还在增长）开源软件的 port，它能够自动地帮你下载、安装、配置好一款软件。你所要做的仅仅是输入一条命令，这里，我们只需要输入：<br/>
<code>
sudo port install opencv
</code>
然后呢？然后就是漫长的等待，你可以去做其他事情，但请不要碰你的 Mac，Terminal 上会列出一串串下载列表，机器会比较热。<br/>
大约。。。一个多小时后，当 Terminal 里的提示符再次出现时，你的 OpenCV 就安装好了。当前 OpenCV 的最新版本是 2.3.1，但 MacPorts 的数据库里记住的版本还是 2.2，估计这里还有一个延时吧。</p>

<h2>XCode 中配置 OpenCV</h2>

<p>现在，你可以启动你的 XCode4 了。创建一个 CommandLine Tool 项目。在写程序之前，需要配置两个地方：<br/>
1、在左侧栏里的 Targets 栏目下，选择右侧窗口中的 “All”，这样可以显示所有选项；然后搜索 “Headers search path”，在这个里面添加 “opt/local/include”这个 OpenCV 的包含文件目录；<br/>
2、在左侧栏的 Project 栏目下，添加一个 New Group，随便起个名字，然后右击添加文件到这个 Group 中，在添加文件窗口中输入 “/” 弹出寻找目录窗口，输入 “/opt/local/lib”，打开 OpenCV 的库文件目录，选择一下几个文件： libopencv_ml.2.2.0.dylib, libopencv_highgui.2.2.0.dylib, libopencv_core.2.2.0.dylib，当然根据需要可以添加其他库文件。</p>

<p>这样，你就可以写一些简单的利用 OpenCV 的程序了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cmake 学习笔记1]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/15/cmake-xue-xi-bi-ji-1/"/>
    <updated>2013-02-15T09:28:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/15/cmake-xue-xi-bi-ji-1</id>
    <content type="html"><![CDATA[<p>原文链接：<a href="http://blog.csdn.net/dbzhang800/article/details/6314073">cmake 学习笔记(一)</a><br/>
最大的 Qt4 程序群 (KDE4) 采用 cmake 作为构建系统<br/>
Qt4 的 python 绑定 (pyside) 采用了 cmake 作为构建系统<br/>
开源的图像处理库 opencv 采用 cmake 作为构建系统...<br/>
看来不学习一下 cmake 是不行了，一点一点来吧，找个最简单的 C 程序，慢慢复杂化，试试看：</p>

<!-- more -->


<blockquote><p>例子一，单个源文件 main.c<br/>
例子二，分解成多个 main.c hello.h hello.c<br/>
例子三，先生成一个静态库，链接该库<br/>
例子四，将源文件放置到不同的目录<br/>
例子五，控制生成的程序和库所在的目录<br/>
例子六，使用动态库而不是静态库</p></blockquote>

<h2>例子一</h2>

<p>一个经典的C程序，如何用 cmake 来进行构建程序呢？<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>main.c  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello World!/n&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
编写一个 <code>CMakeLists.txt</code> 文件(可看做 cmake 的工程文件)：<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>CMakeLists.txt  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">project</span><span class="o">(</span><span class="n">HELLO</span><span class="o">)</span>
</span><span class='line'><span class="n">set</span><span class="o">(</span><span class="n">SRC_LIST</span> <span class="n">main</span><span class="o">.</span><span class="na">c</span><span class="o">)</span>
</span><span class='line'><span class="n">add_executable</span><span class="o">(</span><span class="n">hello</span> <span class="n">$</span><span class="o">{</span><span class="n">SRC_LIST</span><span class="o">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
然后，建立一个任意目录（比如本目录下创建一个 build 子目录），在该 build 目录下调用 cmake</p>

<p>注意：为了简单起见，我们从一开始就采用 cmake 的 out-of-source 方式来构建（即生成中间产物与源代码分离），并始终坚持这种方法，这也就是此处为什么单独创建一个目录，然后在该目录下执行 cmake 的原因<br/>
<code>
cmake .. -G"NMake Makefiles"
nmake
</code>
或者
<code>
cmake .. -G"MinGW Makefiles"
make
</code>
即可生成可执行程序 hello(.exe)<br/>
目录结构<br/>
<code>
+
|
+--- main.c
+--- CMakeList.txt
|
/--+ build/
   |
   +--- hello.exe
</code>
cmake 真的不太好用哈，使用 cmake 的过程，本身也就是一个编程的过程，只有多练才行。<br/>
我们先看看：前面提到的这些都是什么呢？</p>

<h3>CMakeLists.txt</h3>

<p>第一行 <strong>project</strong> 不是强制性的，但最好始终都加上。这一行会引入两个变量<br/>
<strong>HELLO_BINARY_DIR</strong> 和 <strong>HELLO_SOURCE_DIR</strong><br/>
同时，cmake 自动定义了两个等价的变量<br/>
<strong>PROJECT_BINARY_DIR</strong> 和 <strong>PROJECT_SOURCE_DIR</strong><br/>
因为是 out-of-source 方式构建，所以我们要时刻区分这两个变量对应的目录<br/>
可以通过 <strong>message</strong> 来输出变量的值
<code>
message(${PROJECT_SOURCE_DIR})
</code>
<strong>set</strong> 命令用来设置变量<br/>
<strong>add_exectuable</strong> 告诉工程生成一个可执行文件。<br/>
<strong>add_library</strong> 则告诉生成一个库文件。<br/>
注意：CMakeLists.txt 文件中，命令名字是不区分大小写的，而参数和变量是大小写相关的。</p>

<h3>cmake命令</h3>

<p>cmake 命令后跟一个路径(..)，用来指出 CMakeLists.txt 所在的位置。<br/>
由于系统中可能有多套构建环境，我们可以通过 <code>-G</code> 来制定生成哪种工程文件，通过 cmake -h 可得到详细信息。<br/>
要显示执行构建过程中详细的信息(比如为了得到更详细的出错信息)，可以在 CMakeLists.txt 内加入：
<code>
SET( CMAKE_VERBOSE_MAKEFILE on )
</code>
或者执行 make 时<br/>
<code>
$ make VERBOSE=1
</code>
或者<br/>
<code>
$ export VERBOSE=1
$ make
</code></p>

<h2>例子二</h2>

<p>一个源文件的例子一似乎没什么意思，拆成 3 个文件再试试看：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>hello.h  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifndef</span> <span class="n">DBZHANG_HELLO_</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">DBZHANG_HELLO_</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">hello</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">name</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span> <span class="c1">//DBZHANG_HELLO_&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>hello.c  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="s">&quot;hello.h&quot;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">hello</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">name</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">printf</span> <span class="p">(</span><span class="s">&quot;Hello %s!/n&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>main.c  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="s">&quot;hello.h&quot;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">hello</span><span class="p">(</span><span class="s">&quot;World&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
然后准备好 CMakeLists.txt 文件
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>CMakeLists.txt  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">project</span><span class="o">(</span><span class="n">HELLO</span><span class="o">)</span>
</span><span class='line'><span class="n">set</span><span class="o">(</span><span class="n">SRC_LIST</span> <span class="n">main</span><span class="o">.</span><span class="na">c</span> <span class="n">hello</span><span class="o">.</span><span class="na">c</span><span class="o">)</span>
</span><span class='line'><span class="n">add_executable</span><span class="o">(</span><span class="n">hello</span> <span class="n">$</span><span class="o">{</span><span class="n">SRC_LIST</span><span class="o">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
执行 cmake 的过程同上，目录结构<br/>
<code>
+
|
+--- main.c
+--- hello.h
+--- hello.c
+--- CMakeList.txt
|
/--+ build/
   |
   +--- hello.exe
</code>
例子很简单，没什么可说的。</p>

<h2>例子三</h2>

<p>接前面的例子，我们将 hello.c 生成一个库，然后再使用会怎么样？<br/>
改写一下前面的 CMakeLists.txt 文件 试试：<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>CMakeLists.txt  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">project</span><span class="o">(</span><span class="n">HELLO</span><span class="o">)</span>
</span><span class='line'><span class="n">set</span><span class="o">(</span><span class="n">LIB_SRC</span> <span class="n">hello</span><span class="o">.</span><span class="na">c</span><span class="o">)</span>
</span><span class='line'><span class="n">set</span><span class="o">(</span><span class="n">APP_SRC</span> <span class="n">main</span><span class="o">.</span><span class="na">c</span><span class="o">)</span>
</span><span class='line'><span class="n">add_library</span><span class="o">(</span><span class="n">libhello</span> <span class="n">$</span><span class="o">{</span><span class="n">LIB_SRC</span><span class="o">})</span>
</span><span class='line'><span class="n">add_executable</span><span class="o">(</span><span class="n">hello</span> <span class="n">$</span><span class="o">{</span><span class="n">APP_SRC</span><span class="o">})</span>
</span><span class='line'><span class="n">target_link_libraries</span><span class="o">(</span><span class="n">hello</span> <span class="n">libhello</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
和前面相比，我们添加了一个新的目标 libhello，并将其链接进 hello 程序</p>

<p>然后想前面一样，运行 cmake，得到
<code>
+
|
+--- main.c
+--- hello.h
+--- hello.c
+--- CMakeList.txt
|
/--+ build/
   |
   +--- hello.exe
   +--- libhello.lib
</code>
里面有一点不爽，对不？<br/>
因为我的可执行程序 (add_executable) 占据了 hello 这个名字，所以 add_library 就不能使用这个名字了<br/>
然后，我们去了个 libhello 的名字，这将导致生成的库为 libhello.lib (或 liblibhello.a)，很不爽<br/>
想生成 hello.lib(或 libhello.a) 怎么办?<br/>
添加一行<br/>
<code>
set_target_properties(libhello PROPERTIES OUTPUT_NAME "hello")  
</code>
就可以了</p>

<h2>例子四</h2>

<p>在前面，我们成功地使用了库，可是源代码放在同一个路径下，还是不太正规，怎么办呢？分开放呗<br/>
我们期待是这样一种结构<br/>
<code>
+
|
+--- CMakeList.txt
+--+ src/
|  |
|  +--- main.c
|  /--- CMakeList.txt
|
+--+ libhello/
|  |
|  +--- hello.h
|  +--- hello.c
|  /--- CMakeList.txt
|
/--+ build/
</code>
哇，现在需要 3 个 CMakeLists.txt 文件了，每个源文件目录都需要一个，还好，每一个都不是太复杂<br/>
顶层的 CMakeLists.txt 文件<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>CMakeLists.txt  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">project</span><span class="o">(</span><span class="n">HELLO</span><span class="o">)</span>
</span><span class='line'><span class="n">add_subdirectory</span><span class="o">(</span><span class="n">src</span><span class="o">)</span>
</span><span class='line'><span class="n">add_subdirectory</span><span class="o">(</span><span class="n">libhello</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
src 中的 CMakeLists.txt 文件<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>CMakeLists.txt  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">include_directories</span><span class="o">(</span><span class="n">$</span><span class="o">{</span><span class="n">PROJECT_SOURCE_DIR</span><span class="o">}/</span><span class="n">libhello</span><span class="o">)</span>
</span><span class='line'><span class="n">set</span><span class="o">(</span><span class="n">APP_SRC</span> <span class="n">main</span><span class="o">.</span><span class="na">c</span><span class="o">)</span>
</span><span class='line'><span class="n">add_executable</span><span class="o">(</span><span class="n">hello</span> <span class="n">$</span><span class="o">{</span><span class="n">APP_SRC</span><span class="o">})</span>
</span><span class='line'><span class="n">target_link_libraries</span><span class="o">(</span><span class="n">hello</span> <span class="n">libhello</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
libhello 中的 CMakeLists.txt 文件<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>CMakeLists.txt  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">set</span><span class="o">(</span><span class="n">LIB_SRC</span> <span class="n">hello</span><span class="o">.</span><span class="na">c</span><span class="o">)</span>
</span><span class='line'><span class="n">add_library</span><span class="o">(</span><span class="n">libhello</span> <span class="n">$</span><span class="o">{</span><span class="n">LIB_SRC</span><span class="o">})</span>
</span><span class='line'><span class="n">set_target_properties</span><span class="o">(</span><span class="n">libhello</span> <span class="n">PROPERTIES</span> <span class="n">OUTPUT_NAME</span> <span class="s">&quot;hello&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
恩，和前面一样，建立一个 build 目录，在其内运行 cmake，然后可以得到<br/>
<code>
build/src/hello.exe
build/libhello/hello.lib
</code>
回头看看，这次多了点什么，顶层的 CMakeLists.txt 文件中使用 <strong>add_subdirectory</strong> 告诉 cmake 去子目录寻找新的 CMakeLists.txt 子文件<br/>
在 src 的 CMakeLists.txt 文件中，新增加了 <strong>include_directories</strong>，用来指明头文件所在的路径。</p>

<h2>例子五</h2>

<p>前面还是有一点不爽：如果想让可执行文件在 bin 目录，库文件在 lib 目录怎么办？<br/>
就像下面显示的一样：<br/>
<code>
+ build/
|
+--+ bin/
|  |
|  /--- hello.exe
|
/--+ lib/
   |
   /--- hello.lib
</code>
一种办法：修改顶级的 CMakeLists.txt 文件
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>CMakeLists.txt  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">project</span><span class="o">(</span><span class="n">HELLO</span><span class="o">)</span>
</span><span class='line'><span class="n">add_subdirectory</span><span class="o">(</span><span class="n">src</span> <span class="n">bin</span><span class="o">)</span>
</span><span class='line'><span class="n">add_subdirectory</span><span class="o">(</span><span class="n">libhello</span> <span class="n">lib</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
不是 build 中的目录默认和源代码中结构一样么，我们可以指定其对应的目录在 build 中的名字。<br/>
这样一来：build/src 就成了 build/bin 了，可是除了 hello.exe，中间产物也进来了。还不是我们最想要的。<br/>
另一种方法：不修改顶级的文件，修改其他两个文件<br/>
src/CMakeLists.txt 文件
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>CMakeLists.txt  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">include_directories</span><span class="o">(</span><span class="n">$</span><span class="o">{</span><span class="n">PROJECT_SOURCE_DIR</span><span class="o">}/</span><span class="n">libhello</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">link_directories</span><span class="o">(</span><span class="n">$</span><span class="o">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="o">}/</span><span class="n">lib</span><span class="o">)&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">set</span><span class="o">(</span><span class="n">APP_SRC</span> <span class="n">main</span><span class="o">.</span><span class="na">c</span><span class="o">)</span>
</span><span class='line'><span class="n">set</span><span class="o">(</span><span class="n">EXECUTABLE_OUTPUT_PATH</span> <span class="n">$</span><span class="o">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="o">}/</span><span class="n">bin</span><span class="o">)</span>
</span><span class='line'><span class="n">add_executable</span><span class="o">(</span><span class="n">hello</span> <span class="n">$</span><span class="o">{</span><span class="n">APP_SRC</span><span class="o">})</span>
</span><span class='line'><span class="n">target_link_libraries</span><span class="o">(</span><span class="n">hello</span> <span class="n">libhello</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
libhello/CMakeLists.txt 文件
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>CMakeLists.txt  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">set</span><span class="o">(</span><span class="n">LIB_SRC</span> <span class="n">hello</span><span class="o">.</span><span class="na">c</span><span class="o">)</span>
</span><span class='line'><span class="n">add_library</span><span class="o">(</span><span class="n">libhello</span> <span class="n">$</span><span class="o">{</span><span class="n">LIB_SRC</span><span class="o">})</span>
</span><span class='line'><span class="n">set</span><span class="o">(</span><span class="n">LIBRARY_OUTPUT_PATH</span> <span class="n">$</span><span class="o">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="o">}/</span><span class="n">lib</span><span class="o">)</span>
</span><span class='line'><span class="n">set_target_properties</span><span class="o">(</span><span class="n">libhello</span> <span class="n">PROPERTIES</span> <span class="n">OUTPUT_NAME</span> <span class="s">&quot;hello&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>例子六</h2>

<p>在例子三至五中，我们始终用的静态库，那么用动态库应该更酷一点吧。试着写一下<br/>
如果不考虑 windows 下，这个例子应该是很简单的，只需要在上个例子的 libhello/CMakeLists.txt 文件中的 <strong>add_library</strong> 命令中加入一个 <strong>SHARED</strong> 参数：<br/>
<code>
add_library(libhello SHARED ${LIB_SRC})
</code>
可是，我们既然用 cmake 了，还是兼顾不同的平台吧，于是，事情有点复杂：
修改 hello.h 文件
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>hello.h  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifndef</span> <span class="n">DBZHANG_HELLO_</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">DBZHANG_HELLO_</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">defined</span> <span class="n">_WIN32</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">#</span><span class="k">if</span> <span class="n">LIBHELLO_BUILD</span>
</span><span class='line'>    <span class="err">#</span><span class="n">define</span> <span class="n">LIBHELLO_API</span> <span class="kr">__declspec</span><span class="p">(</span><span class="n">dllexport</span><span class="p">)</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>    <span class="err">#</span><span class="n">define</span> <span class="n">LIBHELLO_API</span> <span class="kr">__declspec</span><span class="p">(</span><span class="n">dllimport</span><span class="p">)</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">else</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">#</span><span class="n">define</span> <span class="n">LIBHELLO_API</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">LIBHELLO_API</span> <span class="kt">void</span> <span class="n">hello</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">name</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span> <span class="c1">//DBZHANG_HELLO_&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
修改 libhello/CMakeLists.txt 文件<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>CMakeLists.txt  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">set</span><span class="o">(</span><span class="n">LIB_SRC</span> <span class="n">hello</span><span class="o">.</span><span class="na">c</span><span class="o">)</span>
</span><span class='line'><span class="n">add_definitions</span><span class="o">(</span><span class="s">&quot;-DLIBHELLO_BUILD&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">add_library</span><span class="o">(</span><span class="n">libhello</span> <span class="n">SHARED</span> <span class="n">$</span><span class="o">{</span><span class="n">LIB_SRC</span><span class="o">})</span>
</span><span class='line'><span class="n">set</span><span class="o">(</span><span class="n">LIBRARY_OUTPUT_PATH</span> <span class="n">$</span><span class="o">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="o">}/</span><span class="n">lib</span><span class="o">)</span>
</span><span class='line'><span class="n">set_target_properties</span><span class="o">(</span><span class="n">libhello</span> <span class="n">PROPERTIES</span> <span class="n">OUTPUT_NAME</span> <span class="s">&quot;hello&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
恩，剩下来的工作就和原来一样了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with JNI and C++ on OSX Lion]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/11/getting-started-with-jni-and-c-plus-plus-on-osx-lion/"/>
    <updated>2013-02-11T15:19:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/11/getting-started-with-jni-and-c-plus-plus-on-osx-lion</id>
    <content type="html"><![CDATA[<p>原文链接：<br/>
<a href="http://mrjoelkemp.com/2012/01/getting-started-with-jni-and-c-on-osx-lion/">Getting Started with JNI and C++ on OSX Lion</a></p>

<!-- more -->


<p>由 <strong>HelloWorld.cpp</strong> 生成 <strong>HelloWorld.o</strong> 的命令<br/>
<code>
g++ "-I/System/Library/Frameworks/JavaVM.framework/Versions/A/Headers" -c HelloWorld.cpp
</code>
有 <strong>HelloWorld.o</strong> 生成 <strong>libhelloworld.jnilib</strong> 的命令<br/>
<code>
g++ -dynamiclib -o libhelloworld.jnilib HelloWorld.o
</code>
获取作为 <strong>java.library.path</strong> 的几个目录的路径<br/>
<code>
System.out.println(System.getProperty("java.library.path"));
</code>
还可以在执行时将 <strong>jnilib</strong> 所在路径的作为参数传递进去(假如 <strong>HelloWorld.jnilib</strong> 在桌面上)<br/>
<code>
java -Djava.library.path=/Users/user/Desktop HelloWorld
</code></p>

<h2>以下为英文原文</h2>

<p>This tutorial combines a few key ideas to getting started with a Hello World program using the Java Native Interface (JNI) on Mac OSX. JNI allows Java code to utilize C++ code (i.e., native code).</p>

<p>This technology is very important if you want to do any computationally intensive operations (games, video processing, audio processing, etc) in mobile (Android) apps or your everyday Java applications.<br/>
The important point to this article is that most tutorials only talk about compilation for Windows and Solaris machines — I will focus exclusively on OSX. Knowing these subtleties can save you a lot of time and headaches!</p>

<h3>Creating the Java Class</h3>

<p>Let’s start by creating a very simple Hello World program!<br/>
In a file <strong>HelloWorld.java</strong><br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>HelloWorld.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">native</span> <span class="kt">void</span> <span class="n">print</span><span class="o">();</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">HelloWorld</span><span class="o">().</span><span class="na">print</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">loadLibrary</span><span class="o">(</span><span class="s">&quot;HelloWorld&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
The above code details a simple Java class that has a very important native method <strong>print()</strong>. The fact that this method is native signifies that it should be implemented in C++. We’ll get to that implementation in a bit.<br/>
The static section gets executed first, which expects to load a JNI shared or dynamic library known as HelloWorld.</p>

<h3>Compiling the Java Class</h3>

<p>Compiling the newly created HelloWorld class involves opening up the terminal and issuing the command:<br/>
<code>  
javac HelloWorld.java  
</code><br/>
We use the javac command to generate the class file that is needed to generate the appropriate JNI C++ classes. You can’t skip the generation of the class file!<br/>
To create the JNI C++ files, you can just type the following command into the terminal:<br/>
<code>  
javah -jni HelloWorld  
</code><br/>
The above command will generate the following header file:<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>HelloWorld.h  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">DO</span> <span class="n">NOT</span> <span class="n">EDIT</span> <span class="n">THIS</span> <span class="n">FILE</span> <span class="o">-</span> <span class="n">it</span> <span class="n">is</span> <span class="n">machine</span> <span class="n">generated</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">jni</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Header</span> <span class="k">for</span> <span class="k">class</span> <span class="nc">HelloWorld</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifndef</span> <span class="n">_Included_HelloWorld</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">_Included_HelloWorld</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifdef</span> <span class="n">__cplusplus</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'> <span class="o">*</span> <span class="nl">Class:</span>     <span class="n">HelloWorld</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'> <span class="o">*</span> <span class="nl">Method:</span>    <span class="n">print</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'> <span class="o">*</span> <span class="nl">Signature:</span> <span class="p">()</span><span class="n">V</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span> <span class="n">Java_HelloWorld_print</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifdef</span> <span class="n">__cplusplus</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
This file contains a lot of seemingly obscure boiler-plate specific to JNI. The part we care about is the definition of the print() function that was declared to be native in the HelloWorld.java file.<br/>
By convention, native functions will be named “Java<em>” followed by the class name “HelloWorld</em>” and the function name “print”. Thus, we obtain the native function: Java_HelloWorld_print().<br/>
Let’s write an implementation file to define the behavior of the Java_HelloWorld_print() function.<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>HelloWorld.cpp  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">jni</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">iostream</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="s">&quot;HelloWorld.h&quot;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span> <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">Java_HelloWorld_print</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">){</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;Oh JNI, how cumbersome you are!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
The implementation of the native function simply prints out a literal string.</p>

<h3>Compiling the C++ Code</h3>

<p>To include the native code in the compilation of the Java program, we need to compile our native C++ code into a dynamic library. On OSX, JNI shared/dynamic libraries have the extension <strong>.jnilib</strong>. This is a huge difference from the extensions on Windows and Solaris machines: <strong>.dll</strong> and <strong>.so</strong>, respectively.<br/>
Before we get to the command, there’s a big problem: your compiler (g++) will need to know the location of the jni.h library. You don’t get this linking for free, so you have to specify the location of the header file within the compilation command.<br/>
The locations of the the jni.h library that need to be included are:<br/>
<code>  
"-I/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Headers"  
"-I/Developer/SDKs/MacOSX10.6.sdk/System/Library/Frameworks/JavaVM.framework/Versions/A/Headers"  
</code><br/>
Unfortunately, leaving off either of these results in the compiler error:<br/>
HelloWorld.cpp:1:17: error: jni.h: No such file or directory<br/>
In your terminal, issue the command (all part of a single command):<br/>
<code>  
g++ "-I/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Headers" "-I/Developer/SDKs/MacOSX10.6.sdk/System/Library/Frameworks/JavaVM.framework/Versions/A/Headers" -c HelloWorld.cpp  
</code><br/>
Notice that we include the -c option to generate the object file for our native code: <strong>HelloWorld.o</strong>. We also include the implementation file for our native class: <strong>HelloWorld.cpp</strong>.<br/>
The final step for compiling the native source is to issue the command:<br/>
<code>  
g++ -dynamiclib -o libhelloworld.jnilib HelloWorld.o  
</code><br/>
This command uses the dynamiclib option to specify that the compiler shouldn’t produce a standard executable, but should produce a library. The -o option is used to name the library with the appropriate extension: <strong>libhelloworld.jnilib</strong>. We also include the object file generated in the previous step.<br/>
The result of this process is the compiled library <strong>libhelloworld.jnilib</strong>.</p>

<h3>Compiling the Native Library and Java Program</h3>

<p>The final piece to this painstaking puzzle is to connect all of the pieces! We’re going to finally compile our Java program which will look for the jnilib library containing our compiled native code.<br/>
In your terminal, issue the following command:<br/>
java HelloWorld<br/>
This will compile and run our HelloWorld program and display the output:<br/>
Oh JNI, how cumbersome you are!</p>

<h3>One final note</h3>

<p>If you see the error:<br/>
<code>  
Exception in thread "main" java.lang.UnsatisfiedLinkError: no HelloWorld in java.library.path  
at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1758)  
at java.lang.Runtime.loadLibrary0(Runtime.java:823)  
at java.lang.System.loadLibrary(System.java:1045)  
at HelloWorld.(HelloWorld.java:7)  
</code><br/>
Then you’ve mistakenly used a different shared/dynamic library extension than the necessary .jnilib! This is the root of all evil in this exercise!<br/>
Happy coding!<br/>
This tutorial is based on the JNI tutorial provided by Sun.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多边形顶点按逆时针排列算法]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/02/duo-bian-xing-ding-dian-an-ni-shi-zhen-pai-lie-suan-fa/"/>
    <updated>2013-02-02T15:12:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/02/duo-bian-xing-ding-dian-an-ni-shi-zhen-pai-lie-suan-fa</id>
    <content type="html"><![CDATA[<p>原文链接：<br/>
<a href="http://www.myexception.cn/program/776883.html">http://www.myexception.cn/program/776883.html</a></p>

<!-- more -->


<p>``` cpp
const double eps = 1e-8;
int sign(double d){</p>

<pre><code>return d &lt; -eps ? -1 : (d &gt; eps);
</code></pre>

<p>}</p>

<p>// 多边形类
struct poly{</p>

<pre><code>static const int N = 1005; // 点数的最大值
point ps[N + 5]; // 逆时针存储多边形的点，[0, pn - 1] 存储点
int pn;  // 点数

poly() {
    pn = 0;
}

// 加进一个点 
void push(point tp){
    ps[pn ++] = tp;
}

// 第k个位置
int trim(int k){
    return (k + pn) % pn;
}

void clear() {
    pn = 0;
}
</code></pre>

<p>};</p>

<p>// 多边形 org 的有向面积
double signArea(poly org){</p>

<pre><code>int i, g;
double ans;
point* ps = org.ps;
for (ans = i = 0; i &lt; org.pn; i ++) {
    g = org.trim(i + 1);
    ans += (ps[g].y * ps[i].x - ps[g].x * ps[i].y);
}
return ans / 2.0;
</code></pre>

<p>}</p>

<p>// 如果 org 的点是逆时针的，则调整为逆时针的
void makeAntclockwise(poly&amp; org) {</p>

<pre><code>if (sign(signArea(org)) &lt; 0) {
    reverse(org.ps, org.ps + org.pn);
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
