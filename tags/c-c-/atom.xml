<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: C/C++ | yang3wei的专栏]]></title>
  <link href="http://yang3wei.github.com/tags/c-c-/atom.xml" rel="self"/>
  <link href="http://yang3wei.github.com/"/>
  <updated>2013-02-03T15:03:00+08:00</updated>
  <id>http://yang3wei.github.com/</id>
  <author>
    <name><![CDATA[yang3wei]]></name>
    <email><![CDATA[88480585@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[多边形顶点按逆时针排列算法]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/02/duo-bian-xing-ding-dian-an-ni-shi-zhen-pai-lie-suan-fa/"/>
    <updated>2013-02-02T15:12:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/02/duo-bian-xing-ding-dian-an-ni-shi-zhen-pai-lie-suan-fa</id>
    <content type="html"><![CDATA[<p>原文链接：<br/>
<a href="http://www.myexception.cn/program/776883.html">http://www.myexception.cn/program/776883.html</a></p>

<!-- more -->


<pre><code>const double eps = 1e-8;
int sign(double d){
    return d < -eps ? -1 : (d > eps);
}

// 多边形类
struct poly{
    static const int N = 1005; // 点数的最大值
    point ps[N + 5]; // 逆时针存储多边形的点，[0, pn - 1] 存储点
    int pn;  // 点数

    poly() {
        pn = 0;
    }

    // 加进一个点 
    void push(point tp){
        ps[pn ++] = tp;
    }

    // 第k个位置
    int trim(int k){
        return (k + pn) % pn;
    }

    void clear() {
        pn = 0;
    }
};

// 多边形 org 的有向面积
double signArea(poly org){
    int i, g;
    double ans;
    point* ps = org.ps;
    for (ans = i = 0; i < org.pn; i ++) {
        g = org.trim(i + 1);
        ans += (ps[g].y * ps[i].x - ps[g].x * ps[i].y);
    }
    return ans / 2.0;
}

// 如果 org 的点是逆时针的，则调整为逆时针的
void makeAntclockwise(poly& org) {
    if (sign(signArea(org)) < 0) {
        reverse(org.ps, org.ps + org.pn);
    }
}
</code></pre>

]]></content>
  </entry>
  
</feed>
