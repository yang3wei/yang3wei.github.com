<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: mac | yang3wei的专栏]]></title>
  <link href="http://yang3wei.github.com/tags/mac/atom.xml" rel="self"/>
  <link href="http://yang3wei.github.com/"/>
  <updated>2013-02-09T02:41:40+08:00</updated>
  <id>http://yang3wei.github.com/</id>
  <author>
    <name><![CDATA[yang3wei]]></name>
    <email><![CDATA[88480585@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[为 Eclipse for Mac 新增 Show in Finder 的功能]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/08/wei-eclipse-for-mac-xin-zeng-show-in-finder-de-gong-neng/"/>
    <updated>2013-02-08T22:47:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/08/wei-eclipse-for-mac-xin-zeng-show-in-finder-de-gong-neng</id>
    <content type="html"><![CDATA[<p>相信各位使用 Mac OS 作为开发平台的同僚都遇到过如下的问题：<br/>
想在 Finder 中显示 eclipse 工程中的某个文件，挺不容易的！<br/>
不知道其他人是怎么弄的，这里说一下我是怎么弄的吧：</p>

<!-- more -->


<p><strong>1.在工程视图里选中要在 Finder 中显示的文件</strong><br/>
<strong>2.在弹出的右键菜单中选择 Properties</strong><br/>
<strong>3.复制该文件父目录的绝对路径</strong><br/>
<strong>4.打开 Finder</strong><br/>
<strong>5.Command + Shift + G 弹出快速前往的对话框</strong><br/>
<strong>6.在路径输入框中粘贴之前复制的父目录绝对路径</strong><br/>
<strong>7.回车前往目标文件所在的父目录</strong><br/>
<strong>8.手动在 Finder 的父目录中定位目标文件</strong></p>

<p>不是很难，但由上面的步骤可以看出，操作起来还是挺麻烦的。<br/>
一次两次可能还不觉得，但如果是经常要执行类似的操作就很烦了~<br/>
我就一直在为这个问题而感到烦恼！如何来终结这种不利的境况？</p>

<h2>这里介绍一个解决方案</h2>

<p>为 eclipse 扩展一个自定义的功能！<br/>
<strong>原理很简单，就是以命令行的方式来调用外部的可执行文件来满足自己的需求。</strong></p>

<p>再对上面的需求做一下总结吧：<br/>
不就是要在 Finder（Mac OS）或者 Explorer（Windows）里面定位出某个文件么，<br/>
从编写程序的角度来看，文件的绝对路径都能拿到了，定位到该文件还有什么好难的？</p>

<p>摸索过程中我找到了一篇很有用的资料：<br/>
<a href="http://stackoverflow.com/questions/1161240/in-eclipse-reveal-current-file-in-filesystem">In eclipse, reveal current file in filesystem</a></p>

<p>浓缩的精华：<br/>
<strong>You can also develop your own external tool to open the file in a Windows explorer</strong><br/>
<img class="center" src="/images/posts/meaningful.gif"></p>

<p>到这里就算是有头绪了，如图所示：<br/>
仅需对上图中针对 <code>Windows</code> 的配置做更改，适配到 <code>Mac</code> 平台就行了。<br/>
其实很简单，改几个地方就 ok 了：<br/>
第一个是 <code>Name</code>，改成你喜欢的名字吧，比如说：<code>show in finder</code><br/>
第二个是 <code>Location</code>，改成要调用的外部可执行文件的完整路径即可，如：<code>/usr/bin/open</code><br/>
第三个是 <code>Arguments</code>，涵义是要给外部可执行文件传入的参数。<br/>
这里可以再次借助 eclipse 提供的功能来简化我们所要做的操作：<br/>
${resource_loc} 可以拿到当前所选择文件的绝对路径；<br/>
${container_loc} 可以拿到当前所选择文件父目录的绝对路径。<br/>
<img class="center" src="/images/posts/external_tools_configurations.png">
<img class="center" src="/images/posts/external_tools_configring.png">
<code>/usr/bin/open</code> 是 <code>Mac</code> 的内置命令，<br/>
<code>open</code> 命令带 <code>-R</code> 参数表示在 <code>Finder</code> 中呈现出目标文件，<br/>
（注：不带 <code>-R</code> 参数的话就会选择相关联的程序来打开该文件）<br/>
这样一来的话，就算是大功告成了~</p>

<h2>如何来执行这个扩展出来的功能呢？</h2>

<p>也很简单，不过先要将名为 <code>show in finder</code> 的扩展功能设置为 <code>favourite</code>：<br/>
在 <code>Organize Favourites...</code> 里面 <code>add</code> 一下即可！<br/>
<img class="center" src="/images/posts/set_as_favourite.png">
接下来就开始享受便利的生活吧：<br/>
首先，选择要在 <code>Finder</code> 中显示的目标文件，<br/>
然后，按一下工具栏 <code>Run</code> 按钮右边和 <code>Run</code> 按钮长的比较像的那个按钮。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 下的 tree 命令]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/08/mac-xia-de-tree-ming-ling/"/>
    <updated>2013-02-08T17:19:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/08/mac-xia-de-tree-ming-ling</id>
    <content type="html"><![CDATA[<p>在默认安装安装的 <code>mac</code> 下没有找到 <code>tree</code> 命令，找了一下原来有个比较流氓的解决办法：</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find . -print | sed -e 's;[&lt;sup>/]*/;|&lt;strong>&lt;strong>;g;s;&lt;/strong>&lt;/strong>|;&lt;/sup> |;g'</span></code></pre></td></tr></table></div></figure></notextile></div>
这个命令行跑起来类似平常<code>tree</code>的效果，比如： <br/>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.
</span><span class='line'>|&lt;strong>&lt;strong>extra
</span><span class='line'>| |&lt;/strong>&lt;/strong>httpd-autoindex.conf
</span><span class='line'>| |&lt;strong>&lt;strong>httpd-dav.conf
</span><span class='line'>| |&lt;/strong>&lt;/strong>httpd-default.conf
</span><span class='line'>| |&lt;strong>&lt;strong>httpd-info.conf
</span><span class='line'>| |&lt;/strong>&lt;/strong>httpd-languages.conf
</span><span class='line'>| |&lt;strong>&lt;strong>httpd-manual.conf
</span><span class='line'>| |&lt;/strong>&lt;/strong>httpd-mpm.conf
</span><span class='line'>| |&lt;strong>&lt;strong>httpd-multilang-errordoc.conf
</span><span class='line'>| |&lt;/strong>&lt;/strong>httpd-ssl.conf
</span><span class='line'>| |&lt;strong>&lt;strong>httpd-userdir.conf
</span><span class='line'>| |&lt;/strong>&lt;/strong>httpd-vhosts.conf
</span><span class='line'>|&lt;strong>&lt;strong>httpd.conf
</span><span class='line'>|&lt;/strong>&lt;/strong>magic
</span><span class='line'>|&lt;strong>&lt;strong>mime.types
</span><span class='line'>|&lt;/strong>&lt;/strong>original
</span><span class='line'>| |&lt;strong>&lt;strong>extra
</span><span class='line'>| | |&lt;/strong>&lt;/strong>httpd-autoindex.conf
</span><span class='line'>| | |&lt;strong>&lt;strong>httpd-dav.conf
</span><span class='line'>| | |&lt;/strong>&lt;/strong>httpd-default.conf
</span><span class='line'>| | |&lt;strong>&lt;strong>httpd-info.conf
</span><span class='line'>| | |&lt;/strong>&lt;/strong>httpd-languages.conf
</span><span class='line'>| | |&lt;strong>&lt;strong>httpd-manual.conf
</span><span class='line'>| | |&lt;/strong>&lt;/strong>httpd-mpm.conf
</span><span class='line'>| | |&lt;strong>&lt;strong>httpd-multilang-errordoc.conf
</span><span class='line'>| | |&lt;/strong>&lt;/strong>httpd-ssl.conf
</span><span class='line'>| | |&lt;strong>&lt;strong>httpd-userdir.conf
</span><span class='line'>| | |&lt;/strong>&lt;/strong>httpd-vhosts.conf
</span><span class='line'>| |&lt;strong>&lt;strong>httpd.conf
</span><span class='line'>|&lt;/strong>&lt;/strong>other
</span><span class='line'>| |&lt;strong>&lt;strong>bonjour.conf
</span><span class='line'>| |&lt;/strong>&lt;/strong>php5.conf
</span><span class='line'>|____users</span></code></pre></td></tr></table></div></figure></notextile></div>
写一个alias到~/.bash_profile里，就更方便了:<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias tree="find . -print | sed -e 's;[&lt;sup>/]*/;|&lt;strong>&lt;strong>;g;s;&lt;/strong>&lt;/strong>|;&lt;/sup> |;g'"</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Update</h3>

<p>现在正在用的是 <code>homebrew</code> 安装的 <code>tree</code> 命令行。<br/>
<code>
brew install tree
</code>
作者: Volcano 发表于November 22, 2010 at 8:34 pm<br/>
版权信息: 可以任意转载, 转载时请务必以超链接形式标明文章原始出处和作者信息及此声明<br/>
永久链接 - <a href="http://www.ooso.net/archives/564">http://www.ooso.net/archives/564</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[主板放电之后 mac 无法正常启动之谜]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/08/zhu-ban-fang-dian-zhi-hou-mac-wu-fa-zheng-chang-qi-dong-zhi-mi/"/>
    <updated>2013-02-08T01:16:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/08/zhu-ban-fang-dian-zhi-hou-mac-wu-fa-zheng-chang-qi-dong-zhi-mi</id>
    <content type="html"><![CDATA[<p>前段时间，在插上带 tf 卡的读卡器的情况下打开了我的 mac 主机，之后我便陷入了一连串的麻烦之中~</p>

<!-- more -->


<p>平时开机都是很正常的，这次却意外的在屏幕上显示出了黑底白字的一串英文：
reboot and select proper boot device.
大意也就是叫我选择一个可以被启动的设备来重启。
我也按照文字提示做了，我拔掉了插入 tf 卡的读卡器，然后就重启了。
可即便如此，重启了以后还是之前的老样子，依然给我打印出那段文字。
就这么的搞了几次，弄得我有些心烦了，于是便拆开主机箱果断地给主板放放电，让它领教一下我的厉害。。
可我就是没想到因为这么草率的一个举动，就让我白白忙活了好几天，直到今天下午才把系统给修复回来。
说说当时的情况吧，放电了以后我匆匆忙忙地就盖好了机箱盖儿重启了，
可我等来的不是用户登陆界面，而是无止尽的白色背景缺苹果。。
后来我终于还是妥协了，我不再进主分区的系统了，我试着看能不能进入恢复分区的系统
（这个分区里面也有一个 mac 系统，用来做主分区 mac 系统的修复用~）
可是在我试了几次过后，还是失望了，主分区和恢复分区里面的两个 mac 系统竟然都进不去了~</p>

<p>分析一番后我怀疑是放电过后 bios 设置被还原回初始状态了，否则再怎么出问题，恢复分区里的 mac 也没理由进不去的。
同事们也给我支招，说要把 bios 里面的 ahci 选项给开启，于是我便跑到 bios 设置里面找啊找，
找了很久几乎都把 ami 的 bios 设置翻了个遍，还是没能找到带 ahci 字样的相关选项。
这之后我便进入了很长一段时间的摸索阶段，偶然在网上看到有人说有些主板默认就是开启了 ahci 选项的，即便找不到它。。。。
查阅资料了好一段时光我才获悉这完全就是误导！！！
首先我查的是 ami 的 bios 怎么开启 ahci ，找到了有用的资料，然后我知道是在南桥芯片的设置里面的。
因为我在 bios 里面鼓捣了很久，印象中南桥芯片的设置里面压根就没看到有设置 ahci 的那个选项。。
经过刻苦的搜索，我又获得了一些有用的讯息：
1。与 ahci 设置相关的封装在南桥芯片里面的硬件名叫 ich7 什么的
（有 ich5，ich6，ich7，ich7r，ich8，等等）
2。并不是所有的 ich 都支持 ahci，包括 ich5，ich6，ich7 就不支持 ahci
3。我查阅了我所使用硬盘的参数，发现我的南桥里面正是使用的 ich7
综上所述，我的南桥芯片设置里面找不到 ahci 相关的设置就不奇怪了，因为在里面的 ich7 压根儿就不支持 ahci 的功能啊~</p>

<p>好吧，既然不支持，那怎么才能让他支持起  ahci 模式来呢？
mac os x lion 跑起来必须要  ahci 的支持，而我的机器在正常运作的时候确实是能够运行 lion 系统的，
那么我就推断出一定是有方法能够让主板提供对 ahci 的支持的。。。
然后又是漫长的搜索了，功夫不负有心人，我找到了一个叫天缘的博客，
里面介绍了一种安装 ahci 驱动的法子，当时很开心满以为找到解决方法了，
可后来操作实施的时候却碰到了问题， 那个 ahci 驱动根本就不能装到 ich 7 里面，
原因是这样的，天缘介绍的方法有一个替换文本的操作，替换的文本就是  ich 的设备编号，可是我找不到 ich7 的编号。。
之后我又仔仔细细地看了一遍天缘写的那篇文章，它里面确实提到那种安装 ahci 驱动的方法是不能应用与 ich 7 的。
就这样我又空欢喜了一场，再次回到不知所措的状态。。。</p>

<p>转机是这么来的，之前和卖给我 mac 机器的技术支持人员交流了一下，
当时并没有将这个问题给解决下来，他的建议是叫我交 150 块钱重装系统
我挺犹豫的，有如下几个原因：
1。路途遥远，机器运来运去的，麻烦不说，还容易损坏，而且我也没有邮寄主机箱的经历。
2。150块钱安装费也不是一个小数字，还是有些不舍，话说我自己如果能解决这个问题的话，不仅能省钱还能学到东西。
3。盘里面的数据安全问题，我并不希望数据毁掉或者泄露掉~
正是由于上述的几个原因，我并没有按照客服技术人员说的去做~
但是后来我折腾了两日实在没耐性弄下去了，于是我想到客服的员工不仅仅只有那一位，
还有一个最大的老板在里面，而且他的旺旺一般都是在线的，何不去试试手气呢？
老板就是老板，霸气，没有客服打杂工的那种市侩，而且我自己也摸索了很长一段时间，
一针见血的就提出了自己的推测 —— 断电后 bios 里面的某个设置被弄错了，导致无法正常进入主分区和恢复分区的 mac 系统~
老板的实力刚刚的，第二句话就给出了我解决方案 —— 在 bios 设置里面将 USB 设置的 high-speed 改为 full-speed，
当时还觉得挺奇怪的，mac 不能正常启动和 usb 设置有半毛钱的关系么？
不过虽然觉得奇怪，我还是照老板说的做了，三下五除二连接好我的 mac 机器，进入 bios 设置将 USB 选项更改了一下，
完了以后重启电脑，口中不断地默念“God bless me!”，神奇的一幕出现了，我心爱的 mac 终于回复了正常。。
那一刻我简直是激动地热泪盈眶，终于弄好了，终于可以干事了，简直是太好了~</p>

<p>虽然系统正常的恢复了过来，但是作为一次惨痛的经历，这无时无刻不提醒着我，
一定要知之为知之，方能在以后再次碰到此类问题的时候不手忙脚乱~
第一个疑问便是—— 难道不启动主板的 ahci 选项也能正常跑起  mac lion 来？
结合我之前修复系统的过程中所查阅的一些资料来思考一番，我觉得可能存在如下的一中可能：
即便主板上没有设置 ahci 的选项，即便在没有 ahci 选项的情况下默认不是 ahci 模式，
也可以通过高层操作系统中的驱动支持来弥补这块空缺！
我是有依据的，因为之前我在 csdn 的下载频道里面看到过类似，“黑苹果 + 免 ahci 驱动” 的资源~
我还下载了一个看了一看，其实就是一个 kext 结尾的 mac os 驱动文件，名为 AppleIntelIPIIXATA.kext、ATAPortInjector.kext
然后我猜想我的黑苹果扩展驱动目录中也应该存在这些驱动文件。
奇怪的是我没有找到这些驱动文件，但是通过我所查找到的资料，也有提到还存在其他的驱动文件是提供 ahci 弥补功能的，
诸如
  PC 上安装Mac OS X(四)——安装雪豹
 这篇资料中所提到的：IOAHCIBlockStorageinjector.kext 和 AppleAHCIPort.kext
这两个文件也是起到弥补 ahci 设置缺失的功能的
看到这里时我又跑到 mac 系统的扩展驱动目录（SLE——/System/Library/Extensions、EE——/Extras/Extensions）
里面找了一下，这次总算是有所斩获了 ——
在 SLE 目录下我找到了 AppleAHCIPort.kext 文件，
在 EE 目录下我找到了 IOAHCIBlockStorageinjector.kext 文件，
很吻合上面那篇资料里面所说到的情形，作者果然还是所言非虚啊~</p>

<p>下面手打 360doc 里面自己觉得有价值的一段文字：
导致五国的原因有很多很多，比如“你的 cpu 不支持64位和 sss3 指令集” 或者某个 kext 冲突之类的。
如果是前者，问题还算好解决。只要在 bootThink 图形界面中按 f8，输入 -x32 启动即可；
另外，对于某些只支持32位的 kext 也要使用这种方式来启动；
还有，也可以键入 cpus = 1（强制多核 cpu 使用单核）试试可不可以启动。
如果是后者，我们就要输入 -v 启动啰唆模式（Verbose）来看看问题出在哪里了。
举个粒子，输入 -v 启动之后会出现一大堆的 代码，暂时不去管他，最后他会停止在某处。
找到  panic 这个词，我们可以在这下面看到问题所在 。panic 原本是 恐慌的意思，
在这里表示系统遇到致命错误。假设错误代码如下面所示，我们就知道问题处在 AppleIntelCPUPowerManagement，
查询一些资料就知道只要安装 NullCPUPowerManagement.kext 即可解决问题。
依次类推，其他问题也可以按照这个思路下去。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[沉溺于 Mac，沉溺于 XCode]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/08/chen-ni-yu-mac-chen-ni-yu-xcode/"/>
    <updated>2013-02-08T00:54:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/08/chen-ni-yu-mac-chen-ni-yu-xcode</id>
    <content type="html"><![CDATA[<!-- more -->


<p></p>

<h2>2012 年的最后一天，唠几句闲话先~</h2>

<p>从 2011 年 6月份开始踏入 iOS 开发行列，如今已经一个半年头了。遇到的第一个问题便是对 objective-c 一点都不懂，作为 c 的扩展，oc 和 cpp 可谓是一对亲兄弟。现在看来，只是 oc 那种的中缀式语法让我感到比较奇葩，让当时作为菜鸟的我难以理解。我在大学的专业学的是软件开发与项目管理，c、数据结构、离散数学什么的都开过课程，但作为逃课王的我，每每挂科后于补考时咸鱼翻身总是那么地稀松平常。没有细数自己挂过多少门科，但很庆幸的是，没有一门是在补考时没有扳回来的。记得逃课最长的一次记录是连续 20 多天没有去上主修专业的课程，我的专业老师托与我同寝的兄弟给我传话，再不去就要叫家长了。当然，我后来还是妥协了，谁也不愿意让老爸老妈来大老远地跑过来视察自己糜烂的大学生活~</p>

<p>总的来说吧，虽然我还是挺放任、挺邪恶的，但我还是有一颗向上的心。依然能够想起当年我在长沙的寒冬，于小树林里学习《计算机网络》的情形，难得我也有认真的时候。除此之外，java 的学习我也挺用功的，还写了不少小玩意儿来自娱自乐。当初学习 c 语言的时候我就没正儿八经的听过几节课，教 c 语言的老师后来也是果断地就把我给做掉了。说来我对自己的专业还是感觉挺恶心的，专业老师教导我，软件开发与项目管理 == java | c# web项目。这和我认识里的软件、项目可差得远了。不过我承认，这确实是我自己有点儿想地太美了。</p>

<p>PS：<br/>
我之前以为软件开发与项目管理是一个很宽的范畴，其中就包括了游戏的开发。也就是说，在前面打好了基础之后，后面自己能够根据爱好自由地选择出口。但是我错了，大专里面的专于一点让这成为梦幻的泡沫。</p>

<p>2011 年 6 月份我从学院里面毕业了，我始终是不太愿意去找一份 web 相关的工作。后来，我有在深圳工作的朋友邀我一起做 iOS 开发，于是我便打扮地像蜗牛一样背着重重的壳朝着深圳出发了。之后也发生了很多事情，到这里有点儿犯懒了，下次再补上吧。</p>

<h2>接下来进入重点，下面是一些有助于开发的知识：</h2>

<p><strong>关键字：</strong><code>Mac OS X Lion 10.7.2</code>、<code>XCode 4.2</code>、<code>hotkey</code>。<br/>
<strong>备注：</strong>随着了解的不断深入，我越来越沉溺于 mac 和 xcode 无法自拔，太优秀了！</p>

<h3>mac 系统通用快捷键（mac 下的应用多数会往这些标准看齐）</h3>

<p>command + w: 关闭当前窗口<br/>
command + q: 退出程序<br/>
（Google Chrome 有点奇葩，按下之后还需要hold 那么一小会儿才能退出）</p>

<p>command + m: 最小化当前窗口<br/>
（怎么不用鼠标将最小化于dock 上的窗口还原？spotlight 或 control + f2->window 菜单项都行）</p>

<p>command + h: 隐藏当前应用的所有窗口<br/>
command + c: 复制<br/>
command + v: 粘贴<br/>
control + F2：激活菜单栏<br/>
（这个关机的时候比较好用，手不用脱离键盘了）</p>

<p>command + f: 寻找<br/>
command + space: 切换输入法<br/>
command + tab：切换程序<br/>
（这里又要注意的地方，切换过程中最好不要移动鼠标，否则容易出现混乱切换的情况）</p>

<p>control + space：spotlight</p>

<p>spotlight 这东西设计的很精妙，一些人说这没什么用要禁掉乃是因为没有找到正确的使用方法。从设计上来看，spotlight 位于屏幕的最右上角，就一个放大镜的小图标，可以通过 control + space 快捷键轻松调出，然后就会将焦点转移到搜索框里面，在这里可以很便捷地搜索自己想要找的东西，包括各种可用的 Applications，这也是我推崇 spotlight 一个很重要的原因，因为有了这个东西，手指完全不用脱离键盘你就可以启动任何为你所需要的应用程序。不知道一般家庭用的 mac 用户对这点是否有如此严苛的需求，但作为开发人员而言，穿梭于各种应用的功能之间，是在平凡不过的事情，这一点给我带来了很大的便利性。举例说明：在要启动 XCode 开始一天工作的时候，按下 control + space 调出 spotlight 搜索框，键入 XCode 后，搜索框下面会列出各种各样的候选条目，可以发现 XCode.app 是放在很前列的，只需要配合上下键、回车键，就达到了快捷启动 XCode 的目的。</p>

<p><strong>现在我已经越来越意识到快捷键所带来的便利</strong>，这是也是有根源的。传说中的代码编辑神器 vi、vim、emacs，无一不在快捷键上独树一帜。它们的理念就是在编码过程中抛弃对鼠标的操作，甚至抛弃对上下左下键的操作，以达到最神速、迅捷的编辑目的。有些特色所带来的便利性没有体会过是很难以理解的，这就是导致一些很优秀的东西口碑褒贬不一的重要原因之一。</p>

<p>最后要说的就是 Dock，你可以通过 command + alt + d 隐藏或者呈现 dock，也可以选在把 dock 放在左、下、右任一个方位，你可以把 Applications 文件夹的应用程序拖拽到 Dock上面，方便你的使用，也可以在不需要的时候把dock 上面的条目拽出 Dock 从而移除它。对比 windows 来看，Dock 还是一个非常舒服的东西，特别是 mac 界面本身就非常精美，一个个的应用图标排布在 Dock 上面，再配合 Magnification 的放缩效果，可谓是琳琅满目。反观windows xp，底部一个系统的任务栏，应用程序的的菜单本本分分的布置在自己窗口的顶部。孰好孰坏就不多做评论了，唯一确定的一点是我是更倾向于 mac 的设计风格的（难道是因为我用 windows 那么多年已经厌倦的原因？）Dock 上面的两个重量级功能：Mission Control 和 Launchpad。Mission Control 让我在单屏显示器上面获得了多屏显示的感受，而 LaunchPad 则让启动想要的程序变地无比简单。对比 Windows，LaunchPad 这种模仿 iOS 风格的以面、网格呈现可用条目的方式，无疑比那层层弹出的列表方式更为高效、优秀。</p>

<p>1。Finder 的最常用快捷键：<br/>
space：预览文件<br/>
command + down：打开文件<br/>
command + backspace：移到废纸篓<br/>
command + ctrl + 0 ~ 7：按各种方式规整地排列子文件<br/>
command + shift + g：前往某个路径<br/>
command + 1 ~ 4：更换呈现方式<br/>
command + shift + f：All my Files<br/>
command + shift + o: 打开文档目录<br/>
command + shift + d: 打开桌面目录<br/>
command + alt + L: 打开下载目录<br/>
command + shift + h: 打开home 目录<br/>
command + shift + C: 打开我的电脑<br/>
command + shift + A: 打开应用程序目录<br/>
command + shift + U: 打开工具目录</p>

<p>2。编码神器 XCode 最有价值的快捷键<br/>
command + e: 将所选中的文本传递到搜索框（但搜索框不会呈现出来）<br/>
command + f: 寻找<br/>
command + g: 寻找下一个<br/>
command + L: 定位到当前所编辑的代码文件的第多少行<br/>
上面这些快捷键能够很轻松的完成编辑点定位的功能，再次我们心爱的让鼠标被冷落在一旁。使用说明：有时候报错会报出错误出现在哪一行，诸如opengl es2 check_gl_error，这里 command + L 能发挥出很好的行定位作用。再个就是 command + f 与 command + g，command +f 键入自己想要定位到的点前面的几个符号进行搜索，配合 command + g 寻找下一个，定位到目标点位以后，按下  esc 关闭搜索功能，就完成了编辑点的精确定位。</p>

<p>控制台相关快捷键：<br/>
command + shift + c: 打开控制台视图<br/>
command + shift + y: 关闭控制台视图（这里我觉得不是很好，完全可以和打开使用一组相同的快捷键，易记）<br/>
command + k： 清除控制台输出<br/>
不得不说一下，mac 的界面优化做的实在是太到位了，简单说来就是你想要的功能都还在那儿，但是他们所占据的屏幕面积却是非常非常的少，一旦你要用到他们的时候，用起来也不会觉得很难找、很难用，这就是 mac 界面的精髓所在了（当然这要建立在对 mac 足够了解的基础之上）。</p>

<p>产品相关的快捷键：<br/>
我相信这是最最常用、最最贴身，人人都要牢记的一块了~<br/>
command + b: 编译、生成<br/>
command + r : 运行<br/>
command + i: profile<br/>
（找不到一个好的翻译词，用 Instruments 做内存占用的分析是必须走的流程）</p>

<p>command + shift + b: 分析<br/>
（这种特殊的编译有助于找到比较明显的泄露的代码）</p>

<p>command + shift + k: 清理<br/>
（这也是很常用的功能，不少问题都是通过清理后重新编译的方法来解决的）</p>

<p>command + q: 退出<br/>
（之所以放在这里是因为，有时候你的 xcode 出现怪异行为的时候，退出重启无疑是最佳方案）<br/>
举例而言，xcode 4.2 里面编辑签名配置的时候，有时候会出现改不动的情况，这里退出重启就很有用了。顺带说一下xcode 界面左上角圆形stop 按钮右侧的矩形条，这个东西用来控制以 debug 还是 release 的模式编译产品。debug 模式下会打印出各种各样的 log，这样有助于我们解决遇到的bug，但是执行效率会被降低。release 模式下 debug 打印则被禁止掉，如果是真机测试的话，所得到的效果是最接近用户使用的效果的。发布产品也必须发布 release 模式下生成的产品。</p>

<p>特别把 xcode 工程浏览视图中的 show in finder 功能拿出来说一下，在 xcode 中这个简单实用的功能，你要在 eclipse 里面办到，那可就不容易了。在使用 xcode 之前，eclipse 一直是我最忠实、心爱的伙伴，但就这点来说，eclipse 还是让我很失望的。</p>

<p>还要说一说 XCode 的视图控制设计，是我见过的最优秀的了。我一般是把右侧的属性栏视图关掉，仅留下工程结构视图和 代码编辑视图（做游戏对属性栏的需求不是很多）。在代码编辑区按下 command + shift + j 在工程目录视图中可以定位到当前编辑文件的所在的位置。command + 0~ 9 的数字可以在与工程目录视图并列的其他数个视图中快捷切换，特别是 command + 0，能够将 XCode 左侧栏完全的隐藏、打开，另外，整个过程的过度效果也是非常舒服的，比 eclipse 的最大化编辑器、还原到正常尺寸更优秀，隐藏左侧栏在做代码文件的版本对比的时候是非常实用的，还有就是做代码移植的时候，让代码编辑区域贴紧窗口左壁能够得到更合适的视角。暂时就说这么多，伴随这一年多的使用，积累下来的经验、技巧肯定还有遗漏的地方，后面想到了会更新上来，自恋一下，务必让这篇文章成为 mac、iOS 开发者心所向往的神奇篇章~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(转载)Mac 终端关机命令]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/02/zhuan-zai-mac-zhong-duan-guan-ji-ming-ling/"/>
    <updated>2013-02-02T15:00:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/02/zhuan-zai-mac-zhong-duan-guan-ji-ming-ling</id>
    <content type="html"><![CDATA[<p>原文链接：<br/>
<a href="http://pulading1988.diandian.com/post/2012-04-22/17392701">http://pulading1988.diandian.com/post/2012-04-22/17392701</a><br/>
<strong>1.立即关机：</strong><br/>
<code>sudo halt</code> 或 <code>sudo shutdown -h now</code></p>

<!-- more -->


<p><strong>2.10 分钟后关机：</strong><br/>
<code>sudo shutdown -h +10</code></p>

<p><strong>3.晚上 8 点关机：</strong><br/>
<code>sudo shutdown -h 20:00</code></p>

<p><strong>4.立即重启：</strong><br/>
<code>sudo reboot</code> 或者 <code>sudo shutdown -r now</code></p>
]]></content>
  </entry>
  
</feed>
