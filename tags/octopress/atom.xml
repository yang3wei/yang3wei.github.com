<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: octopress | yang3wei的专栏]]></title>
  <link href="http://yang3wei.github.com/tags/octopress/atom.xml" rel="self"/>
  <link href="http://yang3wei.github.com/"/>
  <updated>2013-02-03T18:19:24+08:00</updated>
  <id>http://yang3wei.github.com/</id>
  <author>
    <name><![CDATA[yang3wei]]></name>
    <email><![CDATA[88480585@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress 代码高亮]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/03/octopress-dai-ma-gao-liang/"/>
    <updated>2013-02-03T17:43:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/03/octopress-dai-ma-gao-liang</id>
    <content type="html"><![CDATA[<p>原文链接：<br/>
<a href="http://xiongbupt.github.com/blog/2012/06/08/octopressdai-ma-gao-liang/">http://xiongbupt.github.com/blog/2012/06/08/octopressdai-ma-gao-liang/</a><br/>
现在博客已经基本搭建完毕，下面对从<code>jekyll bootstrap</code>搬迁到做一个基本介绍。首先是代码高亮部分，下面的文章主要来自于<a href="http://octopress.org/docs/blogging/code/" title="Octopress代码高亮">Octopress关于代码高亮部分</a>。文章主要是对上面的内容进行一个简单的翻译，以及简单介绍从<code>jekyll bootstrap</code>上面的代码移动到<code>Octopress</code>上面做一个简单的介绍。</p>

<!-- more -->


<h2>共享代码片段</h2>

<p>在博客上共享代码片段应该是简单的，并且代码应该具有简单的高亮功能。Octopress也具有这种功能，在<code>jekyll</code>上，其使用的是<code>pygment</code>来实现代码高亮的功能，Octopress实现的更好。在Octopress上面有下面几种选择：</p>

<ul>
<li>使用<a href="http://ethanschoonover.com/solarized" title="Solarized高亮">Solarized高亮</a>主题来实现（该方法未尝试，实际上不知道怎么弄，只是凭借个人的猜测）。</li>
<li>使用Gist的代码内嵌。</li>
<li>从自己的文件系统中插入代码片段，该代码具有下载链接。</li>
<li>简单的内嵌代码块带有<code>&lt;figure&gt;</code>和<code>&lt;figcaption&gt;</code>和可选的下载链接。</li>
<li>Pygments caching（似乎还是使用Pygnment来实现代码高亮）。</li>
<li>通过javascript脚本使得代码具有行号。</li>
</ul>


<h3>Solarized高亮</h3>

<p>这部分内容自己没有尝试，待更新。</p>

<h3>反引号的代码块</h3>

<p>同时使用<code>backtick_codelock</code>过滤器，可以使用Github的最适用的代码高亮块。使用三个反引号开始，后面跟着一个空格，接下来是高亮语言，具体语法如下所示：</p>

<pre><code>  ``` [language] [title] [url] [link text]
  code snippet
  ```
</code></pre>

<p>按照上述方式便可以对相应的代码块进行高亮，如下面的例子。</p>

<h4>example1（原文)</h4>

<pre><code> ```
 $sudo give me a hug
 ```
</code></pre>

<p>按照上面的方式在文本中输入之后，产生的效果如下：
<code>
$sudo give me a hug
</code></p>

<h4>example2带有说明和连接</h4>

<pre><code> ``` ruby Discover if a number is prime http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/ Source Article
 class Fixnum
   def prime?
     ('1' * self) !~ /^1?$|^(11+?)\1+$/
   end
 end
 ```
</code></pre>

<p>产生的代码片段如下：
``` ruby Discover if a number is prime http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/ Source Article
class Fixnum
  def prime?</p>

<pre><code>('1' * self) !~ /^1?$|^(11+?)\1+$/
</code></pre>

<p>  end
end
```</p>

<h3>Gist代码内嵌</h3>

<p>当使用这种方式的代码高亮时，仅仅需要的是gist的id，对gist不了解的可以上google搜索下，个人的理解是，gist对每段用户上传的代码段都会有一个对应的id，当用户给出对应的代码的id后，将会从gist上面下载对应的已经高亮的html文件，最终在用户的页面上显示出来。</p>

<h4>语法</h4>

<pre><code> { % gist gist_id [filename] %}
</code></pre>

<h4>example</h4>

<pre><code> { % gist 996818 %}
</code></pre>

<p>上述代码的片段在Octopress中的markdown文件中输入之后，得到的效果如下：</p>

<p><div><script src='https://gist.github.com/996818.js'></script>
<noscript><pre><code>@@ -590,7 +590,7 @@ class SpritesTest &lt; Test::Unit::TestCase
  it &quot;should generate a sprite from nested folders&quot; do
    css = render &lt;&lt;-SCSS
-     @import &quot;nested/*.png&quot;;
+     @import &quot;nested/**/*.png&quot;;
      @include all-nested-sprites;
    SCSS
    assert_correct css, &lt;&lt;-CSS</code></pre></noscript></div>
</p>

<p>如果一个gist的id对应有多个文件，这时需要对想要高亮的文件添加文件名，具体语法如下所示：</p>

<pre><code>  { % gist 1059334 svg_bullets.rb %}
  { % gist 1059334 usage.scss %}
</code></pre>

<p>总体来说，gist代码高亮是很简单的，只是需要将代码上传到<a href="https://gist.github.com/">gist</a>，然后获取相应的id然后按照上面的语法进行设置即可。只是每次在写博客时，都需要对博客文章中的代码拷贝到网址上生成，在没有网时，代码高亮比较麻烦。</p>

<h3>从本地文件中引入代码</h3>

<p>这种方式在Arch上面有个小问题，在Arch上的报错如下所示：<br/>
``` bash Arch error
Building site: source -> public
  File "<string>", line 1</p>

<pre><code>import sys; print sys.executable
                    ^
</code></pre>

<p>SyntaxError: invalid syntax
<code>``
上网搜索之后在[该网址][lab4]发现解决方法。   
这种方式需要使用python2来完成代码高亮的操作，由于Arch的python指向的是python3，而python3无法完成该功能，因此需要在</code>plugin<code>文件夹中再添加一个新文件，指定在</code>Octopress<code>运行时使用的是python2，具体增加的文件内容如下所示，文件的名字为</code>ruby_python_arch_linux_fix.rb`<br/>
File /Users/user/octopress/source/downloads/code/ruby/ruby_python_arch_linux_fix.rb could not be found</p>

<p>在完成该操作之后，仍然报错，得到如下错误：<br/>
<code>bash Error message
LoadError: Could not open library 'lib.so': lib.so: cannot open shared object file: No such file or directory
</code>
参考<a href="https://github.com/tmm1/pygments.rb/issues/10">该网址</a>的由<code>elidos</code>提出的解决方法可以知道是<code>rubypython</code>自身的bug，需要修复，具体修改文件在Arch上面为<code>/usr/lib/ruby/gems/1.9.1/gems/rubypython-0.5.3/lib/rubypython/pythonexec.rb</code>，修改位置大概在126行左右，修改后的内容如下所示：
<code>diff fix the rubypython bug
--126 %x(#{@python} -c "#{command}").chomp if @python
++126 %x("#{@python} -c #{command}").chomp if @python
</code>
完成该修改之后，便可以使用这种包含代码的方式来进行代码高亮。 <br/>
使用这种方式的语法也参见<a href="http://octopress.org/docs/blogging/code/" title="Octopress代码高亮">octopress手册</a>，此处不再进行详细说明，这种方式的代码是单独存放成一个文件保存在本地系统下，当代码长度较长，又不想放在博客的正文中时，使用该方法比较好。<br/>
简单记录下这种方式的语法如下所示：（目前不知道为什么，在octopress中输入{ %的方式都会进行代码解析，所以上面的{ %都进行了添加了<code></code>来取消，在实际文章中输入的时候，将<code></code>取消掉）</p>

<pre><code>{ % include_code [title] [lang:language] path/to/file %}
</code></pre>

<p>其中的中括号的内容是可选的，具体语言便是这种方式，当需要强制高亮时，需要指定<code>lang:</code>这个参数，很好用。</p>

<h3>使用Code Block的方式</h3>

<p>目前自己的博客这种方式用的比较多，前面写的文章目前全部修改成为了这种方式，感觉这种方式和<code>pygnment</code>的方式差不多，之前全部采用的是<code>pygnment</code>的方式，利用正则表达式把所有文章的代码高亮全部改成了使用<code>code block</code>。它的具体语法如下所示：（与<code>pygnment</code>很相似，指定语言即可）</p>

<pre><code>  { % codeblock [title] [lang:language] [url] [link text] %}
  code snippet
  { % endcodeblock %}
</code></pre>

<p>和之前描述的类似，中括号的内容是可选的。</p>

<h4>使用正则表达式替换</h4>

<p>这种方式可以替换博客内容，使得博客中所有文章的代码高亮使用<code>Code Block</code>。自己使用的是<code>sed</code>来完成的操作，似乎都没有用到正则表达式，只是简单的替换，做个简单的记录吧。</p>

<h5>替换方法</h5>

<p>进入到<code>source/_posts</code>目录下，在终端输入如下代码：
<code>bash Sed查看文章代码
sed -n 's/\(\ highlight\ \)/\1/p' *
</code>
上面将会把当前目录下的含有{\% highlight的文件的那行都显示出来，中间会将含有该特殊字符的行都打印出来，中间可以看到自己的博客内容都用到了哪些类型文件的语法高亮，将对应的代码高亮进行替换即可。<br/>
其实这种方式就是简单的搜索替换，应该算不上使用正则表达式了，只是写下来做下笔记了，防止以后再用具体操作如下所示：
<code>bash Sed替换文件内容
sed -i 's/\(\ highlight\ bash %}\)/\ codeblock\ lang:bash\ %}/' *
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 中的 SEO]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/03/octopress-zhong-de-seo/"/>
    <updated>2013-02-03T16:12:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/03/octopress-zhong-de-seo</id>
    <content type="html"><![CDATA[<p>原文链接：<br/>
<a href="http://codemacro.com/2012/09/06/octopress-seo/">loop in codes -- Kevin Lynx BLOG</a><br/>
Octopress 默认为每个页面添加 meta description，其内容为当前文章的前150个字符，<br/>
如果是首页就会是第一篇文章的前 150 个字符。这里主要通过增加 meta keywords 来提高 SEO。</p>

<!-- more -->


<h2>为每篇文章增加 keywors 和 description</h2>

<p>就像我的这篇博客，这下文章头得填很多数据了，有点麻烦：<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>code snippet 1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: "Octopress中的SEO"
</span><span class='line'>date: 2012-09-06 19:02
</span><span class='line'>comments: true
</span><span class='line'>categories: tips
</span><span class='line'>tags: [tips, octopress]
</span><span class='line'>keywords: seo, octopress&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h2>description: Octopress默认为每个页面添加&lt;code>meta description&lt;/code>，其内容为当前文章的前150个字符，如果是首页就会是第一篇文章的前150个字符。这里主要通过增加&lt;code>meta keywords&lt;/code>来提高SEO。&lt;/h2>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这样，每篇文章页面头就会自动增加 meta keywords 项，description也会使用这里填的，<br/>
而不是自动为文章前若干个字符。这个功能的实现在 <code>_includes/head.html</code> 中。
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>code snippet 2  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;author&quot;</span> <span class="na">content=</span><span class="s">&quot;Kevin Lynx&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">content=</span><span class="s">&quot;Octopress默认为每个页面添加`meta description`，其内容为当前文章的前150个字符，如果是首页就会是第一篇文章的前150个字符。这里主要通过增加`meta keywords`来提高SEO。 &quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;keywords&quot;</span> <span class="na">content=</span><span class="s">&quot;seo, octopress&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>为页面 (Page) 增加 keywords</h2>

<p>上面只是修正了每篇博客页面的 meta 信息，octopress 中还有几个页面需要修正，例如首页，<br/>
这个可以通过修改 <code>_includes/head.html</code> 来完成。替换相关内容为以下：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>code snippet 3  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;author&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ site.author }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>{% capture description %}{% if page.description %}{{ page.description }}{% elsif site.description %}{{ site.description }}{%else%}{{ content | raw_content }}{% endif %}{% endcapture %}
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ description | strip_html | condense_spaces | truncate:150 }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>{% if page.keywords %}<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;keywords&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ page.keywords }}&quot;</span><span class="nt">&gt;</span>{%else%}<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;keywords&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ site.keywords }}&quot;</span><span class="nt">&gt;</span>{% endif %}
</span></code></pre></td></tr></table></div></figure></notextile></div>
如果页面没有提供 keywords 或者 description 的话，<br/>
就使用 site 里的设置，也就需要修改 <code>_config.yml</code>：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>code snippet 4 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>description: loop in codes, Kevin Lynx blog
</span><span class='line'>keywords: c/c++, mmo, game develop, lisp, ruby, lua, web development</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为 Octopress 添加查看访问量的功能]]></title>
    <link href="http://yang3wei.github.com/blog/2013/02/03/wei-octopress-tian-jia-cha-kan-fang-wen-liang-de-gong-neng/"/>
    <updated>2013-02-03T16:03:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/02/03/wei-octopress-tian-jia-cha-kan-fang-wen-liang-de-gong-neng</id>
    <content type="html"><![CDATA[<p>原文链接：<a href="http://colors4.us/blog/2012/01/08/octopressbo-ke-cong-ling-kai-shi-iii/">sourrabbit &amp; linpx</a><br/>
我在看了<a href="http://www.whatwherewhy.me/colophon/">这个</a>网页后，发现我还可以添加网站分析，毕竟是自己努力出来的东西，<br/>
看看大伙是否有兴趣访问还是不错的，不过很多情况是远逊于预期。:)</p>

<!--  more -->


<p>先于 <code>Google Analytics</code> 开通和自己网站相关的服务，<br/>
比如登记自己的网址，取得 GA 的 <code>Track ID</code>，应该如该样式 <code>UA-28584XXX-X</code>.
修改 <code>_config.yml</code> 最后部分，将 ID 置于 <code>google_analytics_tracking_id:</code>项目之后，rake一下就行了。<br/>
之后进入 GA 网站看 report 吧，你就会知道何时多少人访问过你的网站。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[灾后重建 octopress 博客遇到的问题]]></title>
    <link href="http://yang3wei.github.com/blog/2013/01/31/zai-hou-zhong-jian-octopress-bo-ke-yu-dao-de-wen-ti/"/>
    <updated>2013-01-31T16:58:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/01/31/zai-hou-zhong-jian-octopress-bo-ke-yu-dao-de-wen-ti</id>
    <content type="html"><![CDATA[<p>今天上午十点的时候试了一下 <code>git pull</code> 命令，<br/>
结果导致 <code>octopress</code> 博客在我本地的目录乱成了一团浆糊，<br/>
因为对 <code>git</code> 的了解不是很充分，所以在多番努力修复无果之后，我决定重新洗牌。</p>

<!-- more -->


<p>话说 <code>git</code> 的分支、合并什么的确实有些不容易理解~<br/>
其实 <code>blog</code> 还是能够正常使用的，但是我本地 <code>octopress</code> 的目录被完全破坏掉了，<br/>
失去了我对它的掌控，另外就是，在提交的时候老提示类似如下的信息</p>

<pre><code># On branch master
# Your branch is ahead of 'origin/master' by 1 commit.
#
nothing to commit (working directory clean)</code></pre>


<p>我是一个追求完美的人，这些个多余的东西让我浑身不自在，于是我有了 <code>重装</code> 的想法，<br/>
重装其实也有其他的用意，比如说，让我对架设 octopress 博客的流程更加轻车熟路些。<br/>
因为之前走过一遍，所以我在做费时评估时是准备在 10 分钟内搞定的。</p>

<p>但是现实往往是那么地不可预料，这不，在重装的过程中又遇到了一些问题，- -、</p>

<h3>第一步，清除所有陈旧的东西</h3>

<p>将 <code>octopress</code> 博客的本地目录拽入垃圾箱；<br/>
在 <code>github</code> 里面删除 <code>yang3wei.github.com</code> 博客仓库。<br/>
ok，就这么多！</p>

<h3>第二步，在 github 上面重建 yang3wei.github.com 仓库</h3>

<p>这个不多说，<code>github</code> 官网上面有做全方位地向导。</p>

<h3>第三步，重新布置 octopress 博客的本地目录</h3>

<p>这个也没什么好说的，顺着 <code>octopress</code> 主页底部的 <code>start here</code> 链接一路往下走即可。</p>

<p>但是这里面有猫腻，如果处理的不好，将导致管理 octopress 博客出现一些混乱！<br/>
这里说一下存在问题的处理方式：<br/>
按照 <code>octopress</code> 主页上面介绍的搭建流程，<br/>
我开启一个 <code>Termimal</code> 窗口，直接在里面粘贴并执行如下的命令：<br/>
<code>git clone git://github.com/imathis/octopress.git octopress</code><br/>
<code>Terminal</code> 窗口开启的时候默认的所在目录为 <code>~</code>，<br/>
上面的命令会将 <code>octopress</code> 的安装文件克隆到本地的 <code>~/octopress</code> 目录。<br/>
之后我规规矩矩地执行下列命令：<code>cd octopress</code>、<code>rake install</code>，</p>

<p>然后我点击 <code>Next Steps</code> 下面的 <code>Set up deployment</code> 链接进入到创建 <code>github</code> 博客仓库的环节。<br/>
按照 <code>octopress</code> 给出的提示，我在 <code>github</code> 里面创建了一个名为 <code>yang3wei.github.com</code> 的仓库。<br/>
之后我复制好 <code>github</code> 所生成的命令文本：</p>

<pre><code>touch README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/yang3wei/yang3wei.github.com.git
git push -u origin master
</code></pre>


<p>二话不说跑到之前打开的那个 <code>Terminal</code> 窗口里面就粘贴执行了，<br/>
但在执行这组命令时并没有想象中的顺利，在执行倒数第二行命令的时候出现了故障：<br/>
<code>fatal: remote origin already exists</code><br/>
<code>googling</code> 一番以后找到问题的解决方案，在执行倒数第二行命令前先执行一遍如下命令：<br/>
<code>git remote rm origin</code><br/>
然后，依次粘贴执行前述命令块儿的最后两条命令，其间没有再生出其他的枝节。<br/>
问题解决方案的相关链接：<a href="http://stackoverflow.com/questions/10904339/github-fatal-remote-origin-already-exists">Github “fatal: remote origin already exists”</a></p>

<p>做完了上面的操作，就算是将 <code>github</code> 上 <code>yang3wei.github.com</code> 仓库的本地目录给布置好了。<br/>
之后点进 <a href="http://octopress.org/docs/deploying/github/">Deploying to Github Pages</a> 链接，继续按照提示往下走，<br/>
我在之前提到的那个 <code>Terminal</code> 窗口里面再次粘贴并执行如下命令块儿：</p>

<pre><code>rake setup_github_pages
rake generate
rake deploy
git add .
git commit -m "first commit"
git push origin source
</code></pre>


<p>在依次执行到最后一条命令 <code>git push origin source</code> 时，<br/>
问题再次降临，本地提交的数据死活推不进 <code>github</code> 服务器。<br/>
我用 <code>git status</code> 和 <code>git branch -a</code> 命令查看了一下当前的分支状态和所有的分支条目，<br/>
发现 <code>source</code> 分支根本就不存在，当前所处的也只是 <code>master</code> 分支。<br/>
我感到非常的不可思议，因为在我之前顺利搭建 <code>otopress</code> 博客的时候，<br/>
我是一直都工作在 <code>source</code> 分支下面的，现在却仅仅只有一个 <code>master</code> 分支！<br/>
我重复删除创建实践了很多次，最终却都只得到上述的结局。<br/>
有几次我忍不住按照 <code>git</code> 给出的提示执行了 <code>git pull</code> 命令，结果一下就完蛋了：<br/>
静态页数据直接被拉到本地的 <code>octopress</code> 根目录，把根目录弄得一团乱麻。</p>

<h3>真相在哪里？</h3>

<p>熟悉 git 运作机制的看官可能已经发现问题的所在了！<br/>
我不明所以地将 <code>yang3wei.github.com</code> 仓库的本地目录和 <code>~/octopress</code> 目录重叠了起来。<br/>
正是因为这一点导致了我 <code>n + 1</code> 次的重建失败！正确的处理方法：<br/>
<strong>使用除 <code>~/octopress</code> 目录之外的其他目录作为 <code>yang3wei.github.com</code> 的本地目录。</strong><br/>
庆幸我是一个执着的人，没有 <code>n + 1</code> 次的失败，哪有第 <code>n + 2</code> 次的成功？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(扩充)Octopress 怎么开启评论功能]]></title>
    <link href="http://yang3wei.github.com/blog/2013/01/30/zhuan-zai-octopress-zen-yao-kai-qi-ping-lun-gong-neng/"/>
    <updated>2013-01-30T18:09:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/01/30/zhuan-zai-octopress-zen-yao-kai-qi-ping-lun-gong-neng</id>
    <content type="html"><![CDATA[<p>原文链接：<br/>
<a href="http://gangmax.me/blog/2012/01/20/how-to-use-disqus-in-octopress/" title="Blog of GangMax">http://gangmax.me/blog/2012/01/20/how-to-use-disqus-in-octopress/</a></p>

<h3>1.Octopress 默认支持 disqus，开启即可</h3>

<!-- more -->


<p>这两天我一直想给 octopress 加入评论功能。<br/>
于是我尝试搜索 <code>disqus octopress jekyll</code> 这样的关键字，但是没有找到具体的做法。
后来我想到：可以查看一个具有评论功能的 github octopress 实例代码，看看别人是怎么做的，比如<a href="https://github.com/roylez/roylez.github.com">这个</a>。</p>

<p>我首先查看 <code>source/_layout/post.html</code>，看到里面有处理 disqus 的相关代码。<br/>
我的第一反应是我应该在我自己的对应文件里面也加上相应的代码。<br/>
但是随即发现我的文件中已经有了一模一样的代码。</p>

<p>也就是说，其实 <code>octopress/jekyll</code> 默认就有这些代码。<br/>
这说明 octopress 自身就支持 disqus，<br/>
可能这就是为什么没有人评论该怎么在 octopress 里面加入 disqus 支持的原因。</p>

<p>于是打开 <code>_config.yml</code>，找到了 disqus 相关的配置项，修改即可：</p>

<pre><code>disqus_short_name: your_disqus_short_name
disqus_show_comment_count: true</code></pre>


<p>当然，前提是你需要先注册一个 <a href="http://www.disqus.com/">disqus</a> 帐号，这个就不用我多说了。</p>

<h3>2.一个要注意的地方</h3>

<p>原文请参看如下链接：<br/>
<a href="http://www.ducea.com/2012/11/12/disqus-comments-not-visible-in-octopress/" title="MDLog:/sysadmin">http://www.ducea.com/2012/11/12/disqus-comments-not-visible-in-octopress/</a>
大意就是在更改 octopress 配置文件 _config.yml 时，<br/>
下面两者有很大的区别，后者多加了一个斜杠将直接导致看不见 disqus 的评论内容！
<strong><code>url: http://yang3wei.github.com</code>  <br/>
<code>url: http://yang3wei.github.com/</code></strong></p>
]]></content>
  </entry>
  
</feed>
