<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: octopress | yang3wei的专栏]]></title>
  <link href="http://yang3wei.github.com/tags/octopress/atom.xml" rel="self"/>
  <link href="http://yang3wei.github.com/"/>
  <updated>2013-02-01T23:30:40+08:00</updated>
  <id>http://yang3wei.github.com/</id>
  <author>
    <name><![CDATA[yang3wei]]></name>
    <email><![CDATA[88480585@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[灾后重建 octopress 博客遇到的问题]]></title>
    <link href="http://yang3wei.github.com/blog/2013/01/31/zai-hou-zhong-jian-octopress-bo-ke-yu-dao-de-wen-ti/"/>
    <updated>2013-01-31T16:58:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/01/31/zai-hou-zhong-jian-octopress-bo-ke-yu-dao-de-wen-ti</id>
    <content type="html"><![CDATA[<p>今天上午十点的时候试了一下 <code>git pull</code> 命令，<br/>
结果导致 <code>octopress</code> 博客在我本地的目录乱成了一团浆糊，<br/>
因为对 <code>git</code> 的了解不是很充分，所以在多番努力修复无果之后，我决定重新洗牌。</p>

<!-- more -->


<p>话说 <code>git</code> 的分支、合并什么的确实有些不容易理解~<br/>
其实 <code>blog</code> 还是能够正常使用的，但是我本地 <code>octopress</code> 的目录被完全破坏掉了，<br/>
失去了我对它的掌控，另外就是，在提交的时候老提示类似如下的信息</p>

<pre><code># On branch master
# Your branch is ahead of 'origin/master' by 1 commit.
#
nothing to commit (working directory clean)</code></pre>


<p>我是一个追求完美的人，这些个多余的东西让我浑身不自在，于是我有了 <code>重装</code> 的想法，<br/>
重装其实也有其他的用意，比如说，让我对架设 octopress 博客的流程更加轻车熟路些。<br/>
因为之前走过一遍，所以我在做费时评估时是准备在 10 分钟内搞定的。</p>

<p>但是现实往往是那么地不可预料，这不，在重装的过程中又遇到了一些问题，- -、</p>

<h3>第一步，清除所有陈旧的东西</h3>

<p>将 <code>octopress</code> 博客的本地目录拽入垃圾箱；<br/>
在 <code>github</code> 里面删除 <code>yang3wei.github.com</code> 博客仓库。<br/>
ok，就这么多！</p>

<h3>第二步，在 github 上面重建 yang3wei.github.com 仓库</h3>

<p>这个不多说，<code>github</code> 官网上面有做全方位地向导。</p>

<h3>第三步，重新布置 octopress 博客的本地目录</h3>

<p>这个也没什么好说的，顺着 <code>octopress</code> 主页底部的 <code>start here</code> 链接一路往下走即可。</p>

<p>但是这里面有猫腻，如果处理的不好，将导致管理 octopress 博客出现一些混乱！<br/>
这里说一下存在问题的处理方式：<br/>
按照 <code>octopress</code> 主页上面介绍的搭建流程，<br/>
我开启一个 <code>Termimal</code> 窗口，直接在里面粘贴并执行如下的命令：<br/>
<code>git clone git://github.com/imathis/octopress.git octopress</code><br/>
<code>Terminal</code> 窗口开启的时候默认的所在目录为 <code>~</code>，<br/>
上面的命令会将 <code>octopress</code> 的安装文件克隆到本地的 <code>~/octopress</code> 目录。<br/>
之后我规规矩矩地执行下列命令：<code>cd octopress</code>、<code>rake install</code>，</p>

<p>然后我点击 <code>Next Steps</code> 下面的 <code>Set up deployment</code> 链接进入到创建 <code>github</code> 博客仓库的环节。<br/>
按照 <code>octopress</code> 给出的提示，我在 <code>github</code> 里面创建了一个名为 <code>yang3wei.github.com</code> 的仓库。<br/>
之后我复制好 <code>github</code> 所生成的命令文本：</p>

<pre><code>touch README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/yang3wei/yang3wei.github.com.git
git push -u origin master
</code></pre>


<p>二话不说跑到之前打开的那个 <code>Terminal</code> 窗口里面就粘贴执行了，<br/>
但在执行这组命令时并没有想象中的顺利，在执行倒数第二行命令的时候出现了故障：<br/>
<code>fatal: remote origin already exists</code><br/>
<code>googling</code> 一番以后找到问题的解决方案，在执行倒数第二行命令前先执行一遍如下命令：<br/>
<code>git remote rm origin</code><br/>
然后，依次粘贴执行前述命令块儿的最后两条命令，其间没有再生出其他的枝节。<br/>
问题解决方案的相关链接：<a href="http://stackoverflow.com/questions/10904339/github-fatal-remote-origin-already-exists">Github “fatal: remote origin already exists”</a></p>

<p>做完了上面的操作，就算是将 <code>github</code> 上 <code>yang3wei.github.com</code> 仓库的本地目录给布置好了。<br/>
之后点进 <a href="http://octopress.org/docs/deploying/github/">Deploying to Github Pages</a> 链接，继续按照提示往下走，<br/>
我在之前提到的那个 <code>Terminal</code> 窗口里面再次粘贴并执行如下命令块儿：</p>

<pre><code>rake setup_github_pages
rake generate
rake deploy
git add .
git commit -m "first commit"
git push origin source
</code></pre>


<p>在依次执行到最后一条命令 <code>git push origin source</code> 时，<br/>
问题再次降临，本地提交的数据死活推不进 <code>github</code> 服务器。<br/>
我用 <code>git status</code> 和 <code>git branch -a</code> 命令查看了一下当前的分支状态和所有的分支条目，<br/>
发现 <code>source</code> 分支根本就不存在，当前所处的也只是 <code>master</code> 分支。<br/>
我感到非常的不可思议，因为在我之前顺利搭建 <code>otopress</code> 博客的时候，<br/>
我是一直都工作在 <code>source</code> 分支下面的，现在却仅仅只有一个 <code>master</code> 分支！<br/>
我重复删除创建实践了很多次，最终却都只得到上述的结局。<br/>
有几次我忍不住按照 <code>git</code> 给出的提示执行了 <code>git pull</code> 命令，结果一下就完蛋了：<br/>
静态页数据直接被拉到本地的 <code>octopress</code> 根目录，把根目录弄得一团乱麻。</p>

<h3>真相在哪里？</h3>

<p>熟悉 git 运作机制的看官可能已经发现问题的所在了！<br/>
我不明所以地将 <code>yang3wei.github.com</code> 仓库的本地目录和 <code>~/octopress</code> 目录重叠了起来。<br/>
正是因为这一点导致了我 <code>n + 1</code> 次的重建失败！正确的处理方法：<br/>
<strong>使用除 <code>~/octopress</code> 目录之外的其他目录作为 <code>yang3wei.github.com</code> 的本地目录。</strong><br/>
庆幸我是一个执着的人，没有 <code>n + 1</code> 次的失败，哪有第 <code>n + 2</code> 次的成功？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(扩充)Octopress 怎么开启评论功能]]></title>
    <link href="http://yang3wei.github.com/blog/2013/01/30/zhuan-zai-octopress-zen-yao-kai-qi-ping-lun-gong-neng/"/>
    <updated>2013-01-30T18:09:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/01/30/zhuan-zai-octopress-zen-yao-kai-qi-ping-lun-gong-neng</id>
    <content type="html"><![CDATA[<p>原文链接：<br/>
<a href="http://gangmax.me/blog/2012/01/20/how-to-use-disqus-in-octopress/" title="Blog of GangMax">http://gangmax.me/blog/2012/01/20/how-to-use-disqus-in-octopress/</a></p>

<h3>1.Octopress 默认支持 disqus，开启即可</h3>

<!-- more -->


<p>这两天我一直想给 octopress 加入评论功能。<br/>
于是我尝试搜索 <code>disqus octopress jekyll</code> 这样的关键字，但是没有找到具体的做法。
后来我想到：可以查看一个具有评论功能的 github octopress 实例代码，看看别人是怎么做的，比如<a href="https://github.com/roylez/roylez.github.com">这个</a>。</p>

<p>我首先查看 <code>source/_layout/post.html</code>，看到里面有处理 disqus 的相关代码。<br/>
我的第一反应是我应该在我自己的对应文件里面也加上相应的代码。<br/>
但是随即发现我的文件中已经有了一模一样的代码。</p>

<p>也就是说，其实 <code>octopress/jekyll</code> 默认就有这些代码。<br/>
这说明 octopress 自身就支持 disqus，<br/>
可能这就是为什么没有人评论该怎么在 octopress 里面加入 disqus 支持的原因。</p>

<p>于是打开 <code>_config.yml</code>，找到了 disqus 相关的配置项，修改即可：</p>

<pre><code>disqus_short_name: your_disqus_short_name
disqus_show_comment_count: true</code></pre>


<p>当然，前提是你需要先注册一个 <a href="http://www.disqus.com/">disqus</a> 帐号，这个就不用我多说了。</p>

<h3>2.一个要注意的地方</h3>

<p>原文请参看如下链接：<br/>
<a href="http://www.ducea.com/2012/11/12/disqus-comments-not-visible-in-octopress/" title="MDLog:/sysadmin">http://www.ducea.com/2012/11/12/disqus-comments-not-visible-in-octopress/</a>
大意就是在更改 octopress 配置文件 _config.yml 时，<br/>
下面两者有很大的区别，后者多加了一个斜杠将直接导致看不见 disqus 的评论内容！
<strong><code>url: http://yang3wei.github.com</code>  <br/>
<code>url: http://yang3wei.github.com/</code></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(扩充)为 octopress 添加标签云]]></title>
    <link href="http://yang3wei.github.com/blog/2013/01/30/zhuan-zai-wei-octopress-tian-jia-biao-qian-yun/"/>
    <updated>2013-01-30T02:54:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/01/30/zhuan-zai-wei-octopress-tian-jia-biao-qian-yun</id>
    <content type="html"><![CDATA[<p>原文链接：<a href="http://codemacro.com/2012/07/18/add-tag-to-octopress/" title="loop in codes">http://codemacro.com/2012/07/18/add-tag-to-octopress/</a><br/>
同添加 <code>category list</code> 一样，网络上有很多方法，这里列举一种。<br/>
首先将以下两个项目克隆到本地：</p>

<pre><code>https://github.com/robbyedwards/octopress-tag-pages 
https://github.com/robbyedwards/octopress-tag-cloudclone
</code></pre>


<p>这两个项目分别用于产生 <code>tag page</code> 和 <code>tag cloud</code>。<br/>
针对这两个插件，需要手工复制一些文件到你的 octopress 目录。</p>

<!-- more -->


<h3>1.octopress-tag-pages</h3>

<p>复制 <code>tag_generator.rb</code> 到 <code>/plugins</code> 目录。<br/>
复制 <code>tag_index.html</code> 到 <code>/source/_layouts</code> 目录。<br/>
复制 <code>tag_feed.xml</code> 到 <code>/source/_includes/custom/</code> 目录。<br/>
其他文件就不需要复制了，都是些例子。</p>

<h3>2.octopress-tag-cloud</h3>

<p>复制 <code>tag_cloud.rb</code> 到 <code>/plugins</code> 目录。<br/>
复制以下代码到 <code>/source/_includes/custom/asides/tags.html</code>。<br/>
<strong>注意：先去掉 % 前面的反斜杠</strong></p>

<pre><code>&lt;section&gt;
    &lt;h1&gt;Tags&lt;/h1&gt;
    &lt;ul class="tag-cloud"&gt;
        {\% tag_cloud font-size: 100-210%, limit: 49, style: para \%}
    &lt;/ul&gt;
&lt;/section&gt;
</code></pre>


<p><code>tag_cloud</code> 的参数中：<br/>
<code>style: para</code> 指定不使用 <code>li</code> 来分割；<br/>
<code>limit</code> 限定 10 个 tag；<br/>
<code>font-size</code> 指定 tag 的大小范围，具体参数参看官方文档。</p>

<p>最后，当然是在 <code>_config.yml</code> 的 <code>default_asides</code> 中添加这个 <code>tag cloud</code> 到导航栏，例如：</p>

<pre><code>default_asides: [asides/category_list.html, asides/recent_posts.html, custom/asides/tags.html]</code></pre>


<h3>3.本人扩充: 有一个要注意的地方</h3>

<p>结合自身经历，我按照前文所述操作且核对了很多次，<br/>
发现在 <code>rake generate</code> 和 <code>rake preview</code> 以后，<br/>
在预览页面却依然无法得到正常的结果，具体表现如下：<br/>
标签云确实是出现在了右栏里面，不过当我点击某个 tag 的时候，<br/>
跳转到的却不是有效的地址，而仅仅只是一个 tag 关键词！<br/>
灰常地荒谬，灰常地震惊，我甚至一度思忖，作者是不是故意在和我开玩笑。<br/>
经历了艰辛地排查，终于我在 <code>firebug</code> 下面发现了一些蛛丝马迹：<br/>
常规情况下 tag 对应的地址应该是 <code>/tags/关键字</code>，<br/>
但是我发现在我的站点上面却不是这样的，仅仅只有 <code>//关键字</code>，<br/>
体现在浏览器里面就仅仅是一个 tag 关键字了，因为两个斜杠都被滤掉了~<br/>
发现了问题的症结以后，我就跑到 _config.yml 配置文件去中查看，<br/>
并且拿自己的配置文件和其他正常人的配置文件作对比，果然发现了一些猫腻：<br/>
我的配置文件中少了一行配置：<code>tag_dir: tags</code>，也算是歪打正着了，<br/>
把这一行配置加进去之后，执行 <code>rake generate</code> 和 <code>rake preview</code> 命令，<br/>
转到浏览器里面键入 <code>localhost:4000</code> 进行查看，标签云的功能总算是回归正常了~</p>

<p>谈一谈我对此的感受吧：<br/>
之前我也没有删掉过 tag_dir 这一行配置，也就是说 octopress 本身就没有包含这一行配置~<br/>
我很奇怪为什么其他人竟然都没有提出甚至谈及这个问题，<br/>
难道是 octopress 在升级的过程中刚才将这一行配置去掉？<br/>
不论如何，此次经历还是让我相当的不愉快，我花了至少五个小时来解决这个问题！！<br/>
这让我难以接受，要知道此时此刻我本该已经躺在床上呼呼大睡了！<br/>
直言不讳吧，虽然拿 MacVim 写 markdown 很舒服，但我不得不承认：<br/>
octopress 毕竟还是没能达到我心目中理想的高度，此次就是不成熟的一个典型体现~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 新增博文时要注意的地方]]></title>
    <link href="http://yang3wei.github.com/blog/2013/01/28/octopress-xin-zeng-bo-wen-shi-yao-zhu-yi-de-di-fang/"/>
    <updated>2013-01-28T22:11:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/01/28/octopress-xin-zeng-bo-wen-shi-yao-zhu-yi-de-di-fang</id>
    <content type="html"><![CDATA[<p>用 MacVim 的请注意，执行 rake deploy 的时候，<br/>
切记要将 MacVim 正在编辑的 markdown 博文文件保存并关闭掉~<br/>
因为在 deploy 的时候会对 source/_posts 目录下的文件执行 cp 操作~<br/>
如果 MacVim 当前正在编辑博文的 markdown 文件的话，<br/>
很有可能在执行 rake deploy 的时候给予失败的提示~<br/>
究其根源就是因为 MacVim 锁定了某个文件（swp 格式的），<br/>
然后对 rake deploy 命令的执行造成了阻碍~</p>

<!-- more -->


<p>
不知道其他的版本的 vim（vim、gvim，etc） 会不会也受到这个问题的影响~<br/>
我在 google 上面搜寻了一下这个问题，没有找到什么有用的资料~<br/>
能够解决掉这个问题还是占了很大的运气成分的，<br/>
刚开始我还误以为是 markdown、md 后缀带来的这个问题~<br/>
因为在我将 source/_posts 目录下的所有博文文件后缀由 markdown 改为 md 以后，<br/>
发现又能正常的执行 rake deploy 命令了~</p>

<h2>关于 swp 文件</h2>

<p>1.swp 文件是 vim 防止终端崩溃后恢复文件用的。<br/>
每次当文件内容被修改而没有用 :w 保存的时候，都会有这么一个文件，<br/>
这样可以解决多个用户编辑同一个文件，或忘记存盘而先关了终端的情况</p>

<p>2.兄弟，那可是一个好东东啊，你还嫌它？<br/>
我在 solaris 中误删了刚写的 shell 脚本，只有哭的份！</p>

<h2>octopress 发布博文的常规流程</h2>

<p>作为一个过来人，我觉得这是一个非常有必要记录一下的问题！<br/>
发布第一篇博文时该怎么弄我是咨询过 google 的~<br/>
我最初的认识是这样的：<br/>
在 Terminal 里面，通过 <code>cd ~/octopress</code> 命令切换到 octopress 的默认目录~<br/>
然后，执行 <code>rake new_post["博文标题"]</code> 命令，<br/>
它的作用是在 ~/octopress/source/_posts 目录下新建一个 “日期_时间_博文标题.markdown” 文件~<br/>
接下来，通过 MacVim 等编辑器按照 markdown 的语法在上述新建的文件中撰写博文~<br/>
撰写完毕之后再依次执行 <code>rake generate</code>、<code>rake preview</code>、<code>rake deploy</code> 命令<br/>
它们的作用分别是：<br/>
由 markdown 文件生成静态 html 页面，<br/>
开启本地服务器提供预览（访问 <code>http://localhost:4000</code>），<br/>
将静态页面部署到 github 博客服务器供他人访问。<br/>
其中，rake preview 命令是否执行是可选的，<br/>
如果你足够自信的话，完全可以跳过这一步直接进行部署~</p>

<p>这种流程是没有问题的，不过效率比较低！<br/>
假如在 _posts 目录中有 800 个 markdown 文件，<br/>
那么在执行 rake generate 命令时，会重新解析所有的 markdown 文件~<br/>
这是对生命和电能的巨大浪费，可以使用如下步骤来提升效率：<br/>
在撰写博文伊始就在 Terminal 中执行 rake preview 命令开启本地预览功能，<br/>
它会实时监控 _posts 目录，你的新增、保存动作都会被捕捉到，<br/>
最最重要的一点是，你每执行一次保存操作，更新的内容都能在浏览器中有所反映，<br/>
待工作完毕之后，你只需要部署、提交源文件一次就行了，大大地提高了撰写博文的效率！</p>

<h2>twitter 被屏蔽导致持续请求的问题</h2>

<p>国内用 octopress 架设好博客以后，<br/>
因为天朝屏蔽了 twitter，而 octopress 又默认启用了 twitter，<br/>
所以会导致一个问题（我用的是 mac 平台的 chrome 浏览器）：<br/>
博客页面打开时，标签页里面的圆圈要转动很久才停止，<br/>
浏览器左下角呈现字样：<br/>
<strong>Waiting for platform.twitter.com...</strong></p>

<p>怎么解决这个问题呢？<br/>
打开 octopress 所在的目录，编辑 _config.yml 文件，<br/>
将 <code>twitter_follow_button</code> 和 <code>twitter_tweet_button</code> 的值设置为 false 即可！</p>

<h2>谈一下自己对 markdown 格式的感受：</h2>

<p>markdown 格式用来写博文真的挺好的，没有糊里花哨的颜色料理，<br/>
可以很好的区分开代码和文字，加粗样式什么的用起来也挺方便灵活的~<br/>
给我的感觉就是：方便实用，精炼简洁，没有一丝冗余之感~<br/>
另外，我非常喜欢 octopress 的默认主题，简洁而大气，<br/>
我想我应该不会为了避免撞衫而去寻找其他的主题了，有了这个我就已经感到非常满足了~<br/>
此刻我用 MacVim 写着 markdown 格式的博文，这感觉真是爽透了~<br/>
从未曾想象此刻能如此轻松惬意地书写着博文，这美妙的初体验我将铭记于心！<br/>
最后的最后，此种方式的博文书写，本地机器和 github 服务器人手一份拷贝，<br/>
再也不用担心数据丢失的问题了~</p>

<h2>后记：  </h2>

<p>历经磨难终于在 github 上面架好了自己的 blog，灰常开心啊~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(转载)在 github 上使用 octopress]]></title>
    <link href="http://yang3wei.github.com/blog/2013/01/28/zhuan-zai-zai-github-shang-shi-yong-octopress/"/>
    <updated>2013-01-28T14:46:00+08:00</updated>
    <id>http://yang3wei.github.com/blog/2013/01/28/zhuan-zai-zai-github-shang-shi-yong-octopress</id>
    <content type="html"><![CDATA[<p>原文链接：<a href="http://huanggang.me/archives/654" title="海阔天空">http://huanggang.me/archives/654</a></p>

<h2>一、Octopress 简介</h2>

<p>Octopress 是使用 ruby 语言编写的一套建立在 jekyll 之上的博客系统，它有一些很独特的特点：</p>

<pre><code>1. 使用静态页面；
2. 不使用数据库；
3. 使用 markdown 标记语言编写文章；
4. 可以与 git 紧密集成，方便地进行博客的版本管理；
5. 可以于 Github Pages 集成，不需要单独的 web hosting，只要你有 github 帐号即可。
</pre>


<p></code>
这些特点中的第三点到第五点尤其吸引我（第一点和第二点也很酷），于是我花了些时间研究。<br/>
以下是相关的步骤和心得。</p>

<!-- more -->


<p></p>

<h2>二、在你本地安装 octopress</h2>

<p>说“安装”可能不太恰当，准确的说是你需要从 github 上取得 octopress 的代码并进行些许配置。步骤请参考这里。</p>

<ol>
<li><p>安装 RVM(Ruby Version Manager) 并使用”Ruby 1.9.2″作为你本地的 ruby 实现，<br/>
这事我之前按照这篇文章做过，这里就不详细说了，你也可以按照octopress官方的介绍来安装RVM。</p></li>
<li><p>从 github 得到 octopress 代码，运行以下命令：</p></li>
</ol>


<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress    # If you use RVM, You'll be asked if you trust the .rvmrc file (say yes).
ruby --version  # Should report Ruby 1.9.2

gem install bundler # Install dependencies
bundle install

rake install # Install the default Octopress theme
</pre>


<p></code></p>

<h2>三、配置你本地的 octopress，使之可以发布到你的 github pages</h2>

<p>这样就可以做到：<br/>
你在本地创建博客文章(当然是用 markdown 写成的)，然后直接 deploy 到你的 github pages repo，github会自动进行发布。<br/>
也就是说：所有发博客的动作只需要在你本地用命令完成，酷吧！</p>

<p>参考了这里。</p>

<ol>
<li>创建你的 github pages repo</li>
</ol>


<p>如果你的 github 用户名是 username，那个就创建一个名称为”username.github.com”的repo，
这个 repo 就是你的 github pages repo，更多信息可以参考这里。</p>

<ol>
<li>在你本地运行以下命令，octopress 会自动帮你进行配置：</li>
</ol>


<pre><code>cd your_local_octopress_directory
rake setup_github_pages
</pre>


<p></code></p>

<p>注意：当命令提示你输入github URL时，请使用这个格式的URL:<br/>
<code>git@github.com:username/username.github.com.git</code></p>

<p>当这个命令运行完成之后，你的github pages repo会有两个branches:<br/>
master branch 用于静态页面的发布(“octopress/<em>deploy”的内容)，<br/>
source branch 用于保存你的 blog 内容（”octopress”目录中除了”</em>deploy”的其它内容）</p>

<p>到这里基本的配置就完成了，你还可以参考这里配置你博客的名称等信息。</p>

<h2>四、编写并发布文章</h2>

<p>请参考这里。</p>

<ol>
<li>写文章</li>
</ol>


<pre><code>cd your_local_octopress_directory
rake new_post["Your Title of Your Article"]
</pre>


<p></code>
该命令会在你的”octopress/source/_posts”目录下生成对应的”.markdown”文件，<br/>
用任意文本编辑器编辑，使用 markdown 语法编写你的文章。</p>

<ol>
<li>生成，预览并发布：</li>
</ol>


<pre><code>cd your_local_octopress_directory
rake generate
rake preview
rake deploy
</pre>


<p></code>
rake generate 命令用于将 markdown 文件转化为静态页面
rake preview 命令用于打开一个 web server 供你预览编写的页面效果如何，通过 “http://localhost:4000”进行访问
rake deploy 命令用于将生成的静态页面内容提交到 github 的 repo（“master”branch）</p>

<p>还有很重要的一步是把你的修改(文本修改，不包含”_deploy”目录，”deploy”目录保存”rake generate”生成的静态页面内容，会被”rake deploy”命令提交到”master branch”)放到你的github pages(“source” branch)上:</p>

<pre><code>cd your_local_octopress_directory
git add .
git commit -m 'your message'
git push origin source
</pre>


<p></code>
—–EOF—–</p>
]]></content>
  </entry>
  
</feed>
